cscope 15 $HOME/gdrive/work/X11_Org/projects/Menu/src               0000419101
	@adf_colors.h

16 #i‚de‡
ADF_COLORS_H


17 
	#ADF_COLORS_H


	)

21 
	#lbœck
 "\033[0;30m"

	)

22 
	#lblue
 "\033[0;34m"

	)

23 
	#lgªí
 "\033[0;32m"

	)

24 
	#lcy™
 "\033[0;36m"

	)

25 
	#Ãed
 "\033[0;31m"

	)

26 
	#ÕuΩÀ
 "\033[0;35m"

	)

27 
	#lbrown
 "\033[0;33m"

	)

28 
	#lgøy
 "\033[0;37m"

	)

31 
	#ªd
 "\033[1;31m"

	)

32 
	#cy™
 "\033[1;36m"

	)

33 
	#gªí
 "\033[1;32m"

	)

34 
	#blue
 "\033[1;34m"

	)

36 
	#bœck
 "\033[1;30m"

	)

37 
	#brown
 "\033[1;33m"

	)

38 
	#magíè
 "\033[1;35m"

	)

39 
	#gøy
 "\033[1;37m"

	)

40 
	#whôe
 "\033[1;37m"

	)

41 
	#yñlow
 "\033[1;33m"

	)

43 
	#˛s
 "\033[2J\033[1;1H"

	)

45 
	#n⁄e
 "\033[0m"

	)

48 
	#⁄puΩÀ
 "\033[45m"

	)

49 
	#⁄bœck
 "\033[40m"

	)

50 
	#⁄ªd
 "\033[41m"

	)

51 
	#⁄gªí
 "\033[42m"

	)

52 
	#⁄yñlow
 "\033[43m"

	)

53 
	#⁄blue
 "\033[44m"

	)

54 
	#⁄cy™
 "\033[46m"

	)

55 
	#⁄whôe
 "\033[47m"

	)

70 
	#_01_
 "\033[38;5;1m"

	)

71 
	#_02_
 "\033[38;5;2m"

	)

72 
	#_03_
 "\033[38;5;3m"

	)

73 
	#_04_
 "\033[38;5;4m"

	)

74 
	#_05_
 "\033[38;5;5m"

	)

75 
	#_06_
 "\033[38;5;6m"

	)

76 
	#_07_
 "\033[38;5;7m"

	)

77 
	#_08_
 "\033[38;5;8m"

	)

78 
	#_09_
 "\033[38;5;9m"

	)

79 
	#_010_
 "\033[38;5;10m"

	)

80 
	#_011_
 "\033[38;5;11m"

	)

81 
	#_012_
 "\033[38;5;12m"

	)

82 
	#_013_
 "\033[38;5;13m"

	)

83 
	#_014_
 "\033[38;5;14m"

	)

84 
	#_015_
 "\033[38;5;15m"

	)

85 
	#_016_
 "\033[38;5;16m"

	)

86 
	#_017_
 "\033[38;5;17m"

	)

87 
	#_018_
 "\033[38;5;18m"

	)

88 
	#_019_
 "\033[38;5;19m"

	)

89 
	#_020_
 "\033[38;5;20m"

	)

90 
	#_021_
 "\033[38;5;21m"

	)

91 
	#_022_
 "\033[38;5;22m"

	)

92 
	#_023_
 "\033[38;5;23m"

	)

93 
	#_024_
 "\033[38;5;24m"

	)

94 
	#_025_
 "\033[38;5;25m"

	)

95 
	#_026_
 "\033[38;5;26m"

	)

96 
	#_027_
 "\033[38;5;27m"

	)

97 
	#_028_
 "\033[38;5;28m"

	)

98 
	#_029_
 "\033[38;5;29m"

	)

99 
	#_030_
 "\033[38;5;30m"

	)

100 
	#_031_
 "\033[38;5;31m"

	)

101 
	#_032_
 "\033[38;5;32m"

	)

102 
	#_033_
 "\033[38;5;33m"

	)

103 
	#_034_
 "\033[38;5;34m"

	)

104 
	#_035_
 "\033[38;5;35m"

	)

105 
	#_036_
 "\033[38;5;36m"

	)

106 
	#_037_
 "\033[38;5;37m"

	)

107 
	#_038_
 "\033[38;5;38m"

	)

108 
	#_039_
 "\033[38;5;39m"

	)

109 
	#_040_
 "\033[38;5;40m"

	)

110 
	#_041_
 "\033[38;5;41m"

	)

111 
	#_042_
 "\033[38;5;42m"

	)

112 
	#_043_
 "\033[38;5;43m"

	)

113 
	#_044_
 "\033[38;5;44m"

	)

114 
	#_045_
 "\033[38;5;45m"

	)

115 
	#_046_
 "\033[38;5;46m"

	)

116 
	#_047_
 "\033[38;5;47m"

	)

117 
	#_048_
 "\033[38;5;48m"

	)

118 
	#_049_
 "\033[38;5;49m"

	)

119 
	#_050_
 "\033[38;5;50m"

	)

120 
	#_051_
 "\033[38;5;51m"

	)

121 
	#_052_
 "\033[38;5;52m"

	)

122 
	#_053_
 "\033[38;5;53m"

	)

123 
	#_054_
 "\033[38;5;54m"

	)

124 
	#_055_
 "\033[38;5;55m"

	)

125 
	#_056_
 "\033[38;5;56m"

	)

126 
	#_057_
 "\033[38;5;57m"

	)

127 
	#_058_
 "\033[38;5;58m"

	)

128 
	#_059_
 "\033[38;5;59m"

	)

129 
	#_060_
 "\033[38;5;60m"

	)

130 
	#_061_
 "\033[38;5;61m"

	)

131 
	#_062_
 "\033[38;5;62m"

	)

132 
	#_063_
 "\033[38;5;63m"

	)

133 
	#_064_
 "\033[38;5;64m"

	)

134 
	#_065_
 "\033[38;5;65m"

	)

135 
	#_066_
 "\033[38;5;66m"

	)

136 
	#_067_
 "\033[38;5;67m"

	)

137 
	#_068_
 "\033[38;5;68m"

	)

138 
	#_069_
 "\033[38;5;69m"

	)

139 
	#_070_
 "\033[38;5;70m"

	)

140 
	#_071_
 "\033[38;5;71m"

	)

141 
	#_072_
 "\033[38;5;72m"

	)

142 
	#_073_
 "\033[38;5;73m"

	)

143 
	#_074_
 "\033[38;5;74m"

	)

144 
	#_075_
 "\033[38;5;75m"

	)

145 
	#_076_
 "\033[38;5;76m"

	)

146 
	#_077_
 "\033[38;5;77m"

	)

147 
	#_078_
 "\033[38;5;78m"

	)

148 
	#_079_
 "\033[38;5;79m"

	)

149 
	#_080_
 "\033[38;5;80m"

	)

150 
	#_081_
 "\033[38;5;81m"

	)

151 
	#_082_
 "\033[38;5;82m"

	)

152 
	#_083_
 "\033[38;5;83m"

	)

153 
	#_084_
 "\033[38;5;84m"

	)

154 
	#_085_
 "\033[38;5;85m"

	)

155 
	#_086_
 "\033[38;5;86m"

	)

156 
	#_087_
 "\033[38;5;87m"

	)

157 
	#_088_
 "\033[38;5;88m"

	)

158 
	#_089_
 "\033[38;5;89m"

	)

159 
	#_090_
 "\033[38;5;90m"

	)

160 
	#_091_
 "\033[38;5;91m"

	)

161 
	#_092_
 "\033[38;5;92m"

	)

162 
	#_093_
 "\033[38;5;93m"

	)

163 
	#_094_
 "\033[38;5;94m"

	)

164 
	#_095_
 "\033[38;5;95m"

	)

165 
	#_096_
 "\033[38;5;96m"

	)

166 
	#_097_
 "\033[38;5;97m"

	)

167 
	#_098_
 "\033[38;5;98m"

	)

168 
	#_099_
 "\033[38;5;99m"

	)

169 
	#_0100_
 "\033[38;5;100m"

	)

170 
	#_0101_
 "\033[38;5;101m"

	)

171 
	#_0102_
 "\033[38;5;102m"

	)

172 
	#_0103_
 "\033[38;5;103m"

	)

173 
	#_0104_
 "\033[38;5;104m"

	)

174 
	#_0105_
 "\033[38;5;105m"

	)

175 
	#_0106_
 "\033[38;5;106m"

	)

176 
	#_0107_
 "\033[38;5;107m"

	)

177 
	#_0108_
 "\033[38;5;108m"

	)

178 
	#_0109_
 "\033[38;5;109m"

	)

179 
	#_0110_
 "\033[38;5;110m"

	)

180 
	#_0111_
 "\033[38;5;111m"

	)

181 
	#_0112_
 "\033[38;5;112m"

	)

182 
	#_0113_
 "\033[38;5;113m"

	)

183 
	#_0114_
 "\033[38;5;114m"

	)

184 
	#_0115_
 "\033[38;5;115m"

	)

185 
	#_0116_
 "\033[38;5;116m"

	)

186 
	#_0117_
 "\033[38;5;117m"

	)

187 
	#_0118_
 "\033[38;5;118m"

	)

188 
	#_0119_
 "\033[38;5;119m"

	)

189 
	#_0120_
 "\033[38;5;120m"

	)

190 
	#_0121_
 "\033[38;5;121m"

	)

191 
	#_0122_
 "\033[38;5;122m"

	)

192 
	#_0123_
 "\033[38;5;123m"

	)

193 
	#_0124_
 "\033[38;5;124m"

	)

194 
	#_0125_
 "\033[38;5;125m"

	)

195 
	#_0126_
 "\033[38;5;126m"

	)

196 
	#_0127_
 "\033[38;5;127m"

	)

197 
	#_0128_
 "\033[38;5;128m"

	)

198 
	#_0129_
 "\033[38;5;129m"

	)

199 
	#_0130_
 "\033[38;5;130m"

	)

200 
	#_0131_
 "\033[38;5;131m"

	)

201 
	#_0132_
 "\033[38;5;132m"

	)

202 
	#_0133_
 "\033[38;5;133m"

	)

203 
	#_0134_
 "\033[38;5;134m"

	)

204 
	#_0135_
 "\033[38;5;135m"

	)

205 
	#_0136_
 "\033[38;5;136m"

	)

206 
	#_0137_
 "\033[38;5;137m"

	)

207 
	#_0138_
 "\033[38;5;138m"

	)

208 
	#_0139_
 "\033[38;5;139m"

	)

209 
	#_0140_
 "\033[38;5;140m"

	)

210 
	#_0141_
 "\033[38;5;141m"

	)

211 
	#_0142_
 "\033[38;5;142m"

	)

212 
	#_0143_
 "\033[38;5;143m"

	)

213 
	#_0144_
 "\033[38;5;144m"

	)

214 
	#_0145_
 "\033[38;5;145m"

	)

215 
	#_0146_
 "\033[38;5;146m"

	)

216 
	#_0147_
 "\033[38;5;147m"

	)

217 
	#_0148_
 "\033[38;5;148m"

	)

218 
	#_0149_
 "\033[38;5;149m"

	)

219 
	#_0150_
 "\033[38;5;150m"

	)

220 
	#_0151_
 "\033[38;5;151m"

	)

221 
	#_0152_
 "\033[38;5;152m"

	)

222 
	#_0153_
 "\033[38;5;153m"

	)

223 
	#_0154_
 "\033[38;5;154m"

	)

224 
	#_0155_
 "\033[38;5;155m"

	)

225 
	#_0156_
 "\033[38;5;156m"

	)

226 
	#_0157_
 "\033[38;5;157m"

	)

227 
	#_0158_
 "\033[38;5;158m"

	)

228 
	#_0159_
 "\033[38;5;159m"

	)

229 
	#_0160_
 "\033[38;5;160m"

	)

230 
	#_0161_
 "\033[38;5;161m"

	)

231 
	#_0162_
 "\033[38;5;162m"

	)

232 
	#_0163_
 "\033[38;5;163m"

	)

233 
	#_0164_
 "\033[38;5;164m"

	)

234 
	#_0165_
 "\033[38;5;165m"

	)

235 
	#_0166_
 "\033[38;5;166m"

	)

236 
	#_0167_
 "\033[38;5;167m"

	)

237 
	#_0168_
 "\033[38;5;168m"

	)

238 
	#_0169_
 "\033[38;5;169m"

	)

239 
	#_0170_
 "\033[38;5;170m"

	)

240 
	#_0171_
 "\033[38;5;171m"

	)

241 
	#_0172_
 "\033[38;5;172m"

	)

242 
	#_0173_
 "\033[38;5;173m"

	)

243 
	#_0174_
 "\033[38;5;174m"

	)

244 
	#_0175_
 "\033[38;5;175m"

	)

245 
	#_0176_
 "\033[38;5;176m"

	)

246 
	#_0177_
 "\033[38;5;177m"

	)

247 
	#_0178_
 "\033[38;5;178m"

	)

248 
	#_0179_
 "\033[38;5;179m"

	)

249 
	#_0180_
 "\033[38;5;180m"

	)

250 
	#_0181_
 "\033[38;5;181m"

	)

251 
	#_0182_
 "\033[38;5;182m"

	)

252 
	#_0183_
 "\033[38;5;183m"

	)

253 
	#_0184_
 "\033[38;5;184m"

	)

254 
	#_0185_
 "\033[38;5;185m"

	)

255 
	#_0186_
 "\033[38;5;186m"

	)

256 
	#_0187_
 "\033[38;5;187m"

	)

257 
	#_0188_
 "\033[38;5;188m"

	)

258 
	#_0189_
 "\033[38;5;189m"

	)

259 
	#_0190_
 "\033[38;5;190m"

	)

260 
	#_0191_
 "\033[38;5;191m"

	)

261 
	#_0192_
 "\033[38;5;192m"

	)

262 
	#_0193_
 "\033[38;5;193m"

	)

263 
	#_0194_
 "\033[38;5;194m"

	)

264 
	#_0195_
 "\033[38;5;195m"

	)

265 
	#_0196_
 "\033[38;5;196m"

	)

266 
	#_0197_
 "\033[38;5;197m"

	)

267 
	#_0198_
 "\033[38;5;198m"

	)

268 
	#_0199_
 "\033[38;5;199m"

	)

269 
	#_0200_
 "\033[38;5;200m"

	)

270 
	#_0201_
 "\033[38;5;201m"

	)

271 
	#_0202_
 "\033[38;5;202m"

	)

272 
	#_0203_
 "\033[38;5;203m"

	)

273 
	#_0204_
 "\033[38;5;204m"

	)

274 
	#_0205_
 "\033[38;5;205m"

	)

275 
	#_0206_
 "\033[38;5;206m"

	)

276 
	#_0207_
 "\033[38;5;207m"

	)

277 
	#_0208_
 "\033[38;5;208m"

	)

278 
	#_0209_
 "\033[38;5;209m"

	)

279 
	#_0210_
 "\033[38;5;210m"

	)

280 
	#_0211_
 "\033[38;5;211m"

	)

281 
	#_0212_
 "\033[38;5;212m"

	)

282 
	#_0213_
 "\033[38;5;213m"

	)

283 
	#_0214_
 "\033[38;5;214m"

	)

284 
	#_0215_
 "\033[38;5;215m"

	)

285 
	#_0216_
 "\033[38;5;216m"

	)

286 
	#_0217_
 "\033[38;5;217m"

	)

287 
	#_0218_
 "\033[38;5;218m"

	)

288 
	#_0219_
 "\033[38;5;219m"

	)

289 
	#_0220_
 "\033[38;5;220m"

	)

290 
	#_0221_
 "\033[38;5;221m"

	)

291 
	#_0222_
 "\033[38;5;222m"

	)

292 
	#_0223_
 "\033[38;5;223m"

	)

293 
	#_0224_
 "\033[38;5;224m"

	)

294 
	#_0225_
 "\033[38;5;225m"

	)

295 
	#_0226_
 "\033[38;5;226m"

	)

296 
	#_0227_
 "\033[38;5;227m"

	)

297 
	#_0228_
 "\033[38;5;228m"

	)

298 
	#_0229_
 "\033[38;5;229m"

	)

299 
	#_0230_
 "\033[38;5;230m"

	)

300 
	#_0231_
 "\033[38;5;231m"

	)

301 
	#_0232_
 "\033[38;5;232m"

	)

302 
	#_0233_
 "\033[38;5;233m"

	)

303 
	#_0234_
 "\033[38;5;234m"

	)

304 
	#_0235_
 "\033[38;5;235m"

	)

305 
	#_0236_
 "\033[38;5;236m"

	)

306 
	#_0237_
 "\033[38;5;237m"

	)

307 
	#_0238_
 "\033[38;5;238m"

	)

308 
	#_0239_
 "\033[38;5;239m"

	)

309 
	#_0240_
 "\033[38;5;240m"

	)

310 
	#_0241_
 "\033[38;5;241m"

	)

311 
	#_0242_
 "\033[38;5;242m"

	)

312 
	#_0243_
 "\033[38;5;243m"

	)

313 
	#_0244_
 "\033[38;5;244m"

	)

314 
	#_0245_
 "\033[38;5;245m"

	)

315 
	#_0246_
 "\033[38;5;246m"

	)

316 
	#_0247_
 "\033[38;5;247m"

	)

317 
	#_0248_
 "\033[38;5;248m"

	)

318 
	#_0249_
 "\033[38;5;249m"

	)

319 
	#_0250_
 "\033[38;5;250m"

	)

320 
	#_0251_
 "\033[38;5;251m"

	)

321 
	#_0252_
 "\033[38;5;252m"

	)

322 
	#_0253_
 "\033[38;5;253m"

	)

323 
	#_0254_
 "\033[38;5;254m"

	)

324 
	#_0255_
 "\033[38;5;255m"

	)

325 
	#_0256_
 "\033[38;5;256m"

	)

331 
	#_001_
 "\033[48;5;1m"

	)

332 
	#_002_
 "\033[48;5;2m"

	)

333 
	#_003_
 "\033[48;5;3m"

	)

334 
	#_004_
 "\033[48;5;4m"

	)

335 
	#_005_
 "\033[48;5;5m"

	)

336 
	#_006_
 "\033[48;5;6m"

	)

337 
	#_007_
 "\033[48;5;7m"

	)

338 
	#_008_
 "\033[48;5;8m"

	)

339 
	#_009_
 "\033[48;5;9m"

	)

340 
	#_0010_
 "\033[48;5;10m"

	)

341 
	#_0011_
 "\033[48;5;11m"

	)

342 
	#_0012_
 "\033[48;5;12m"

	)

343 
	#_0013_
 "\033[48;5;13m"

	)

344 
	#_0014_
 "\033[48;5;14m"

	)

345 
	#_0015_
 "\033[48;5;15m"

	)

346 
	#_0016_
 "\033[48;5;16m"

	)

347 
	#_0017_
 "\033[48;5;17m"

	)

348 
	#_0018_
 "\033[48;5;18m"

	)

349 
	#_0019_
 "\033[48;5;19m"

	)

350 
	#_0020_
 "\033[48;5;20m"

	)

351 
	#_0021_
 "\033[48;5;21m"

	)

352 
	#_0022_
 "\033[48;5;22m"

	)

353 
	#_0023_
 "\033[48;5;23m"

	)

354 
	#_0024_
 "\033[48;5;24m"

	)

355 
	#_0025_
 "\033[48;5;25m"

	)

356 
	#_0026_
 "\033[48;5;26m"

	)

357 
	#_0027_
 "\033[48;5;27m"

	)

358 
	#_0028_
 "\033[48;5;28m"

	)

359 
	#_0029_
 "\033[48;5;29m"

	)

360 
	#_0030_
 "\033[48;5;30m"

	)

361 
	#_0031_
 "\033[48;5;31m"

	)

362 
	#_0032_
 "\033[48;5;32m"

	)

363 
	#_0033_
 "\033[48;5;33m"

	)

364 
	#_0034_
 "\033[48;5;34m"

	)

365 
	#_0035_
 "\033[48;5;35m"

	)

366 
	#_0036_
 "\033[48;5;36m"

	)

367 
	#_0037_
 "\033[48;5;37m"

	)

368 
	#_0038_
 "\033[48;5;38m"

	)

369 
	#_0039_
 "\033[48;5;39m"

	)

370 
	#_0040_
 "\033[48;5;40m"

	)

371 
	#_0041_
 "\033[48;5;41m"

	)

372 
	#_0042_
 "\033[48;5;42m"

	)

373 
	#_0043_
 "\033[48;5;43m"

	)

374 
	#_0044_
 "\033[48;5;44m"

	)

375 
	#_0045_
 "\033[48;5;45m"

	)

376 
	#_0046_
 "\033[48;5;46m"

	)

377 
	#_0047_
 "\033[48;5;47m"

	)

378 
	#_0048_
 "\033[48;5;48m"

	)

379 
	#_0049_
 "\033[48;5;49m"

	)

380 
	#_0050_
 "\033[48;5;50m"

	)

381 
	#_0051_
 "\033[48;5;51m"

	)

382 
	#_0052_
 "\033[48;5;52m"

	)

383 
	#_0053_
 "\033[48;5;53m"

	)

384 
	#_0054_
 "\033[48;5;54m"

	)

385 
	#_0055_
 "\033[48;5;55m"

	)

386 
	#_0056_
 "\033[48;5;56m"

	)

387 
	#_0057_
 "\033[48;5;57m"

	)

388 
	#_0058_
 "\033[48;5;58m"

	)

389 
	#_0059_
 "\033[48;5;59m"

	)

390 
	#_0060_
 "\033[48;5;60m"

	)

391 
	#_0061_
 "\033[48;5;61m"

	)

392 
	#_0062_
 "\033[48;5;62m"

	)

393 
	#_0063_
 "\033[48;5;63m"

	)

394 
	#_0064_
 "\033[48;5;64m"

	)

395 
	#_0065_
 "\033[48;5;65m"

	)

396 
	#_0066_
 "\033[48;5;66m"

	)

397 
	#_0067_
 "\033[48;5;67m"

	)

398 
	#_0068_
 "\033[48;5;68m"

	)

399 
	#_0069_
 "\033[48;5;69m"

	)

400 
	#_0070_
 "\033[48;5;70m"

	)

401 
	#_0071_
 "\033[48;5;71m"

	)

402 
	#_0072_
 "\033[48;5;72m"

	)

403 
	#_0073_
 "\033[48;5;73m"

	)

404 
	#_0074_
 "\033[48;5;74m"

	)

405 
	#_0075_
 "\033[48;5;75m"

	)

406 
	#_0076_
 "\033[48;5;76m"

	)

407 
	#_0077_
 "\033[48;5;77m"

	)

408 
	#_0078_
 "\033[48;5;78m"

	)

409 
	#_0079_
 "\033[48;5;79m"

	)

410 
	#_0080_
 "\033[48;5;80m"

	)

411 
	#_0081_
 "\033[48;5;81m"

	)

412 
	#_0082_
 "\033[48;5;82m"

	)

413 
	#_0083_
 "\033[48;5;83m"

	)

414 
	#_0084_
 "\033[48;5;84m"

	)

415 
	#_0085_
 "\033[48;5;85m"

	)

416 
	#_0086_
 "\033[48;5;86m"

	)

417 
	#_0087_
 "\033[48;5;87m"

	)

418 
	#_0088_
 "\033[48;5;88m"

	)

419 
	#_0089_
 "\033[48;5;89m"

	)

420 
	#_0090_
 "\033[48;5;90m"

	)

421 
	#_0091_
 "\033[48;5;91m"

	)

422 
	#_0092_
 "\033[48;5;92m"

	)

423 
	#_0093_
 "\033[48;5;93m"

	)

424 
	#_0094_
 "\033[48;5;94m"

	)

425 
	#_0095_
 "\033[48;5;95m"

	)

426 
	#_0096_
 "\033[48;5;96m"

	)

427 
	#_0097_
 "\033[48;5;97m"

	)

428 
	#_0098_
 "\033[48;5;98m"

	)

429 
	#_0099_
 "\033[48;5;99m"

	)

430 
	#_00100_
 "\033[48;5;100m"

	)

431 
	#_00101_
 "\033[48;5;101m"

	)

432 
	#_00102_
 "\033[48;5;102m"

	)

433 
	#_00103_
 "\033[48;5;103m"

	)

434 
	#_00104_
 "\033[48;5;104m"

	)

435 
	#_00105_
 "\033[48;5;105m"

	)

436 
	#_00106_
 "\033[48;5;106m"

	)

437 
	#_00107_
 "\033[48;5;107m"

	)

438 
	#_00108_
 "\033[48;5;108m"

	)

439 
	#_00109_
 "\033[48;5;109m"

	)

440 
	#_00110_
 "\033[48;5;110m"

	)

441 
	#_00111_
 "\033[48;5;111m"

	)

442 
	#_00112_
 "\033[48;5;112m"

	)

443 
	#_00113_
 "\033[48;5;113m"

	)

444 
	#_00114_
 "\033[48;5;114m"

	)

445 
	#_00115_
 "\033[48;5;115m"

	)

446 
	#_00116_
 "\033[48;5;116m"

	)

447 
	#_00117_
 "\033[48;5;117m"

	)

448 
	#_00118_
 "\033[48;5;118m"

	)

449 
	#_00119_
 "\033[48;5;119m"

	)

450 
	#_00120_
 "\033[48;5;120m"

	)

451 
	#_00121_
 "\033[48;5;121m"

	)

452 
	#_00122_
 "\033[48;5;122m"

	)

453 
	#_00123_
 "\033[48;5;123m"

	)

454 
	#_00124_
 "\033[48;5;124m"

	)

455 
	#_00125_
 "\033[48;5;125m"

	)

456 
	#_00126_
 "\033[48;5;126m"

	)

457 
	#_00127_
 "\033[48;5;127m"

	)

458 
	#_00128_
 "\033[48;5;128m"

	)

459 
	#_00129_
 "\033[48;5;129m"

	)

460 
	#_00130_
 "\033[48;5;130m"

	)

461 
	#_00131_
 "\033[48;5;131m"

	)

462 
	#_00132_
 "\033[48;5;132m"

	)

463 
	#_00133_
 "\033[48;5;133m"

	)

464 
	#_00134_
 "\033[48;5;134m"

	)

465 
	#_00135_
 "\033[48;5;135m"

	)

466 
	#_00136_
 "\033[48;5;136m"

	)

467 
	#_00137_
 "\033[48;5;137m"

	)

468 
	#_00138_
 "\033[48;5;138m"

	)

469 
	#_00139_
 "\033[48;5;139m"

	)

470 
	#_00140_
 "\033[48;5;140m"

	)

471 
	#_00141_
 "\033[48;5;141m"

	)

472 
	#_00142_
 "\033[48;5;142m"

	)

473 
	#_00143_
 "\033[48;5;143m"

	)

474 
	#_00144_
 "\033[48;5;144m"

	)

475 
	#_00145_
 "\033[48;5;145m"

	)

476 
	#_00146_
 "\033[48;5;146m"

	)

477 
	#_00147_
 "\033[48;5;147m"

	)

478 
	#_00148_
 "\033[48;5;148m"

	)

479 
	#_00149_
 "\033[48;5;149m"

	)

480 
	#_00150_
 "\033[48;5;150m"

	)

481 
	#_00151_
 "\033[48;5;151m"

	)

482 
	#_00152_
 "\033[48;5;152m"

	)

483 
	#_00153_
 "\033[48;5;153m"

	)

484 
	#_00154_
 "\033[48;5;154m"

	)

485 
	#_00155_
 "\033[48;5;155m"

	)

486 
	#_00156_
 "\033[48;5;156m"

	)

487 
	#_00157_
 "\033[48;5;157m"

	)

488 
	#_00158_
 "\033[48;5;158m"

	)

489 
	#_00159_
 "\033[48;5;159m"

	)

490 
	#_00160_
 "\033[48;5;160m"

	)

491 
	#_00161_
 "\033[48;5;161m"

	)

492 
	#_00162_
 "\033[48;5;162m"

	)

493 
	#_00163_
 "\033[48;5;163m"

	)

494 
	#_00164_
 "\033[48;5;164m"

	)

495 
	#_00165_
 "\033[48;5;165m"

	)

496 
	#_00166_
 "\033[48;5;166m"

	)

497 
	#_00167_
 "\033[48;5;167m"

	)

498 
	#_00168_
 "\033[48;5;168m"

	)

499 
	#_00169_
 "\033[48;5;169m"

	)

500 
	#_00170_
 "\033[48;5;170m"

	)

501 
	#_00171_
 "\033[48;5;171m"

	)

502 
	#_00172_
 "\033[48;5;172m"

	)

503 
	#_00173_
 "\033[48;5;173m"

	)

504 
	#_00174_
 "\033[48;5;174m"

	)

505 
	#_00175_
 "\033[48;5;175m"

	)

506 
	#_00176_
 "\033[48;5;176m"

	)

507 
	#_00177_
 "\033[48;5;177m"

	)

508 
	#_00178_
 "\033[48;5;178m"

	)

509 
	#_00179_
 "\033[48;5;179m"

	)

510 
	#_00180_
 "\033[48;5;180m"

	)

511 
	#_00181_
 "\033[48;5;181m"

	)

512 
	#_00182_
 "\033[48;5;182m"

	)

513 
	#_00183_
 "\033[48;5;183m"

	)

514 
	#_00184_
 "\033[48;5;184m"

	)

515 
	#_00185_
 "\033[48;5;185m"

	)

516 
	#_00186_
 "\033[48;5;186m"

	)

517 
	#_00187_
 "\033[48;5;187m"

	)

518 
	#_00188_
 "\033[48;5;188m"

	)

519 
	#_00189_
 "\033[48;5;189m"

	)

520 
	#_00190_
 "\033[48;5;190m"

	)

521 
	#_00191_
 "\033[48;5;191m"

	)

522 
	#_00192_
 "\033[48;5;192m"

	)

523 
	#_00193_
 "\033[48;5;193m"

	)

524 
	#_00194_
 "\033[48;5;194m"

	)

525 
	#_00195_
 "\033[48;5;195m"

	)

526 
	#_00196_
 "\033[48;5;196m"

	)

527 
	#_00197_
 "\033[48;5;197m"

	)

528 
	#_00198_
 "\033[48;5;198m"

	)

529 
	#_00199_
 "\033[48;5;199m"

	)

530 
	#_00200_
 "\033[48;5;200m"

	)

531 
	#_00201_
 "\033[48;5;201m"

	)

532 
	#_00202_
 "\033[48;5;202m"

	)

533 
	#_00203_
 "\033[48;5;203m"

	)

534 
	#_00204_
 "\033[48;5;204m"

	)

535 
	#_00205_
 "\033[48;5;205m"

	)

536 
	#_00206_
 "\033[48;5;206m"

	)

537 
	#_00207_
 "\033[48;5;207m"

	)

538 
	#_00208_
 "\033[48;5;208m"

	)

539 
	#_00209_
 "\033[48;5;209m"

	)

540 
	#_00210_
 "\033[48;5;210m"

	)

541 
	#_00211_
 "\033[48;5;211m"

	)

542 
	#_00212_
 "\033[48;5;212m"

	)

543 
	#_00213_
 "\033[48;5;213m"

	)

544 
	#_00214_
 "\033[48;5;214m"

	)

545 
	#_00215_
 "\033[48;5;215m"

	)

546 
	#_00216_
 "\033[48;5;216m"

	)

547 
	#_00217_
 "\033[48;5;217m"

	)

548 
	#_00218_
 "\033[48;5;218m"

	)

549 
	#_00219_
 "\033[48;5;219m"

	)

550 
	#_00220_
 "\033[48;5;220m"

	)

551 
	#_00221_
 "\033[48;5;221m"

	)

552 
	#_00222_
 "\033[48;5;222m"

	)

553 
	#_00223_
 "\033[48;5;223m"

	)

554 
	#_00224_
 "\033[48;5;224m"

	)

555 
	#_00225_
 "\033[48;5;225m"

	)

556 
	#_00226_
 "\033[48;5;226m"

	)

557 
	#_00227_
 "\033[48;5;227m"

	)

558 
	#_00228_
 "\033[48;5;228m"

	)

559 
	#_00229_
 "\033[48;5;229m"

	)

560 
	#_00230_
 "\033[48;5;230m"

	)

561 
	#_00231_
 "\033[48;5;231m"

	)

562 
	#_00232_
 "\033[48;5;232m"

	)

563 
	#_00233_
 "\033[48;5;233m"

	)

564 
	#_00234_
 "\033[48;5;234m"

	)

565 
	#_00235_
 "\033[48;5;235m"

	)

566 
	#_00236_
 "\033[48;5;236m"

	)

567 
	#_00237_
 "\033[48;5;237m"

	)

568 
	#_00238_
 "\033[48;5;238m"

	)

569 
	#_00239_
 "\033[48;5;239m"

	)

570 
	#_00240_
 "\033[48;5;240m"

	)

571 
	#_00241_
 "\033[48;5;241m"

	)

572 
	#_00242_
 "\033[48;5;242m"

	)

573 
	#_00243_
 "\033[48;5;243m"

	)

574 
	#_00244_
 "\033[48;5;244m"

	)

575 
	#_00245_
 "\033[48;5;245m"

	)

576 
	#_00246_
 "\033[48;5;246m"

	)

577 
	#_00247_
 "\033[48;5;247m"

	)

578 
	#_00248_
 "\033[48;5;248m"

	)

579 
	#_00249_
 "\033[48;5;249m"

	)

580 
	#_00250_
 "\033[48;5;250m"

	)

581 
	#_00251_
 "\033[48;5;251m"

	)

582 
	#_00252_
 "\033[48;5;252m"

	)

583 
	#_00253_
 "\033[48;5;253m"

	)

584 
	#_00254_
 "\033[48;5;254m"

	)

585 
	#_00255_
 "\033[48;5;255m"

	)

586 
	#_00256_
 "\033[48;5;256m"

	)

	@app.c

29 
	~<X11/xpm.h
>

31 
	~"funcs.h
"

32 
	~"≠p.h
"

33 
	~"ro£.h
"

34 
	~"myMa¸o.h
"

44 
Wödow


45 
	$√wAµ
 (*
¥og«me
, 
Di•œy
 *
dpy
, 
XrmD©aba£
 
db
, 
XC⁄ãxt
 
˘xt
,

46 
width
, 
height
, 
¨gc
, **
¨gv
)

48 
Aµ
 *
maöwödow
;

49 
ªsour˚«me
[256], *
tmp
;

50 
Wödow
 
wö
;

52 *
wö_«me
 = "Xtut15_MenuSystem";

53 *
ic⁄_«me
 = "Xtut15";

54 
XTextPr›îty
 
wöName
, 
ic⁄Name
;

56 
XSizeHöts
 *
size_höts
;

57 
XWMHöts
 *
wm_höts
;

58 
XCœssHöt
 *
˛ass_höts
;

60 
Pixm≠
 
ic⁄_pixm≠
;

62 
	`UNUSED
 (
height
);

63 
	`UNUSED
 (
width
);

65 
maöwödow
 = 
	`ˇŒoc
 ( (*mainwindow), 1);

66 i‡(!
maöwödow
) {

67 
	`Ârötf
 (
°dîr
, "U«bÀÅÿÆloˇã maö wödow\n"); 
	`exô
 (3);

69 
maöwödow
->
funcs
 = 
AµFuncs
;

72 
	`•rötf
 (
ªsour˚«me
, "%s.background", 
¥og«me
);

73 
maöwödow
->
background
 = 
	`gëCﬁ‹
 (
dpy
, 
db
, 
ªsour˚«me
,

74 
ªsour˚«me
, "DargGree");

76 
	`•rötf
 (
ªsour˚«me
, "%s.b‹dî", 
¥og«me
);

77 
maöwödow
->
b‹dî
 = 
	`gëCﬁ‹
 (
dpy
, 
db
, 
ªsour˚«me
,

78 
ªsour˚«me
, "LightGreen");

80 
	`•rötf
 (
ªsour˚«me
, "%s.width", 
¥og«me
);

81 
tmp
 = 
	`gëResour˚
 (
dpy
, 
db
, 
ªsour˚«me
,Ñesourcename, "400");

83 
maöwödow
->
width
 = 400;

84 
	`‰ì
 (
tmp
);

85 
	`•rötf
 (
ªsour˚«me
, "%s,height", 
¥og«me
);

86 
tmp
 = 
	`gëResour˚
 (
dpy
, 
db
, 
ªsour˚«me
,Ñesourcename, "400");

87 
maöwödow
->
height
 = 400;

88 
	`‰ì
 (
tmp
);

90 i‡(!(
size_höts
 = 
	`XAŒocSizeHöts
())) {

91 
	`Ârötf
 (
°dîr
, "%s: failedÅoállocate 'XAllocSizeHints'\n",

92 
¨gv
[0]); 
	`exô
 (31);

94 i‡(!(
wm_höts
 = 
	`XAŒocWMHöts
())) {

95 
	`Ârötf
 (
°dîr
, "%s: failedÅoállocate 'XAllocateWMHint'\n",

96 
¨gv
[0]); 
	`exô
 (31);

98 i‡(!(
˛ass_höts
 = 
	`XAŒocCœssHöt
())) {

99 
	`Ârötf
 (
°dîr
, "%s: failedÅoállocate 'XAllocateClassHint'\n",

100 
¨gv
[0]); 
	`exô
 (311);

103 
size_höts
->
Êags
 = 
PPosôi⁄
 | 
PSize
 | 
PMöSize
;

104 
size_höts
->
mö_width
 = 400;

105 
size_höts
->
mö_height
= 400;

106 
size_höts
->
max_width
 = 
	`Di•œyWidth
 (
dpy
, 
	`DeÁu…S¸ìn
 (dpy));

107 
size_höts
->
max_height

	`Di•œyHeight
 (
dpy
, 
	`DeÁu…S¸ìn
 (dpy));

113 
˛ass_höts
->
ªs_«me
 = 
¨gv
[0];

114 
˛ass_höts
->
ªs_˛ass
= "Project:Xtut15";

116 i‡(
	`XSåögLi°ToTextPr›îty
 (&
wö_«me
, 1, &
wöName
) == 0) {

117 
	`Ârötf
 (
°dîr
, "%s: structureállocation for winName failed\n",

118 
¨gv
[0]); 
	`exô
 (31);

120 i‡(
	`XSåögLi°ToTextPr›îty
 (&
ic⁄_«me
 , 1, &
ic⁄Name
) == 0) {

121 
	`Ârötf
 (
°dîr
,"%s: StructureállocationÅo iconName failed\n",

122 
¨gv
[0]); 
	`exô
 (31);

125 
wö
 = 
	`XCª©eSim∂eWödow
 (
dpy
,

126 
	`DeÁu…RoŸWödow
 (
dpy
),

128 
maöwödow
->
width
,

129 
maöwödow
->
height
,

131 
maöwödow
->
b‹dî
,

132 
maöwödow
->
background
);

134 
ic⁄_pixm≠
 = 
	`XCª©eBôm≠FromD©a
 (
dpy
,

135 
wö
,

136 
Píguö_bôs
,

137 
Píguö_width
,

138 
Píguö_height
);

139 
wm_höts
->
öôül_°©e
 = 
N‹mÆSèã
;

140 
wm_höts
->
öput
 = 
True
;

141 
wm_höts
->
ic⁄_pixm≠
 = icon_pixmap;

142 
wm_höts
->
Êags
 = 
SèãHöt
 | 
Ic⁄Pixm≠Höt
 | 
I≈utHöt
;

144 
	`XSñe˘I≈ut
 (
dpy
, 
wö
,

145 
Buâ⁄PªssMask
 |

146 
Buâ⁄Rñó£Mask
 |

147 
Såu˘uªNŸifyMask
 |

148 
ExposuªMask
);

150 
	`XSëWMPr›îtõs
 (
dpy
,

151 
wö
,

152 &
wöName
,

153 &
ic⁄Name
,

154 
¨gv
,

155 
¨gc
,

156 
size_höts
,

157 
wm_höts
,

158 
˛ass_höts
);

160 
Atom
 
wmDñëeMsg
 = 
	`XI¡înAtom
 (
dpy
, "WM_DELETE_WINDOW", 
FÆ£
);

161 
	`XSëWMPrŸocﬁs
 (
dpy
, 
wö
, &
wmDñëeMsg
, 1);

163 
Atom
 
wö_ic⁄
 = 
	`XI¡înAtom
 (
dpy
, "_NET_WM_ICON", 
FÆ£
);

164 
Atom
 
ˇrdöÆ
 = 
	`XI¡înAtom
 (
dpy
, "CARDINAL", 
FÆ£
);

166 
Àngth
 = 2 + 16 * 16 + 2 + 32 * 32;

167 
	`XCh™gePr›îty
 (
dpy
,

168 
wö
,

169 
wö_ic⁄
,

170 
ˇrdöÆ
, 32,

171 
Pr›ModeRïœ˚
,

172 (c⁄° *Ë
buf„r
, 
Àngth
);

174 
	`XSëWMIc⁄Name
 (
dpy
, 
wö
, &
ic⁄Name
);

175 
maöwödow
->
˘xt
 = ctxt;

176 
	`XSaveC⁄ãxt
 (
dpy
, 
wö
, 
˘xt
, (
XPoöãr
)
maöwödow
);

178 
	`Xutf8SëWMPr›îtõs
 (
dpy
, 
wö
, 
¥og«me
,Örog«me, 
¨gv
, 
¨gc
,

179 
NULL
, NULL, NULL);

180  
wö
;

181 
	}
}

191 
	$≠pC⁄figuªNŸify
 (
Block
 *
block
, 
XEvít
 *
ev
)

193 
Aµ
 *
£lf
 = &
block
->
≠p
;

194 
XC⁄figuªEvít
 *
x˚
 = &
ev
->
xc⁄figuª
;

195 
MíuB¨
 *
míub¨
;

197 i‡(
£lf
->
height
 !
x˚
->height) {

198 
£lf
->
height
 = 
x˚
->height;

200 i‡(
£lf
->
width
 =
x˚
->width) ;

201 
£lf
->
width
 = 
x˚
->width;

203 i‡(!
£lf
->
míub¨
) ;

204 i‡(
	`XFödC⁄ãxt
 (
x˚
->
di•œy
, 
£lf
->
míub¨
, sñf->
˘xt
,

205 (
XPoöãr
*)&
míub¨
))

207 
	`ªsizeBlock
 ((
Block
*)
míub¨
, 
£lf
->míub¨, sñf->
width
,

208 
£lf
->
míub¨Height
, 
ev
);

209 
	}
}

220 
Wödow


221 
	$£tAµMíuB¨
 (
Di•œy
 *
dpy
, 
XC⁄ãxt
 
˘xt
, 
Wödow
 
w
, Wödow 
míub¨
,

222 
width
, 
míub¨Height
)

224 
Aµ
 *
≠p
;

225 
Wödow
 
ﬁd
;

227 
	`XFödC⁄ãxt
 (
dpy
, 
w
, 
˘xt
, (
XPoöãr
 *)&
≠p
);

228 
ﬁd
 = 
≠p
->
míub¨
;

229 
≠p
->
míub¨
 = menubar;

230 
≠p
->
míub¨Height
 = menubarHeight;

231 
	`XResizeWödow
 (
dpy
, 
míub¨
, 
width
, 
míub¨Height
);

233  
ﬁd
;

234 
	}
}

244 
Wödow


245 
	$£tAµC⁄ãxtMíu
 (
Di•œy
 *
dpy
, 
XC⁄ãxt
 
˘xt
, 
Wödow
 
w
,

246 
Wödow
 
c⁄ãxtmíu
)

248 
Aµ
 *
≠p
;

249 
Wödow
 
ﬁd
;

251 
	`XFödC⁄ãxt
 (
dpy
, 
w
, 
˘xt
, (
XPoöãr
 *Ë&
≠p
);

253 
ﬁd
 = 
≠p
->
c⁄ãxtmíu
;

254 
≠p
->
c⁄ãxtmíu
 = contextmenu;

256  
ﬁd
;

257 
	}
}

267 
	$buâ⁄Pªss
 (
Block
 *
block
, 
XEvít
 *
ev
)

269 i‡(
ev
->
xbuâ⁄
.
buâ⁄
 =
Buâ⁄3
) {

270 
Aµ
 *
≠p
 = &
block
->app;

272 i‡(!
≠p
 || !≠p->
c⁄ãxtmíu
) ;

274 
	`põMíuM≠
 (
≠p
->
c⁄ãxtmíu
, 
ev
,áµ->
˘xt
);

275 
	`XUngøbPoöãr
 (
ev
->
xbuâ⁄
.
di•œy
,Év->xbuâ⁄.
time
);

277 
	}
}

287 
	$buâ⁄Rñó£
 (
Block
 *
block
, 
XEvít
 *
ev
)

289 i‡(
ev
->
xbuâ⁄
.
buâ⁄
 =
Buâ⁄3
) {

290 
Aµ
 *
≠p
 = &
block
->app;

292 i‡(!
≠p
 || !≠p->
c⁄ãxtmíu
) ;

294 
	`XUnm≠Wödow
 (
ev
->
x™y
.
di•œy
, 
≠p
->
c⁄ãxtmíu
);

296 
	}
}

298 
Funcs
 
	g_AµFuncs
 = {

299 
≠pC⁄figuªNŸify
,

300 
NULL
,

301 
NULL
,

302 
NULL
,

303 
buâ⁄Pªss
,

304 
buâ⁄Rñó£


306 
Funcs
 *
	gAµFuncs
 = &
_AµFuncs
;

	@app.h

18 #i‚de‡
_APP_H_


19 
	#_APP_H_


	)

21 
Aµ
 
	tAµ
;

22 
	sAµ
 {

23 
Funcs
 *
	mfuncs
;

24 
Wödow
 
	mmíub¨
;

25 
Wödow
 
	mc⁄ãxtmíu
;

26 
XC⁄ãxt
 
	m˘xt
;

27 
	mmíub¨Height
, 
	mwidth
, 
	mheight
;

28 
	mb‹dî
, 
	mbackground
, 
	mf‹eground
;

31 
Funcs
 *
AµFuncs
;

33 
Wödow
 
√wAµ
 (*
¥og«me
, 
Di•œy
 *
dpy
, 
XrmD©aba£
 
db
, 
XC⁄ãxt
 
˘xt
,

34 
width
, 
height
, 
¨gc
, **
¨gv
);

36 
Wödow
 
£tAµMíuB¨
 (
Di•œy
 *
dpy
, 
XC⁄ãxt
 
˘xt
, Wödow 
w
, Wödow 
míub¨
,

37 
width
, 
míub¨Height
);

39 
Wödow
 
£tAµC⁄ãxtMíu
 (
Di•œy
 *
dpy
, 
XC⁄ãxt
 
˘xt
, Wödow 
w
,

40 
Wödow
 
c⁄ãxtmíu
);

	@appOption.c

18 
	~"funcs.h
"

19 
	~"buâ⁄.h
"

20 
	~"myMa¸o.h
"

29 
	$X√wBuâ⁄
 (*
cbd©a
, 
XEvít
 *
ev
)

31 
	`UNUSED
 (
cbd©a
);

32 
	`UNUSED
 (
ev
);

33 
	`¥ötf
 ("YouÖressed 'New'->Filemenu' button\n");

34 
	}
}

43 
	$O≥nBuâ⁄
 (*
cbd©a
, 
XEvít
 *
ev
)

45 
	`UNUSED
 (
cbd©a
);

46 
	`UNUSED
 (
ev
);

47 
	`¥ötf
 ("YouÖressed 'Open'->Filemenu' button\n");

48 
	}
}

57 
	$msgSaveBuâ⁄
 (*
cbd©a
, 
XEvít
 *
ev
)

59 
	`UNUSED
 (
cbd©a
);

60 
	`UNUSED
 (
ev
);

61 
	`¥ötf
 ("YouÖressed 'Save'->Filemenu' button\n");

62 
	}
}

71 
	$msgSaveAsBuâ⁄
 (*
cbd©a
, 
XEvít
 *
ev
)

73 
	`UNUSED
 (
cbd©a
);

74 
	`UNUSED
 (
ev
);

75 
	`¥ötf
 ("YouÖressed 'Save As'->Filemenu' button\n");

76 
	}
}

85 
	$Exp‹tBuâ⁄
 (*
cbd©a
, 
XEvít
 *
ev
)

87 
	`UNUSED
 (
cbd©a
);

88 
	`UNUSED
 (
ev
);

89 
	`¥ötf
 ("YouÖressed 'Export'->Filemenu' button\n");

90 
	}
}

99 
	$Imp‹tBuâ⁄
 (*
cbd©a
, 
XEvít
 *
ev
)

101 
	`UNUSED
 (
cbd©a
);

102 
	`UNUSED
 (
ev
);

103 
	`¥ötf
 ("YouÖressed 'Import'->Filemenu' button\n");

104 
	}
}

	@appOption.h

18 #i‚de‡
_APPOPTION_H_


19 
	#_APPOPTION_H_


	)

21 
X√wBuâ⁄
 (*
cbd©a
, 
XEvít
 *
ev
);

22 
O≥nBuâ⁄
 (*
cbd©a
, 
XEvít
 *
ev
);

23 
msgSaveBuâ⁄
 (*
cbd©a
, 
XEvít
 *
ev
);

24 
msgSaveAsBuâ⁄
 (*
cbd©a
, 
XEvít
 *
ev
);

25 
Exp‹tBuâ⁄
 (*
cbd©a
, 
XEvít
 *
ev
);

26 
Imp‹tBuâ⁄
 (*
cbd©a
, 
XEvít
 *
ev
);

	@button.c

18 
	~"funcs.h
"

19 
	~"buâ⁄.h
"

20 
	~"gødõ¡.h
"

21 
	~"myMa¸o.h
"

30 
Wödow


31 
	$√wXBuâ⁄
 (
Buâ⁄
 *
buâ⁄
, *
¥og«me
, 
Di•œy
 *
dpy
, 
Wödow
 
∑ª¡
,

32 
XrmD©aba£
 
db
, 
XC⁄ãxt
 
˘xt
, *
«me
, 
x
, 
y
,

33 
width
, 
height
)

35 
Wödow
 
wö
;

36 
ªsour˚«me
 [256]={""};

37 
˛as¢ame
 [256]={""};

38 *
ãxt
;

39 
Àn
;

41 #ifde‡
_DEBUG_


42 
	`DEBUG_INFO_MSG
("CallingÇewXButton");

45 
	`•rötf
 (
ªsour˚«me
, "%s.%s", 
¥og«me
, 
«me
);

46 
	`•rötf
 (
˛as¢ame
, "%s,%s", 
¥og«me
, 
«me
);

47 
ãxt
 = 
	`gëResour˚
 (
dpy
, 
db
, 
ªsour˚«me
, 
˛as¢ame
, 
«me
);

49 
	`•rötf
 (
ªsour˚«me
, "%s.%s.f⁄t", 
¥og«me
, 
«me
);

50 
	`•rötf
 (
˛as¢ame
, "%s.f⁄t", 
¥og«me
);

51 
buâ⁄
->
f⁄t
 = 
	`gëF⁄t
 (
dpy
, 
db
, 
ªsour˚«me
, 
˛as¢ame
, "lucidasans-12");

52 
buâ⁄
->
f⁄t_as˚¡
 = buâ⁄->
f⁄t
->
as˚¡
;

54 
Àn
 = 
	`°æí
 (
ãxt
);

55 
buâ⁄
->
ãxt
 = 
	`mÆloc
 ( (*buâ⁄->ãxt)*(
Àn
+1));

56 i‡(!
buâ⁄
->
ãxt
)

58 
	`Ârötf
 (
°dîr
, "Can't displayÅext: %ld\n",

59 ( (*
buâ⁄
->
ãxt
)*(
Àn
+1)));

60 
Àn
 = 0; 
	`exô
 (33);

62 
Àn
 = 
	`utf8toXCh¨2b
 (
buâ⁄
->
ãxt
,Üen,Åext,Üen);

63 
buâ⁄
->
ãxt_width
 = 
	`XTextWidth16
 (buâ⁄->
f⁄t
, buâ⁄->
ãxt
, 
Àn
);

66 
	`•rötf
 (
ªsour˚«me
, "%s.%s.f‹eground", 
¥og«me
, 
«me
);

67 
	`•rötf
 (
˛as¢ame
, "%s.f‹eground", 
¥og«me
);

68 
buâ⁄
->
f‹eground
 = 
	`gëCﬁ‹
 (
dpy
, 
db
, 
ªsour˚«me
, 
˛as¢ame
, "blue");

70 
	`•rötf
 (
ªsour˚«me
, "%s.%s.b‹dî", 
¥og«me
, 
«me
);

71 
	`•rötf
 (
˛as¢ame
, "%s.b‹dî", 
¥og«me
);

72 
buâ⁄
->
b‹dî
 = 
	`gëCﬁ‹
 (
dpy
, 
db
, 
ªsour˚«me
, 
˛as¢ame
, "lightblue");

74 i‡(
width
 < 
buâ⁄
->
ãxt_width
 + 2*buâ⁄->
f⁄t
->
as˚¡
) {

75 
width
 = 
buâ⁄
->
ãxt_width
 + 2*buâ⁄->
f⁄t
->
as˚¡
;

77 
buâ⁄
->
width
 = width;

79 i‡(
height
 < 2*
buâ⁄
->
f⁄t
->
as˚¡
) {

80 
height
 = 2*
buâ⁄
->
f⁄t_as˚¡
;

82 
buâ⁄
->
height
 = height;

84 i‡(
buâ⁄
->
height
 <= 0) {

85 
	`Ârötf
 (
°dîr
, "F⁄àAs˚¡*2 = %d\n",
buâ⁄
->
height
);

88 
	`•rötf
 (
ªsour˚«me
, "%s.%s.background", 
¥og«me
, 
«me
);

89 
	`•rötf
 (
˛as¢ame
, "%s.background", 
¥og«me
);

90 
buâ⁄
->
background
 = 
	`gëResour˚
 (
dpy
, 
db
, 
ªsour˚«me
, 
˛as¢ame
,

93 
wö
 = 
	`XCª©eSim∂eWödow
 (
dpy
,

94 
∑ª¡
,

95 
x
, 
y
,

96 
width
, 
height
,

98 
buâ⁄
->
b‹dî
,

100 i‡(!
wö
)

102 
	`Ârötf
 (
°dîr
, "U«bÀÅÿ¸óã wödow\n"); 
	`exô
 (31);

104 
buâ⁄
->
bgpix
 = 0;

106 
	`XSñe˘I≈ut
 (
dpy
, 
wö
,

107 
Buâ⁄PªssMask
 |

108 
Buâ⁄Rñó£Mask
 |

109 
Såu˘uªNŸifyMask
 |

110 
ExposuªMask
 |

111 
LóveWödowMask
 |

112 
E¡îWödowMask
);

114 
	`XSaveC⁄ãxt
 (
dpy
, 
wö
, 
˘xt
, (
XPoöãr
)
buâ⁄
);

115 
	`XM≠Wödow
 (
dpy
, 
wö
);

117 #ifde‡
_DEBUG_


118 
	`DEBUG_INFO_MSG
("Exiting...");

121  
wö
;

122 
	}
}

130 
Wödow


131 
	$√wBuâ⁄
 (*
¥og«me
, 
Di•œy
 *
dpy
, 
Wödow
 
∑ª¡
, 
XrmD©aba£
 
db
,

132 
XC⁄ãxt
 
˘xt
, *
«me
, 
x
, 
y
, 
width
, 
height
,

133 
˚¡î
, 
CÆlback
 
ˇŒback
, *
cbd©a
)

135 { 
Buâ⁄
 *
buâ⁄
;

137 #ifde‡
_DEBUG_


138 
	`DEBUG_INFO_MSG
("Calling... ");

141 
buâ⁄
 = 
	`ˇŒoc
 ( (*button), 1);

142 i‡(!
buâ⁄
) {

143 
	`Ârötf
 (
°dîr
, "U«bÀÅÿÆloˇã mem‹y\n"); 
	`exô
 (32);

145 
buâ⁄
->
funcs
 = 
Buâ⁄Funcs
;

146 
buâ⁄
->
˚¡î
 = center;

147 
buâ⁄
->
buâ⁄Rñó£
 = 
ˇŒback
;

148 
buâ⁄
->
cbd©a
 = cbdata;

150 #ifde‡
_DEBUG_


151 
	`DEBUG_INFO_MSG
("Exiting...");

154  
	`√wXBuâ⁄
 (
buâ⁄
, 
¥og«me
, 
dpy
, 
∑ª¡
, 
db
, 
˘xt
, 
«me
, 
x
, 
y
,

155 
width
, 
height
);

156 
	}
}

165 
	$buâ⁄Redøw
 (
Buâ⁄
 *
buâ⁄
, 
XEvít
 *
ev
)

167 
x
, 
y
, 
Àn
;

168 
XGCVÆues
 
xgcv
;

170 #ifde‡
_DEBUG_


171 
	`DEBUG_INFO_MSG
("Calling...");

173 
xgcv
.
löe_width
 = 1;

174 
xgcv
.
löe_°yÀ
 = 
LöeSﬁid
;

175 
xgcv
.
f‹eground
 = 
buâ⁄
->foreground;

176 
xgcv
.
f⁄t
 = 
buâ⁄
->f⁄t->
fid
;

178 
	`XCh™geGC
 (
ev
->
x™y
.
di•œy
,

179 
	`DefGC
 (
ev
->
x™y
.
di•œy
),

180 
GCF‹eground
 |

181 
GCLöeWidth
 |

182 
GCLöeStyÀ
 |

183 
GCF⁄t
,

184 &
xgcv
);

186 i‡(
buâ⁄
->
ãxt
) {

187 
Àn
 = 
	`XCh¨2bLí
 (
buâ⁄
->
ãxt
);

189 
x
 = 
buâ⁄
->
˚¡î
 * ((buâ⁄->
width
-buâ⁄->
ãxt_width
)/2);

190 
y
 = (
buâ⁄
->
height
 + buâ⁄->
f⁄t_as˚¡
)/2;

191 
	`XDøwSåög16
 (
ev
->
x™y
.
di•œy
,

192 
ev
->
x™y
.
wödow
,

193 
	`DefGC
(
ev
->
x™y
.
di•œy
),

194 
x
, 
y
,

195 
buâ⁄
->
ãxt
,

196 
Àn
);

198 
	`XDøwLöe
 (
ev
->
x™y
.
di•œy
,

199 
ev
->
x™y
.
wödow
,

200 
	`DefGC
 (
ev
->
x™y
.
di•œy
),

202 
buâ⁄
->
width
,

203 
buâ⁄
->
height
);

205 
	`XDøwLöe
 (
ev
->
x™y
.
di•œy
,

206 
ev
->
x™y
.
wödow
,

207 
	`DefGC
(
ev
->
x™y
.
di•œy
),

208 
buâ⁄
->
width
,

210 
buâ⁄
->
height
);

213 #ifde‡
_DEBUG_


214 
	`DEBUG_INFO_MSG
("Exiting...");

216 
	}
}

225 
	$buâ⁄Expo£
 (
Block
 *
blk
, 
XEvít
 *
ev
)

228 #ifde‡
_DEBUG_


229 
	`DEBUG_INFO_MSG
("Calling...");

232 i‡(
ev
->
xexpo£
.
cou¡
 > 0) ;

234 i‡(!
blk
->
buâ⁄
.
bgpix
) {

235 
blk
->
buâ⁄
.
bgpix
 = 
	`gëGødPixm≠
 (
ev
->
x™y
.
di•œy
,

237 
blk
->
buâ⁄
.
height
,

238 
blk
->
buâ⁄
.
background
);

239 
	`XSëWödowBackgroundPixm≠
 (
ev
->
x™y
.
di•œy
,

240 
ev
->
x™y
.
wödow
,

241 
blk
->
buâ⁄
.
bgpix
);

242 
	`XCÀ¨Aªa
 (
ev
->
x™y
.
di•œy
,

243 
ev
->
x™y
.
wödow
,

245 
blk
->
buâ⁄
.
width
,

246 
blk
->
buâ⁄
.
height
,

247 
True
);

251 #ifde‡
_DEBUG_


252 
	`DEBUG_INFO_MSG
("Exiting...");

255 
	`buâ⁄Redøw
 (&
blk
->
buâ⁄
, 
ev
);

256 
	}
}

265 
	$buâ⁄C⁄figuªNŸify
 (
Block
 *
b
, 
XEvít
 *
ev
)

267 
Buâ⁄
 *
bä
 = &
b
->
buâ⁄
;

269 #ifde‡
_DEBUG_


270 
	`DEBUG_INFO_MSG
("Calling...");

273 i‡(!
bä
) ;

275 i‡(
bä
->
width
 !
ev
->
xc⁄figuª
.width ||

276 
bä
->
height
 !
ev
->
xc⁄figuª
.height) {

277 i‡(
bä
->
height
 !
ev
->
xc⁄figuª
.height) {

278 i‡(
bä
->
bgpix
) {

279 
	`‰ìPixm≠
 (
ev
->
x™y
.
di•œy
,

280 
bä
->
width
,

281 
bä
->
height
,

282 
bä
->
background
);

284 
bä
->
height
 = 
ev
->
xc⁄figuª
.height;

285 
bä
->
bgpix
 = 
	`gëGødPixm≠
 (
ev
->
x™y
.
di•œy
,

287 
bä
->
height
,

288 
bä
->
background
);

289 
	`XSëWödowBackgroundPixm≠
 (
ev
->
x™y
.
di•œy
,

290 
ev
->
x™y
.
wödow
,

291 
bä
->
bgpix
);

293 
bä
->
width
 = 
ev
->
xc⁄figuª
.width;

294 
	`XCÀ¨Wödow
 (
ev
->
x™y
.
di•œy
,Év->x™y.
wödow
);

296 
	`buâ⁄Redøw
 (
bä
, 
ev
);

299 #ifde‡
_DEBUG_


300 
	`DEBUG_INFO_MSG
("Exiting...");

302 
	}
}

310 
	$buâ⁄E¡î
 (
Block
 *
b
, 
XEvít
 *
ev
)

312 
Buâ⁄
 *
bä
 = &
b
->
buâ⁄
;

314 
XSëWödowAâribuãs
 
©å
;

315 
GC
 
gc
 = 
	`DefGC
(
ev
->
x™y
.
di•œy
);

317 #ifde‡
_DEBUG_


318 
	`DEBUG_INFO_MSG
("Calling...");

320 i‡(!
bä
) ;

322 
©å
.
background_pixñ
 = 
bä
->
b‹dî
;

323 
©å
.
b‹dî_pixm≠
 = 
bä
->
bgpix
;

325 
	`XCh™geWödowAâribuãs
 (
ev
->
x™y
.
di•œy
,

326 
ev
->
x™y
.
wödow
,

327 
CWBackPixñ
 |

328 
CWB‹dîPixñ
,

329 &
©å
);

330 
	`XSëF‹eground
 (
ev
->
x™y
.
di•œy
, 
gc
, 
bä
->
b‹dî
);

331 
	`XFûlRe˘™gÀ
 (
ev
->
x™y
.
di•œy
,

332 
ev
->
x™y
.
wödow
,

333 
gc
,

335 
bä
->
width
,

336 
bä
->
height
);

337 
	`buâ⁄Redøw
 (
bä
, 
ev
);

339 #ifde‡
_DEBUG_


340 
	`DEBUG_INFO_MSG
("Exiting...");

342 
	}
}

350 
	$buâ⁄Lóve
 (
Block
 *
b
, 
XEvít
 *
ev
)

352 
Buâ⁄
 *
bä
 = &
b
->
buâ⁄
;

353 #ifde‡
_DEBUG_


354 
	`DEBUG_INFO_MSG
("Calling...");

357 
XSëWödowAâribuãs
 
©å
;

359 i‡(!
bä
) ;

361 
©å
.
background_pixm≠
 = 
bä
->
bgpix
;

362 
©å
.
background_pixñ
 = 
N⁄e
;

363 
©å
.
b‹dî_pixñ
 = 
bä
->
b‹dî
;

364 
©å
.
b‹dî_pixm≠
 = 
N⁄e
;

366 
	`XCh™geWödowAâribuãs
 (
ev
->
x™y
.
di•œy
,

367 
ev
->
x™y
.
wödow
,

368 
CWBackPixm≠
 |

369 
CWB‹dîPixñ
,

370 &
©å
);

371 
	`XCÀ¨Aªa
 (
ev
->
x™y
.
di•œy
,

372 
ev
->
x™y
.
wödow
,

374 
bä
->
width
,

375 
bä
->
height
,

376 
True
);

378 #ifde‡
_DEBUG_


379 
	`DEBUG_INFO_MSG
("Exiting...");

381 
	}
}

389 
Wödow


390 
	$√wMíuB¨Buâ⁄
 (*
¥og«me
, 
Di•œy
 *
dpy
, 
Wödow
 
∑ª¡
,

391 
XrmD©aba£
 
db
, 
XC⁄ãxt
 
˘xt
, *
«me
, 
x
,

392 
y
, 
width
, 
height
, 
Wödow
 
míu
)

394 
Block
 *
bä
;

396 #ifde‡
_DEBUG_


397 
	`DEBUG_INFO_MSG
("Calling...");

400 
bä
 = 
	`ˇŒoc
 ( (*btn), 1);

401 i‡(!
bä
) {

402 
	`Ârötf
 (
°dîr
, "U«bÀÅÿÆloˇã mem‹y\n"); 
	`exô
 (32);

404 
bä
->
funcs
 = 
MíuB¨Buâ⁄Funcs
;

405 
bä
->
míub¨buâ⁄
.
˘xt
 = ctxt;

406 
bä
->
míub¨buâ⁄
.
míu
 = menu;

408 #ifde‡
_DEBUG_


409 
	`DEBUG_INFO_MSG
("Exiting...");

412  
	`√wXBuâ⁄
 (&
bä
->
buâ⁄
,

413 
¥og«me
,

414 
dpy
,

415 
∑ª¡
,

416 
db
,

417 
˘xt
,

418 
«me
,

419 
x
, 
y
,

420 
width
, 
height
);

421 
	}
}

430 
	$buâ⁄Rñó£
 (
Block
 *
b
, 
XEvít
 *
ev
)

432 
Buâ⁄
 *
bä
 = &
b
->
buâ⁄
;

434 #ifde‡
_DEBUG_


435 
	`DEBUG_INFO_MSG
("Calling...");

438 i‡(
bä
 && bä->
buâ⁄Rñó£
)

439 
bä
->
	`buâ⁄Rñó£
 (bä->
cbd©a
, 
ev
);

441 #ifde‡
_DEBUG_


442 
	`DEBUG_INFO_MSG
("Exiting...");

444 
	}
}

452 
	$míuB¨Buâ⁄Pªss
 (
Block
 *
b
, 
XEvít
 *
ev
)

454 
MíuB¨Buâ⁄
 *
mbb
 = &
b
->
míub¨buâ⁄
;

455 
x
, 
y
;

457 #ifde‡
_DEBUG_


458 
	`DEBUG_INFO_MSG
("Calling...");

461 
x
 = 
ev
->
xbuâ⁄
.
x_roŸ
 -Év->xbutton.x;

462 
y
 = 
ev
->
xbuâ⁄
.
y_roŸ
 -Év->xbutton.y + 20;

463 
	`XMoveWödow
 (
ev
->
xbuâ⁄
.
di•œy
, 
mbb
->
míu
, 
x
, 
y
);

464 
	`XM≠Wödow
 (
ev
->
xbuâ⁄
.
di•œy
, 
mbb
->
míu
);

465 
	`XUngøbPoöãr
 (
ev
->
xbuâ⁄
.
di•œy
,Év->xbuâ⁄.
time
);

467 #ifde‡
_DEBUG_


468 
	`DEBUG_INFO_MSG
("Exiting...");

470 
	}
}

479 
	$míuB¨Buâ⁄Rñó£
 (
Block
 *
b
, 
XEvít
 *
ev
)

481 
MíuB¨Buâ⁄
 *
mbb
 = &
b
->
míub¨buâ⁄
;

483 #ifde‡
_DEBUG_


484 
	`DEBUG_INFO_MSG
("Calling...");

486 
	`XUnm≠Wödow
 (
ev
->
xbuâ⁄
.
di•œy
, 
mbb
->
míu
);

488 #ifde‡
_DEBUG_


489 
	`DEBUG_INFO_MSG
("Exiting...");

491 
	}
}

492 
Funcs
 
	g_Buâ⁄Funcs
 = {

493 
buâ⁄C⁄figuªNŸify
,

494 
buâ⁄Lóve
,

495 
buâ⁄E¡î
,

496 
buâ⁄Expo£
,

497 
NULL
,

498 
buâ⁄Rñó£


500 
Funcs
 *
	gBuâ⁄Funcs
 = &
_Buâ⁄Funcs
;

502 
Funcs
 
	g_MíuB¨Buâ⁄Funcs
 = {

503 
buâ⁄C⁄figuªNŸify
,

504 
buâ⁄Lóve
,

505 
buâ⁄E¡î
,

506 
buâ⁄Expo£
,

507 
míuB¨Buâ⁄Pªss
,

508 
míuB¨Buâ⁄Rñó£


510 
Funcs
 *
	gMíuB¨Buâ⁄Funcs
 = &
_MíuB¨Buâ⁄Funcs
;

	@button.h

18 #i‚de‡
_BUTTON_H_


19 
	#_BUTTON_H_


	)

21 (*
	tCÆlback
Ë(*
	tcbd©a
, 
	tXEvít
 *
	tev
);

23 
Buâ⁄
 
	tBuâ⁄
;

24 
	sBuâ⁄
 {

25 
Funcs
 *
funcs
;

26 
XCh¨2b
 *
ãxt
;

27 
ãxt_width
;

28 
f⁄t_as˚¡
;

29 
XF⁄tSåu˘
 *
f⁄t
;

30 
width
, 
height
, 
˚¡î
;

31 
b‹dî
, 
f‹eground
;

32 *
background
;

33 
Pixm≠
 
bgpix
;

34 *
cbd©a
;

35 
CÆlback
 
buâ⁄Rñó£
;

38 
MíuB¨Buâ⁄
 
	tMíuB¨Buâ⁄
;

39 
	sMíuB¨Buâ⁄
 {

40 
Funcs
 *
funcs
;

41 
XCh¨2b
 *
ãxt
;

42 
ãxt_width
, 
f⁄t_as˚¡
, 
width
, 
height
, 
˚¡î
;

43 
XF⁄tSåu˘
 *
f⁄t
;

44 
b‹dî
, 
f‹eground
;

45 *
background
;

46 
Pixm≠
 
bgpix
;

47 
Wödow
 
míu
;

48 
XC⁄ãxt
 
˘xt
;

51 
Funcs
 *
MíuB¨Buâ⁄Funcs
;

52 
Funcs
 *
Buâ⁄Funcs
;

54 
Wödow
 
	`√wBuâ⁄
 (*
¥og«me
, 
Di•œy
 *
dpy
, Wödow 
w
, 
XrmD©aba£
 
db
,

55 
XC⁄ãxt
 
˘xt
, *
«me
, 
x
, 
y
, 
width
,

56 
height
, 
˚¡î
, 
CÆlback
 
ˇŒback
, *
cbd©a
);

58 
Wödow
 
	`√wMíuB¨Buâ⁄
 (*
¥og«me
, 
Di•œy
 *
dpy
, Wödow 
∑ª¡
,

59 
XrmD©aba£
 
db
, 
XC⁄ãxt
 
˘xt
, *
«me
,

60 
x
, 
y
, 
width
, 
height
, 
Wödow
 
míu
);

	@common.cpp

21 
	~"comm⁄.hµ
"

24 
XrmD©aba£
 
	gcomm⁄
::
	$£tupDB
 (
Di•œy
* 
dpy
, 
XrmO±i⁄DescRec
 *
xrmTabÀ
,

25 
nComm™dLöeResour˚
, c⁄° *
¥og«me
,

26 *
¨gc
, **
¨gv
)

28 
XrmD©aba£
 
db
;

29 
°d
::
°rög
 
fûíame
;

32 
	`XrmInôüli£
 ();

33 
db
 = 
	`XrmGëD©aba£
 (
dpy
);

35 
	`XrmP¨£Comm™d
 (&
db
, 
xrmTabÀ
, 
nComm™dLöeResour˚s
, 
¥og«me
,

36 
¨gc
, 
¨gv
);

37 
	`•rötf
 (
fûíame
.
	`≠≥nd
(), "%.240s.ªsour˚s", 
¥og«me
);

38 i‡(
	`XrmComböeFûeD©aba£
 (
fûíame
.
	`c_°r
(), &
db
, 
FÆ£
)) {

39 
°d
::
cout
 << "Ródög sëtög from fûê"<< 
fûíame
.
	`c_°r
() <<

40 
°d
::
ídl
;

42 
°d
::
cout
 << "FûêNOT found "<< 
fûíame
.
	`c_°r
() << " forÑeading" <<

43 
°d
::
ídl
;

45  
db
;

46 
	}
}

48 
°rög
 
	gcomm⁄
::
	$gëResour˚
 (
XrmD©aba£
 
db
,c⁄° 
°d
::
°rög
 
«me
,

49 c⁄° 
°d
::
°rög
 
tmp
, *
def
)

52 
	}
}

	@common.h

18 #i‚de‡
_COMMON_H_


19 
	#_COMMON_H_


	)

21 
	~<X11/Xlib.h
>

22 
	~<X11/Xutû.h
>

23 
	~<X11/Xªsour˚.h
>

24 
	~<X11/X©om.h
>

25 
	~<X11/xpm.h
>

26 
	~<X11/Xos.h
>

28 
	~<°dio.h
>

29 
	~<°dlib.h
>

30 
	~<°rög.h
>

32 
	~<sys/ut¢ame.h
>

33 
	~<sys/°©.h
>

35 
	#DefGC
(
dpy
Ë
	`DeÁu…GC
(dpy, 
	`DeÁu…S¸ìn
(dpy))

	)

36 
	#NUM_FONTS
 30

	)

37 
	#MAX_IMAGES
 100

	)

39 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wunused-variable"

40 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Warray-bounds"

41 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wreturn-local-addr"

42 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wstringop-overflow="

43 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wpointer-sign"

46 
F⁄t
 
	mf
;

47 *
	m«me
;

48 } 
	tF⁄tCache
;

50 
	sImage
 {

51 
	mu£d
;

52 
XpmAâribuãs
 
	mxAâ
;

53 
Pixm≠
 
	mpixm≠
;

54 
Pixm≠
 
	m˛ùmask
;

55 
Pixm≠
 
	mßved
;

56 
	mx
, 
	my
;

57 } 
	gImages
[
MAX_IMAGES
];

60 
di•œy_sysöfo
 (
Di•œy
 *
dpy
, 
Wödow
 
wö
, 
s˙_num
, 
GC
 
gc
,

61 
wö_width
, 
wö_height
);

64 
Boﬁ
 
lﬂdF⁄t
 (*
f⁄äame
, 
F⁄tCache
 
‚t
[], 
Di•œy
 *
dpy
, 
GC
 
gc
, 
cf
);

67 
LﬂdImage
 (*
‚ame
, 
Di•œy
 *
dpy
, 
Wödow
 
wö
, 
s¸n
);

70 *
FödXPMFûe
 (*
‚ame
);

72 
XrmD©aba£
 
£tupDB
 (
Di•œy
 *
dpy
, 
XrmO±i⁄DescRec
 *
xrmTabÀ
,

73 
nComm™dLöeResour˚s
, c⁄° *
¥og«me
,

74 *
¨gc
, **
¨gv
);

76 *
gëResour˚
 (
Di•œy
 *
dpy
, 
XrmD©aba£
 
db
, *
«me
,

77 *
˛
, *
def
);

79 
gëCﬁ‹
 (
Di•œy
 *
dpy
, 
XrmD©aba£
 
db
, *
«me
,

80 *
˛
, *
def
);

82 
XF⁄tSåu˘
 *
gëF⁄t
 (
Di•œy
 *
dpy
, 
XrmD©aba£
 
db
, *
«me
,

83 *
˛
, *
def
);

85 
XCh¨2bLí
 (
XCh¨2b
 *
°r
);

87 
utf8toXCh¨2b
 (
XCh¨2b
 *
ouΩut_r
, 
outsize
,

88 c⁄° *
öput
, 
öÀn
);

90 
Block
 
	tBlock
;

92 
ªsizeBlock
 (
Block
 *
block
, 
Wödow
 
wö
, 
width
,

93 
height
, 
XEvít
 *
ev
);

95 *
gë_v¨
 (*
p
);

	@common.hpp

18 #i‚de‡
_COMMON_HPP_


19 
	#_COMMON_HPP_


	)

23 
	~<X11/Xlib.h
>

24 
	~<X11/Xutû.h
>

25 
	~<X11/Xªsour˚.h
>

26 
	~<X11/X©om.h
>

27 
	~<X11/xpm.h
>

28 
	~<X11/Xos.h
>

29 
	~<sys/ut¢ame.h
>

30 
	~<sys/°©.h
>

32 
	~<c°dio
>

33 
	~<c°dlib
>

34 
	~<°rög
>

37 
	#DefGC
(
dpy
Ë
	`DeÁu…GC
(dpy, 
	`DeÁu…S¸ìn
(dpy))

	)

38 
	#NUM_FONTS
 30

	)

39 
	#MAX_IMAGES
 100

	)

41 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wunused-variable"

42 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Warray-bounds"

43 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wreturn-local-addr"

44 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wstringop-overflow="

45 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wpointer-sign"

47 
«me•a˚
 
	gxlib


49 
«me•a˚
 
	g¥iv


51 ˛as†
	ccomm⁄


53 
	gpublic
:

59 
F⁄t
 
fs
;

60 *
	g«me
;

61 } 
	tF⁄tCache
;

63 
	sImage
 {

64 
	gu£d
;

65 
XpmAâribuãs
 
	gxAâ
;

66 
Pixm≠
 
	gpixm≠
;

67 
Pixm≠
 
	g˛ùmask
;

68 
Pixm≠
 
	gßved
;

69 
	gx
, 
	gy
;

70 } 
	gImages
[
MAX_IMAGES
];

72 
Block
 
	tBlock
;

78 
XrmD©aba£
 
£tupDB
 (
Di•œy
 *
dpy
, 
XrmO±i⁄DescRec
 *
xrmTabÀ
,

79 
nComm™dLöeResour˚s
, c⁄° *
¥og«me
,

80 *
¨gc
, **
¨gv
);

86 *
gëResour˚
 (
Di•œy
 *
dpy
, 
XrmD©aba£
 
db
, *
«me
,

87 *
˛
, *
def
);

92 
gëCﬁ‹
 (
Di•œy
 *
dpy
, 
XrmD©aba£
 
db
, *
«me
,

93 *
˛
, *
def
);

98 
XF⁄tSåu˘
 *
gëF⁄t
 (
Di•œy
 *
dpy
, 
XrmD©aba£
 
db
, *
«me
,

99 *
˛
, *
def
);

104 
XCh¨2bLí
 (
XCh¨2b
 *
°r
);

109 
utf8toXCh¨2b
 (
XCh¨2b
 *
ouΩut_r
, 
outsize
,

110 c⁄° *
öput
, 
öÀn
);

115 
ªsizeBlock
 (
Block
 *
block
, 
Wödow
 
wö
, 
width
,

116 
height
, 
XEvít
 *
ev
);

120 *
gë_v¨
 (*
p
);

	@funcs.h

18 #i‚de‡
_FUNCS_H_


19 
	#_FUNCS_H_


	)

21 
	~<X11/Xlib.h
>

22 
	~"comm⁄.h
"

23 
	~"≠p.h
"

24 
	~"míub¨.h
"

25 
	~"míu.h
"

26 
	~"buâ⁄.h
"

28 (*
	tEvCÆlback
Ë(
	tBlock
 *, 
	tXEvít
 *);

30 
Funcs
 
	tFuncs
;

32 
	sFuncs
 {

33 
EvCÆlback
 
c⁄figuªNŸify
;

34 
EvCÆlback
 
ÀaveNŸify
;

35 
EvCÆlback
 
íãrNŸify
;

36 
EvCÆlback
 
expo£
;

37 
EvCÆlback
 
buâ⁄Pªss
;

38 
EvCÆlback
 
buâ⁄Rñó£
;

41 
	uBlock
 {

42 
Funcs
 *
funcs
;

43 
Aµ
 
≠p
;

44 
MíuB¨
 
míub¨
;

45 
Míu
 
míu
;

46 
Buâ⁄
 
buâ⁄
;

47 
MíuB¨Buâ⁄
 
míub¨buâ⁄
;

	@getResources.c

18 
	~"comm⁄.h
"

19 
	~"myMa¸o.h
"

23 
F⁄tTabÀ
 
	tF⁄tTabÀ
;

24 
	sF⁄tTabÀ
 {

25 
	m¬ames
, 
	mmax_«mes
;

26 **
	m«mes
;

27 
XF⁄tSåu˘
 **
	mf⁄ts
;

30 
Cﬁ‹TabÀ
 
	tCﬁ‹TabÀ
;

31 
	sCﬁ‹TabÀ
 {

32 
	m¬ames
, 
	mmax_«mes
;

33 **
	m«mes
;

34 *
	mcﬁ‹s
;

47 
XrmD©aba£


48 
	$£tupDB
 (
Di•œy
 *
dpy
, 
XrmO±i⁄DescRec
 *
xrmTabÀ
,

49 
nComm™dLöeResour˚s
, c⁄° *
¥og«me
,

50 *
¨gc
, **
¨gv
)

52 
XrmD©aba£
 
db
;

53 
fûíame
[256];

55 
	`XrmInôülize
 ();

56 
db
 = 
	`XrmGëD©aba£
 (
dpy
);

58 
	`XrmP¨£Comm™d
 (&
db
, 
xrmTabÀ
, 
nComm™dLöeResour˚s
,

59 
¥og«me
, 
¨gc
, 
¨gv
);

61 
	`•rötf
 (
fûíame
,"%.240s.ªsour˚s", 
¥og«me
);

63 i‡(
	`XrmComböeFûeD©aba£
 (
fûíame
, &
db
, 
FÆ£
)) {

64 
	`¥ötf
 ("Ródög sëtög from fûê%s\n", 
fûíame
);

66 
	`¥ötf
 ("FûêNOT found: %†f‹Ñódög!\n", 
fûíame
);

68  
db
;

69 
	}
}

81 *
	$gëResour˚
 (
Di•œy
 *
dpy
, 
XrmD©aba£
 
db
, *
«me
,

82 *
˛
, *
def
)

84 
XrmVÆue
 
v
;

85 *
ty≥
;

88 
	`UNUSED
 (
dpy
);

90 i‡(
	`XrmGëResour˚
 (
db
, 
«me
, 
˛
, &
ty≥
, &
v
))

91  
	`°rdup
 (
v
.
addr
);

93  
	`°rdup
 (
def
);

94 
	}
}

106 
	$gëCﬁ‹
 (
Di•œy
 *
dpy
, 
XrmD©aba£
 
db
, *
«me
, *
˛
, *
def
)

108 
XrmVÆue
 
v
;

109 
XCﬁ‹
 
c0
, 
c1
;

110 
Cﬁ‹m≠
 
cm≠
 = 
	`DeÁu…Cﬁ‹m≠
 (
dpy
, 
	`DeÁu…S¸ìn
(dpy));

111 *
ty≥
;

112 
i
=0;

113 
Cﬁ‹TabÀ
 
èbÀ
 = {0, 0, 
NULL
, NULL};

122 i‡(
	`XrmGëResour˚
 (
db
, 
«me
, 
˛
, &
ty≥
, &
v
) &&

123 
	`XAŒocNamedCﬁ‹
 (
dpy
, 
cm≠
, 
v
.
addr
, &
c0
, &
c1
)) {

125 
	`XAŒocNamedCﬁ‹
 (
dpy
, 
cm≠
, 
def
, &
c0
, &
c1
); }

126 #ifde‡
_DEBUG_


127 
	`¥ötf
 ("Rëu∫ög cﬁ‹ %ld\n", 
c1
.
pixñ
);

129 i‡(
i
== 0) {

130 
èbÀ
.
«mes
 = 
	`mÆloc
 ( (*table.names));

131 
èbÀ
.
cﬁ‹s
 = 
	`mÆloc
 ( (*table.colors));

132 } i‡(
i
 >
èbÀ
.
max_«mes
) {

133 *
tmp
;

134 
tmp
 = 
	`ªÆloc
 (
èbÀ
.
«mes
, 
i
 * 2 *  (*table.names));

135 i‡(!
tmp
Ë 
c1
.
pixñ
;

136 
èbÀ
.
max_«mes
 = 
i
 * 2;

137 
tmp
 = 
	`ªÆloc
 (
èbÀ
.
cﬁ‹s
, 
i
 * 2 *  (*table.colors));

138 i‡(!
tmp
Ë 
c1
.
pixñ
;

139 
èbÀ
.
cﬁ‹s
 = 
tmp
;

141 
èbÀ
.
cﬁ‹s
[
i
] = 
c1
.
pixñ
;

142 
èbÀ
.
«mes
[
i
] = 
	`°rdup
 (
«me
);

143 
èbÀ
.
¬ames
 = 
i
 + 1;

145  
c1
.
pixñ
;

146 
	}
}

155 
XF⁄tSåu˘


156 *
	$gëF⁄t
 (
Di•œy
 *
dpy
, 
XrmD©aba£
 
db
, *
«me
, *
˛
, *
def
)

158 
F⁄tTabÀ
 
èbÀ
 = {0,0,
NULL
,NULL};

159 
XrmVÆue
 
v
;

160 *
ty≥
;

161 
XF⁄tSåu˘
 *
f⁄t
 = 
NULL
;

162 
i
=0;

165 
i
=0; i<
èbÀ
.
¬ames
; i++) {

166 i‡(!
	`°rcmp
 (
èbÀ
.
«mes
[
i
], 
«me
)) {

167  
èbÀ
.
f⁄ts
[
i
];

170 i‡(
	`XrmGëResour˚
 (
db
, 
«me
, 
˛
, &
ty≥
, &
v
)) {

171 i‡(
v
.
addr
)

172 
f⁄t
 = 
	`XLﬂdQuîyF⁄t
 (
dpy
, 
v
.
addr
);

174 i‡(!
f⁄t
) {

175 i‡(
v
.
addr
)

176 
	`Ârötf
 (
°dîr
, "U«bÀÅÿlﬂd f⁄ts: %s\n", 
v
.
addr
);

178 
	`Ârötf
 (
°dîr
, "C™nŸÜﬂdÖª„ºed f⁄à(%s:%s)\n", 
«me
, 
˛
);

179 #ifde‡
_DEBUG_


180 
	`¥ötf
 ("Lﬂdög deÁu… f⁄t: %s\n", 
def
);

183 
f⁄t
 = 
	`XLﬂdQuîyF⁄t
 (
dpy
, 
def
);

186 i‡(
i
 == 0) {

187 
èbÀ
.
«mes
 = 
	`mÆloc
 (4 *  (*table.names));

188 
èbÀ
.
f⁄ts
 = 
	`mÆloc
 (4 *  (*table.fonts));

190 } i‡(
i
 >
èbÀ
.
max_«mes
) {

191 *
tmp
;

192 
tmp
 = 
	`ªÆloc
 (
èbÀ
.
«mes
, 
i
*2* (*table.names));

193 i‡(!
tmp
Ë 
f⁄t
;

194 
èbÀ
.
max_«mes
 = 
i
 * 2;

195 
èbÀ
.
«mes
 = 
tmp
;

196 
tmp
 = 
	`ªÆloc
 (
èbÀ
.
f⁄ts
, 
i
*2* (*table.fonts));

197 i‡(!
tmp
Ë 
f⁄t
;

198 
èbÀ
.
f⁄ts
 = 
tmp
;

200 
èbÀ
.
f⁄ts
[
i
] = 
f⁄t
;

201 
èbÀ
.
«mes
[
i
] = 
	`°rdup
 (
«me
);

202 
èbÀ
.
¬ames
 = 
i
 + 1;

204  
f⁄t
;

205 
	}
}

	@gradient.c

18 
	~"funcs.h
"

19 
	~"gødõ¡.h
"

20 
	#__USE_GNU


	)

21 
	~<m©h.h
>

23 
	#mö
(
⁄e
, 
two
Ë(((⁄eË< (two))?(⁄e):—wo))

	)

33 
Pixm≠


34 
	$¸óãGødPixm≠
 (
Di•œy
 *
dpy
, 
width
, 
height
,

35 *
ba£cﬁ‹
)

36 { 
y
, 
x
 =0;

37 
cosöe
, 
l2øds
;

38 
XCﬁ‹
 
bcﬁ‹
, 
cﬁ2
, 
difcﬁ
;

39 
Cﬁ‹m≠
 
cm≠
 = 
	`DeÁu…Cﬁ‹m≠
 (
dpy
, 
	`DeÁu…S¸ìn
(dpy));

40 
Pixm≠
 
pm≠
;

41 
GC
 
gc
 = 
	`DefGC
 (
dpy
);

42 
Wödow
 
wö
 = 
	`DeÁu…RoŸWödow
 (
dpy
);

45 
width
 = 1;

48 
l2øds
 = 
M_PIl
/(
height
);

50 
	`XP¨£Cﬁ‹
 (
dpy
, 
cm≠
, 
ba£cﬁ‹
, &
bcﬁ‹
);

51 
difcﬁ
.
ªd
 = 
	`mö
 (
bcﬁ‹
.red, 0xffff-bcolor.red);

52 
difcﬁ
.
gªí
 = 
	`mö
 (
bcﬁ‹
.green, 0xffff-bcolor.green);

53 
difcﬁ
.
blue
 = 
	`mö
 (
bcﬁ‹
.blue, 0xffff-bcolor.blue);

54 
	`Ârötf
 (
°dîr
, "heighà%d, width %d, %s\n", 
height
, 
width
, 
ba£cﬁ‹
);

56 
pm≠
 = 
	`XCª©ePixm≠
 (
dpy
, 
wö
, 
width
, 
height
, 
	`DeÁu…Dïth
 (dpy,

57 
	`DeÁu…S¸ìn
 (
dpy
)));

59 
y
=0; y < 
height
; y++) {

60 
cosöe
 = 
	`cos
(
l2øds
 * 
y
)/2.0;

61 
cﬁ2
.
ªd
 = 
bcﬁ‹
.ªd + 
difcﬁ
.ªd * 
cosöe
;

62 
cﬁ2
.
gªí
 = 
bcﬁ‹
.gªí + 
difcﬁ
.gªí * 
cosöe
;

63 
cﬁ2
.
blue
 = 
bcﬁ‹
.bluê+ 
difcﬁ
.bluê* 
cosöe
;

64 
	`XAŒocCﬁ‹
 (
dpy
, 
cm≠
, &
cﬁ2
);

65 
	`XSëF‹eground
 (
dpy
, 
gc
, 
cﬁ2
.
pixñ
);

66 
x
=0; x < 
width
; x++)

67 
	`XDøwPoöt
 (
dpy
, 
pm≠
, 
gc
, 
x
, 
y
);

69  
pm≠
;

70 
	}
}

72 
	spm≠
 {

73 *
	mcﬁ‹
;

74 
	mwidth
, 
	mheight
, 
	mcou¡
;

75 
Di•œy
 *
	mdpy
;

76 
Pixm≠
 
	mpm≠
;

78 
	spm≠èbÀ
 {

79 
	m¬ames
, 
	mmax_«mes
;

80 
pm≠
 *
	mpm≠s
;

82 
pm≠èbÀ
 
	gpm≠èbÀ
 = {0, 0, 
NULL
};

92 
Pixm≠


93 
	$gëGødPixm≠
 (
Di•œy
 *
dpy
, 
width
,

94 
height
, *
ba£cﬁ‹
)

96 
Pixm≠
 
pm≠
;

97 
i
;

100 
i
=0; i < 
pm≠èbÀ
.
¬ames
; i++) {

101 i‡(
pm≠èbÀ
.
pm≠s
[
i
].
width
 == width &&

102 
pm≠èbÀ
.
pm≠s
[
i
].
height
 == height &&

103 
height
 && 
pm≠èbÀ
.
pm≠s
[
i
].
dpy
 &&

104 !
	`°rcmp
 (
pm≠èbÀ
.
pm≠s
[
i
].
cﬁ‹
, 
ba£cﬁ‹
)) {

105 
pm≠èbÀ
.
pm≠s
[
i
].
cou¡
 += 1;

106  
pm≠èbÀ
.
pm≠s
[
i
].
pm≠
;

109 
pm≠
 = 
	`¸óãGødPixm≠
 (
dpy
, 
width
, 
height
, 
ba£cﬁ‹
);

110 i‡(!
pm≠èbÀ
.
max_«mes
) {

111 
pm≠èbÀ
.
pm≠s
 = 
	`ªÆloc
 (pmaptable.pmaps,8*(*pmaptable.pmaps));

112 } i‡(
pm≠èbÀ
.
¬ames
 >pm≠èbÀ.
max_«mes
) {

113 *
tmp
;

114 
tmp
 = 
	`ªÆloc
 (
pm≠èbÀ
.
pm≠s
,Öm≠èbÀ.
max_«mes
 *2*

115  (*
pm≠èbÀ
.
pm≠s
));

116 i‡(!
tmp
Ë 
pm≠
;

117 
pm≠èbÀ
.
pm≠s
 = 
tmp
;

119 
pm≠èbÀ
.
pm≠s
[pm≠èbÀ.
¬ames
].
width
 = width;

120 
pm≠èbÀ
.
pm≠s
[pm≠èbÀ.
¬ames
].
height
 = height;

121 
pm≠èbÀ
.
pm≠s
[pm≠èbÀ.
¬ames
].
pm≠
 =Ömap;

122 
pm≠èbÀ
.
pm≠s
[pm≠èbÀ.
¬ames
].
dpy
 = dpy;

123 
pm≠èbÀ
.
pm≠s
[pm≠èbÀ.
¬ames
].
cﬁ‹
 = 
	`°rdup
 (
ba£cﬁ‹
);

124 
pm≠èbÀ
.
pm≠s
[pm≠èbÀ.
¬ames
].
cou¡
 = 1;

125 
pm≠èbÀ
.
¬ames
 += 1;

127  
pm≠
;

128 
	}
}

138 
	$‰ìPixm≠
 (
Di•œy
 *
dpy
, 
width
,

139 
height
, *
cﬁ‹
)

141 
i
;

143 
i
=0; i < 
pm≠èbÀ
.
¬ames
; i++)

145 i‡(
pm≠èbÀ
.
pm≠s
[
i
].
width
 == width

146 && 
pm≠èbÀ
.
pm≠s
[
i
].
height
 == height

147 && 
pm≠èbÀ
.
pm≠s
[
i
].
dpy
 == dpy

148 && !
	`°rcmp
 (
pm≠èbÀ
.
pm≠s
[
i
].
cﬁ‹
, color)) {

149 
pm≠èbÀ
.
pm≠s
[
i
].
cou¡
 -= 1;

150 i‡(!
pm≠èbÀ
.
pm≠s
[
i
].
cou¡
) {

151 
	`XFªePixm≠
 (
dpy
, 
pm≠èbÀ
.
pm≠s
[
i
].
pm≠
);

152 
pm≠èbÀ
.
pm≠s
[
i
].
pm≠
 =

153 
pm≠èbÀ
.
pm≠s
[pm≠èbÀ.
¬ames
].
pm≠
;

154 
pm≠èbÀ
.
pm≠s
[
i
].
width
 =

155 
pm≠èbÀ
.
pm≠s
[pm≠èbÀ.
¬ames
].
width
;

156 
pm≠èbÀ
.
pm≠s
[
i
].
height
 =

157 
pm≠èbÀ
.
pm≠s
[pm≠èbÀ.
¬ames
].
height
;

158 
	`‰ì
 (
pm≠èbÀ
.
pm≠s
[
i
].
cﬁ‹
);

159 
pm≠èbÀ
.
pm≠s
[
i
].
cﬁ‹
 =

160 
pm≠èbÀ
.
pm≠s
[pm≠èbÀ.
¬ames
].
cﬁ‹
;

161 
pm≠èbÀ
.
¬ames
 -=1;

166 
	}
}

	@gradient.h

18 #i‚de‡
_GRADIENT_H_


19 
	#_GRADIENT_H_


	)

21 
‰ìPixm≠
 (
Di•œy
 *
dpy
, 
width
, 
height
, *
cﬁ‹
);

23 
Pixm≠
 
gëGødPixm≠
 (
Di•œy
 *
dpy
, 
width
, 
height
, *
ba£cﬁ‹
);

	@mainloop.c

18 
	~"funcs.h
"

19 
	~"buâ⁄.h
"

20 
	~"≠pO±i⁄.h
"

21 
	~"myMa¸o.h
"

23 
	#_DEBUG_


	)

25 
exôInfo
 
	tExôInfo
;

26 
	sexôInfo
 {

27 
Di•œy
 *
	mdpy
;

30 
	$exôBuâ⁄
(*
cbd©a
, 
XEvít
 *
ev
)

32 
	`UNUSED
 (
ev
);

34 
ExôInfo
 *
ei
 = (ExôInfo*)
cbd©a
;

35 
	`XClo£Di•œy
 (
ei
->
dpy
);

36 
	`exô
(0);

37 
	}
}

39 
	sHñpInfo
 {

40 
Wödow
 
	mmíuToClo£
;

41 *
	mãxt
;

42 } 
	tHñpInfo
;

44 
	$hñpBuâ⁄CB
(*
cbd©a
, 
XEvít
 *
ev
){

45 
HñpInfo
 *
hi
 = (HñpInfo*)
cbd©a
;

46 
	`¥ötf
("youÖªs£d %s!\n", 
hi
->
ãxt
);

47 i‡(
hi
->
míuToClo£
)

48 
	`XUnm≠Wödow
(
ev
->
x™y
.
di•œy
, 
hi
->
míuToClo£
);

49 
	}
}

56 
XC⁄ãxt


57 
	$£tup
(
Di•œy
 * 
dpy
, 
¨gc
, ** 
¨gv
)

59 
XrmO±i⁄DescRec
 
xrmTabÀ
[] = {

60 {"-bg", "*background", 
Xrm›ti⁄SïArg
, 
NULL
},

61 {"-fg", "*f‹eground", 
Xrm›ti⁄SïArg
, 
NULL
},

62 {"-bc", "*b‹dîcﬁour", 
Xrm›ti⁄SïArg
, 
NULL
},

63 {"-f⁄t", "*f⁄t", 
Xrm›ti⁄SïArg
, 
NULL
},

66 
Wödow
 
wö
;

67 
XrmD©aba£
 
db
;

68 
XC⁄ãxt
 
˘xt
;

69 * 
¥og«me
 = "xtut15";

70 
ExôInfo
 *
exôInfo
;

71 
HñpInfo
 *
hñpInfo
;

72 
Wödow
 *
fûemíuwös
, *
hñpmíuwös
, *
c⁄ãxtmíuwös
;

73 
Wödow
 
fûemíu
, 
hñpmíu
, 
c⁄ãxtmíu
;

74 
Wödow
 
míub¨
, 
hñpBuâ⁄
;

77 
˘xt
 = 
	`XUniqueC⁄ãxt
();

79 
db
 = 
	`£tupDB
(
dpy
, 
xrmTabÀ
, (xrmTable)/(xrmTable[0]),

80 
¥og«me
, &
¨gc
, 
¨gv
);

82 
wö
 = 
	`√wAµ
(
¥og«me
, 
dpy
, 
db
, 
˘xt
, 400, 400, 
¨gc
, 
¨gv
);

84 
exôInfo
 = 
	`mÆloc
((*exitInfo));

85 
exôInfo
->
dpy
 = dpy;

87 
hñpInfo
 = 
	`mÆloc
((*helpInfo));

90 
fûemíu
 = 
	`√wMíu
(
¥og«me
, 
dpy
, 
db
, 
˘xt
, "File");

92 
fûemíuwös
 = 
	`mÆloc
((*filemenuwins));

94 
fûemíuwös
[0] = 
	`√wBuâ⁄
 (
¥og«me
, 
dpy
, 
fûemíu
, 
db
, 
˘xt
,

95 "New", 0, 0, 80, 0, 
FÆ£
, 
X√wBuâ⁄
, 
exôInfo
);

97 
fûemíuwös
[1] = 
	`√wBuâ⁄
 (
¥og«me
, 
dpy
, 
fûemíu
, 
db
, 
˘xt
,

98 "O≥n", 0, 0, 80, 0, 
FÆ£
, 
O≥nBuâ⁄
, 
exôInfo
);

100 
fûemíuwös
[2] = 
	`√wBuâ⁄
 (
¥og«me
, 
dpy
, 
fûemíu
, 
db
, 
˘xt
,

101 "Save", 0, 0, 80, 0, 
FÆ£
, 
msgSaveBuâ⁄
, 
exôInfo
);

103 
fûemíuwös
[3] = 
	`√wBuâ⁄
 (
¥og«me
, 
dpy
, 
fûemíu
, 
db
, 
˘xt
,

104 "SavêAs", 0, 0, 80, 0, 
FÆ£
, 
msgSaveAsBuâ⁄
, 
exôInfo
);

106 
fûemíuwös
[4] = 
	`√wBuâ⁄
 (
¥og«me
, 
dpy
, 
fûemíu
, 
db
, 
˘xt
,

107 "Exp‹t", 0, 0, 80, 0, 
FÆ£
, 
Exp‹tBuâ⁄
, 
exôInfo
);

109 
fûemíuwös
[5] = 
	`√wBuâ⁄
 (
¥og«me
, 
dpy
, 
fûemíu
, 
db
, 
˘xt
,

110 "Imp‹t", 0, 0, 80, 0, 
FÆ£
, 
Imp‹tBuâ⁄
, 
exôInfo
);

112 
fûemíuwös
[6] = 
	`√wBuâ⁄
(
¥og«me
, 
dpy
, 
fûemíu
, 
db
, 
˘xt
,

113 "exô", 0, 0, 80, 0, 
FÆ£
, 
exôBuâ⁄
, 
exôInfo
);

115 
	`míuSëSubWös
(
dpy
, 
˘xt
, 
fûemíu
, 
fûemíuwös
, 7);

117 
c⁄ãxtmíu
 = 
	`√wPõMíu
(
¥og«me
, 
dpy
, 
db
, 
˘xt
, "contextmenu");

119 
	`£tAµC⁄ãxtMíu
(
dpy
, 
˘xt
, 
wö
, 
c⁄ãxtmíu
);

121 
c⁄ãxtmíuwös
 = 
	`mÆloc
((*contextmenuwins)*6);

123 
c⁄ãxtmíuwös
[0] = 
	`√wBuâ⁄
(
¥og«me
, 
dpy
, 
c⁄ãxtmíu
, 
db
, 
˘xt
,

124 "exô", 0, 0, 20, 0, 
True
, 
exôBuâ⁄
, 
exôInfo
);

126 
hñpInfo
 = 
	`mÆloc
((*helpInfo));

127 
hñpInfo
->
míuToClo£
 = 
c⁄ãxtmíu
;

128 
hñpInfo
->
ãxt
 = "contextmenu help";

130 
c⁄ãxtmíuwös
[1] = 
	`√wBuâ⁄
(
¥og«me
, 
dpy
, 
c⁄ãxtmíu
, 
db
, 
˘xt
,

131 "Edô", 0, 0, 20, 0, 
True
, 
hñpBuâ⁄CB
, 
hñpInfo
);

133 
c⁄ãxtmíuwös
[2] = 
	`√wBuâ⁄
(
¥og«me
, 
dpy
, 
c⁄ãxtmíu
, 
db
, 
˘xt
,

134 "Aµíd", 0, 0, 20, 0, 
True
, 
hñpBuâ⁄CB
, 
hñpInfo
);

136 
c⁄ãxtmíuwös
[3] = 
	`√wBuâ⁄
(
¥og«me
, 
dpy
, 
c⁄ãxtmíu
, 
db
, 
˘xt
,

137 "Save", 0, 0, 20, 0, 
True
, 
hñpBuâ⁄CB
, 
hñpInfo
);

139 
c⁄ãxtmíuwös
[4] = 
	`√wBuâ⁄
(
¥og«me
, 
dpy
, 
c⁄ãxtmíu
, 
db
, 
˘xt
,

140 "Modify", 0, 0, 20, 0, 
True
, 
hñpBuâ⁄CB
, 
hñpInfo
);

142 
c⁄ãxtmíuwös
[5] = 
	`√wBuâ⁄
(
¥og«me
, 
dpy
, 
c⁄ãxtmíu
, 
db
, 
˘xt
,

143 "Dñëe", 0, 0, 20, 0, 
True
, 
hñpBuâ⁄CB
, 
hñpInfo
);

145 
	`míuSëSubWös
(
dpy
, 
˘xt
, 
c⁄ãxtmíu
, 
c⁄ãxtmíuwös
, 6);

147 
hñpInfo
 = 
	`mÆloc
((*helpInfo));

148 
hñpmíu
 = 
	`√wMíu
(
¥og«me
, 
dpy
, 
db
, 
˘xt
, "Help");

149 
hñpInfo
->
míuToClo£
 = 
hñpmíu
;

150 
hñpInfo
->
ãxt
 = "help menu help";

151 
hñpmíuwös
 = 
	`mÆloc
((*helpmenuwins)*2);

153 
hñpmíuwös
[0] = 
	`√wBuâ⁄
(
¥og«me
, 
dpy
, 
hñpmíu
, 
db
, 
˘xt
,

154 "hñp", 0, 0, 80, 0, 
FÆ£
, 
hñpBuâ⁄CB
, 
hñpInfo
);

156 
hñpmíuwös
[1] = 
	`√wBuâ⁄
(
¥og«me
, 
dpy
, 
hñpmíu
, 
db
, 
˘xt
,

157 "hñp2", 0, 80, 80, 0, 
FÆ£
, 
hñpBuâ⁄CB
, 
hñpInfo
);

159 
	`míuSëSubWös
(
dpy
, 
˘xt
, 
hñpmíu
, 
hñpmíuwös
, 2);

161 
míub¨
 = 
	`√wMíuB¨
(
¥og«me
, 
dpy
, 
wö
, 
db
, 
˘xt
,

163 
	`√wMíuB¨Buâ⁄
(
¥og«me
, 
dpy
, 
míub¨
, 
db
, 
˘xt
,

164 "Fûemíu", 0, 0, 30, 0, 
fûemíu
);

166 
hñpBuâ⁄
 = 
	`√wMíuB¨Buâ⁄
(
¥og«me
, 
dpy
, 
míub¨
, 
db
, 
˘xt
,

167 "hñpmíu", 0, 0, 30, 0, 
hñpmíu
);

169 
	`£tHñpBuâ⁄
(
dpy
, 
˘xt
, 
míub¨
, 
hñpBuâ⁄
, 400-80);

171 
	`£tAµMíuB¨
(
dpy
, 
˘xt
, 
wö
, 
míub¨
, 400, 20);

183 
	`XM≠Wödow
(
dpy
, 
wö
);

185  
˘xt
;

186 
	}
}

197 
	$maö_lo›
(
Di•œy
 *
dpy
, 
XC⁄ãxt
 
c⁄ãxt
)

199 
XEvít
 
ev
;

203 
Block
 *
block
 = 
NULL
;

204 
	`XNextEvít
(
dpy
, &
ev
);

205 
	`XFödC⁄ãxt
(
ev
.
x™y
.
di•œy
,Év.x™y.
wödow
, 
c⁄ãxt
,

206 (
XPoöãr
*)&
block
);

207 
ev
.
ty≥
){

208 
C⁄figuªNŸify
:

209 i‡(
block
 && block->
funcs
 && block->funcs->
c⁄figuªNŸify
)

210 
block
->
funcs
->
	`c⁄figuªNŸify
(block, &
ev
);

212 
Expo£
:

213 i‡(
block
 && block->
funcs
 && block->funcs->
expo£
)

214 
block
->
funcs
->
	`expo£
(block, &
ev
);

217 
E¡îNŸify
:

218 i‡(
block
 && block->
funcs
 && block->funcs->
íãrNŸify
)

219 
block
->
funcs
->
	`íãrNŸify
(block, &
ev
);

221 
LóveNŸify
:

222 i‡(
block
 && block->
funcs
 && block->funcs->
ÀaveNŸify
)

223 
block
->
funcs
->
	`ÀaveNŸify
(block, &
ev
);

225 
Buâ⁄Pªss
:

226 i‡(
block
 && block->
funcs
 && block->funcs->
buâ⁄Pªss
)

227 
block
->
funcs
->
	`buâ⁄Pªss
(block, &
ev
);

229 
Buâ⁄Rñó£
:

230 i‡(
block
 && block->
funcs
 && block->funcs->
buâ⁄Rñó£
)

231 
block
->
funcs
->
	`buâ⁄Rñó£
(block, &
ev
);

235 
	}
}

245 
	$maö
(
¨gc
, ** 
¨gv
)

247 
Di•œy
 *
dpy
;

248 
XC⁄ãxt
 
˘xt
;

251 
dpy
 = 
	`XO≥nDi•œy
(
NULL
);

252 i‡(!
dpy
Ë{
	`Ârötf
(
°dîr
, "unableÅo connectÅo display\n"); 7;}

253 
˘xt
 = 
	`£tup
(
dpy
, 
¨gc
, 
¨gv
);

254  
	`maö_lo›
(
dpy
, 
˘xt
);

255 
	}
}

	@menu.c

18 
	~"funcs.h
"

19 
	~"míu.h
"

20 
	~<X11/exãnsi⁄s/sh≠e.h
>

21 
	~"gødõ¡.h
"

22 
	~"myMa¸o.h
"

33 
	$ªsizeBlock
 (
Block
 *
block
, 
Wödow
 
wö
, 
width
, 
height
, 
XEvít
 *
ev
)

35 
XEvít
 
tmp
;

37 
	`XResizeWödow
 (
ev
->
x™y
.
di•œy
, 
wö
, 
width
, 
height
);

39 i‡(!(
block
 && block->
funcs
 && block->funcs->
c⁄figuªNŸify
))

42 
tmp
.
xc⁄figuª
.
ty≥
 = 
ev
->
x™y
.type;

43 
tmp
.
xc⁄figuª
.
di•œy
 = 
ev
->
x™y
.display;

44 
tmp
.
xc⁄figuª
.
wödow
 = 
wö
;

45 
tmp
.
xc⁄figuª
.
evít
 = 
wö
;

46 
tmp
.
xc⁄figuª
.
width
 = width;

47 
tmp
.
xc⁄figuª
.
height
 = height;

48 
tmp
.
xc⁄figuª
.
b‹dî_width
 = 0;

49 
tmp
.
xc⁄figuª
.
above
 = 
N⁄e
;

50 
tmp
.
xc⁄figuª
.
ovîride_ªdúe˘
 = 
FÆ£
;

51 
block
->
funcs
->
	`c⁄figuªNŸify
 (block, &
tmp
);

52 
	}
}

62 
	$míuC⁄figuªNŸify
 (
Block
 *
block
, 
XEvít
 *
ev
)

64 
Míu
 *
£lf
 = &
block
->
míu
;

65 
XC⁄figuªEvít
 *
x˚
 = &
ev
->
xc⁄figuª
;

66 
i
, 
fuŒheight
 = 0;

67 
Wödow
 
w
 = 
x˚
->
wödow
;

69 i‡(
x˚
->
width
 =
£lf
->width) ;

71 
i
=0; i<
£lf
->
nsubws
; i++) {

72 
Buâ⁄
 *
buâ⁄
;

73 i‡(
	`XFödC⁄ãxt
 (
x˚
->
di•œy
, 
£lf
->
subws
[
i
], sñf->
˘xt
,

74 (
XPoöãr
*)&
buâ⁄
))

76 
fuŒheight
 +
buâ⁄
->
height
;

77 i‡(
buâ⁄
->
funcs
 !
Buâ⁄Funcs
) {

78 
	`Ârötf
 (
°dîr
, "This is badáboutÅhins\n");

79 }{ 
	`ªsizeBlock
 ((
Block
*)
buâ⁄
, 
£lf
->
subws
[
i
],

80 
x˚
->
width
, 
buâ⁄
->
height
, 
ev
); }

82 i‡(
fuŒheight
 == 0) {

83 
	`Ârötf
 (
°dîr
, "Fullheight = 0\n"); ;

85 i‡(
x˚
->
height
 !
fuŒheight
) {

86 
	`XResizeWödow
 (
x˚
->
di•œy
, 
w
, x˚->
width
, 
fuŒheight
);

88 
	}
}

98 
Wödow


99 
	$√wXMíu
 (
Míu
 *
míu
, *
¥og«me
, 
Di•œy
 *
dpy
, 
XrmD©aba£
 
db
,

100 
XC⁄ãxt
 
˘xt
, *
«me
)

102 
Wödow
 
wö
, 
∑ª¡
 = 
	`DeÁu…RoŸWödow
 (
dpy
);

103 
XSëWödowAâribuãs
 
©å
;

105 
	`UNUSED
 (
¥og«me
);

106 
	`UNUSED
 (
db
);

107 
	`UNUSED
 (
«me
);

109 
©å
.
ßve_undî
 = 
True
;

110 
©å
.
ovîride_ªdúe˘
 = 
True
;

111 
©å
.
background_pixñ
 = 
	`BœckPixñ
 (
dpy
, 
	`DeÁu…S¸ìn
(dpy));

113 
míu
->
˘xt
 = ctxt;

115 
wö
 = 
	`XCª©eWödow
 (
dpy
,

116 
∑ª¡
,

120 
C›yFromP¨ít
,

121 
C›yFromP¨ít
,

122 
C›yFromP¨ít
,

123 
CWBackPixñ
 | 
CWOvîrideRedúe˘
 | 
CWSaveUndî
,

124 &
©å
);

125 
	`XSñe˘I≈ut
 (
dpy
, 
wö
, 
Såu˘uªNŸifyMask
);

127 
	`XSaveC⁄ãxt
 (
dpy
, 
wö
, 
˘xt
, (
XPoöãr
)
míu
);

129  
wö
;

130 
	}
}

140 
Wödow


141 
	$√wMíu
 (*
¥og«me
, 
Di•œy
 *
dpy
, 
XrmD©aba£
 
db
,

142 
XC⁄ãxt
 
˘xt
, *
«me
)

144 
Míu
 *
míu
;

146 
míu
 = 
	`ˇŒoc
 ( (*menu), 1);

147 i‡(!
míu
) {

148 
	`Ârötf
 (
°dîr
, "U«bÀÅÿÆloˇã s∑˚ %s\n", 
«me
); 
	`exô
 (32);

150 
míu
->
funcs
 = 
MíuFuncs
;

152  
	`√wXMíu
 (
míu
, 
¥og«me
, 
dpy
, 
db
, 
˘xt
, 
«me
);

153 
	}
}

162 
	$põmíuSëSubWös
 (
Míu
 *
põmíu
, 
Wödow
 *
subws
, 
nsubws
)

164 
	`UNUSED
 (
subws
);

166 i‡(
nsubws
 > 6) {

167 
	`Ârötf
 (
°dîr
, "SomebofyÅryingÅo create big Pie menu\n"); ;

169 
põmíu
->
width
 = 0;

170 
	}
}

180 
Wödow


181 *
	$míuSëSubWös
 (
Di•œy
 *
dpy
, 
XC⁄ãxt
 
˘xt
, 
Wödow
 
wö
,

182 
Wödow
 *
subws
, 
nsubws
)

184 
Block
 *
bmíu
 = 
NULL
;

185 
Míu
 *
míu
;

186 
Wödow
 *
ﬁd
;

187 
i
, 
fuŒheight
 = 0, 
maxwidth
 = 100;

189 
	`XFödC⁄ãxt
 (
dpy
, 
wö
, 
˘xt
, (
XPoöãr
*)&
bmíu
);

190 
míu
 = &
bmíu
->menu;

191 
ﬁd
 = 
míu
->
subws
;

192 
míu
->
subws
 = subws;

193 
míu
->
nsubws
 =Çsubws;

195 i‡(
bmíu
->
míu
.
funcs
 =
PõMíuFuncs
) {

196 
	`põmíuSëSubWös
 (&
bmíu
->
míu
, 
subws
, 
nsubws
);  
ﬁd
;

199 
i
=0; i < 
nsubws
; i++) {

200 
Buâ⁄
 *
buâ⁄
 = 
NULL
;

201 i‡(
	`XFödC⁄ãxt
 (
dpy
, 
míu
->
subws
[
i
], 
˘xt
, (
XPoöãr
*)&
buâ⁄
))

204 
	`XMoveWödow
 (
dpy
, 
míu
->
subws
[
i
], 0, 
fuŒheight
);

205 
fuŒheight
 +
buâ⁄
->
height
;

206 i‡(
maxwidth
 < 
buâ⁄
->
width
)

207 
maxwidth
 = 
buâ⁄
->
width
;

209 
i
=0; i < 
nsubws
; i++) {

210 
Buâ⁄
 *
buâ⁄
 = 
NULL
;

211 i‡(
	`XFödC⁄ãxt
 (
dpy
, 
míu
->
subws
[
i
], 
˘xt
, (
XPoöãr
*)&
buâ⁄
))

213 
buâ⁄
->
width
 = 
maxwidth
;

215 
	`XResizeWödow
 (
dpy
, 
wö
, 
maxwidth
, 
fuŒheight
);

217  
ﬁd
;

218 
	}
}

227 
Wödow


228 
	$√wPõMíu
 (*
¥og«me
, 
Di•œy
 *
dpy
, 
XrmD©aba£
 
db
,

229 
XC⁄ãxt
 
˘xt
, *
«me
)

231 
Míu
 *
míu
;

232 
míu
 = 
	`ˇŒoc
 ( (*menu), 1);

233 i‡(!
míu
) {

234 
	`Ârötf
 (
°dîr
, "U«bÀÅÿÆloˇã s∑˚ %s\n", 
«me
); 
	`exô
 (32);

236 
míu
->
funcs
 = 
PõMíuFuncs
;

238  
	`√wXMíu
 (
míu
, 
¥og«me
, 
dpy
, 
db
, 
˘xt
, 
«me
);

239 
	}
}

241 íum { 
	mMaxPIES
 = 6 };

242 
	gxs
[
MaxPIES
] = {0, .86, .86, 0, -.86, -.86};

243 
	gys
[
MaxPIES
] = {-1, -.5, .5, 1, .5, -.5};

252 
	$põMíuM≠
 (
Wödow
 
míuwö
, 
XEvít
 *
ev
, 
XC⁄ãxt
 
˘xt
)

254 
i
, 
míuwidth
, 
míuheight
, 
maxwidth
 = 0;

255 
Míu
 *
míu
 = 
NULL
;

256 
Buâ⁄
 **
buâ⁄s
;

257 
Pixm≠
 
pm≠
;

258 
GC
 
gc
;

260 
	`¥ötf
 ("ªåõvög %∞%∞%x %p\n", (*Ë
ev
->
x™y
.
di•œy
,

261 (*)
míuwö
,

262 
˘xt
,

263 (*)
míu
);

264 
	`XFödC⁄ãxt
 (
ev
->
x™y
.
di•œy
, 
míuwö
, 
˘xt
, (
XPoöãr
*)&
míu
);

265 i‡(!
míu
) ;

266 i‡(
míu
->
width
) {

267 
míuwidth
 = 2.72 * 
míu
->
width
;

268 
míuheight
 = 3 * 
míu
->
width
;

269 
	`XMoveWödow
 (
ev
->
x™y
.
di•œy
, 
míuwö
,

270 
ev
->
xbuâ⁄
.
x_roŸ
 - 
míuwidth
 / 2,

271 
ev
->
xbuâ⁄
.
y_roŸ
 - 
míuheight
 / 2);

272 
	`XM≠Wödow
 (
ev
->
x™y
.
di•œy
, 
míuwö
);

276 
buâ⁄s
 = 
	`mÆloc
 ( (*buâ⁄s)*
míu
->
nsubws
);

277 
i
=0; i<
míu
->
nsubws
; i++) {

278 
Buâ⁄
 *
buâ⁄
 = 
NULL
;

279 i‡(
	`XFödC⁄ãxt
 (
ev
->
x™y
.
di•œy
, 
míu
->
subws
[
i
],

280 
míu
->
˘xt
, (
XPoöãr
*)&
buâ⁄
))

282 
buâ⁄s
[
i
] = 
buâ⁄
;

283 i‡(
maxwidth
 < 
buâ⁄
->
ãxt_width
 + 2 * buâ⁄->
f⁄t_as˚¡
)

284 
maxwidth
 = 
buâ⁄
->
ãxt_width
 + 2 * buâ⁄->
f⁄t_as˚¡
;

287 
míuwidth
 = 2.72 * 
maxwidth
;

288 
míuheight
 = 3 * 
maxwidth
;

289 
	`XMoveResizeWödow
 (
ev
->
x™y
.
di•œy
, 
míuwö
,

290 
ev
->
xbuâ⁄
.
x_roŸ
 - 
míuwidth
 / 2,

291 
ev
->
xbuâ⁄
.
y_roŸ
 = 
míuheight
 / 2,

292 
míuwidth
 + 1, 
míuheight
);

294 
i
=0; i<
MaxPIES
 && i < 
míu
->
nsubws
; i++) {

295 
	`XMoveResizeWödow
 (
ev
->
x™y
.
di•œy
, 
míu
->
subws
[
i
],

296 (1.36 + 
xs
[
i
]Ë* 
maxwidth
 - maxwidth / 2,

297 (1.5 + 
ys
[
i
]Ë* 
maxwidth
 - maxwidth / 2,

298 
maxwidth
, maxwidth);

301 
pm≠
 = 
	`XCª©ePixm≠
 (
ev
->
x™y
.
di•œy
, 
míuwö
, 
míuwidth
, 
míuheight
, 1);

302 i‡(!
pm≠
Ë
	`Ârötf
 (
°dîr
, "Can't createÖixmap\n");

303 
gc
 = 
	`XCª©eGC
 (
ev
->
x™y
.
di•œy
, 
pm≠
, 0, 
NULL
);

304 
	`XSëF‹eground
 (
ev
->
x™y
.
di•œy
, 
gc
, 0);

305 
	`XFûlRe˘™gÀ
 (
ev
->
x™y
.
di•œy
, 
pm≠
, 
gc
, 0, 0, 
míuwidth
, 
míuheight
);

306 
	`XSëF‹eground
 (
ev
->
x™y
.
di•œy
, 
gc
, 1);

308 
i
=0; i<
MaxPIES
 && i < 
míu
->
nsubws
; i++) {

309 
	`XFûlArc
 (
ev
->
x™y
.
di•œy
, 
pm≠
, 
gc
,

310 (1.35 + 
xs
[
i
]Ë* 
maxwidth
 - maxwidth / 2,

311 (1.5 + 
ys
[
i
]Ë* 
maxwidth
 - maxwidth / 2,

312 
maxwidth
, maxwidth, 0, 360*64);

314 
	`XSh≠eComböeMask
 (
ev
->
x™y
.
di•œy
, 
míuwö
, 
Sh≠eBoundög
,

315 0, 0, 
pm≠
, 
Sh≠eSë
);

316 
	`XFªePixm≠
 (
ev
->
x™y
.
di•œy
, 
pm≠
);

318 
pm≠
 = 
	`XCª©ePixm≠
 (
ev
->
x™y
.
di•œy
, 
míuwö
, 
maxwidth
, maxwidth, 1);

319 
	`XSëF‹eground
 (
ev
->
x™y
.
di•œy
, 
gc
, 0);

320 
	`XFûlRe˘™gÀ
 (
ev
->
x™y
.
di•œy
, 
pm≠
, 
gc
, 0, 0, 
maxwidth
, maxwidth);

321 
	`XSëF‹eground
 (
ev
->
x™y
.
di•œy
, 
gc
, 1);

322 
	`XFûlArc
 (
ev
->
x™y
.
di•œy
, 
pm≠
, 
gc
, 0, 0, 
maxwidth
, maxwidth, 0, 360*64);

324 
i
=0; i<
MaxPIES
 && i < 
míu
->
nsubws
; i++) {

325 
	`XSh≠eComböeMask
 (
ev
->
x™y
.
di•œy
, 
míu
->
subws
[
i
],

326 
Sh≠eBoundög
, 0, 0, 
pm≠
, 
Sh≠eSë
);

327 
buâ⁄s
[
i
]->
height
 = buâ⁄s[i]->
width
 = 
maxwidth
;

328 
buâ⁄s
[
i
]->
bgpix
 = 
	`gëGødPixm≠
 (
ev
->
x™y
.
di•œy
, 1, 
maxwidth
,

329 
buâ⁄s
[
i
]->
background
);

330 
	`XSëWödowBackgroundPixm≠
 (
ev
->
x™y
.
di•œy
, 
míu
->
subws
[
i
],

331 
buâ⁄s
[
i
]->
bgpix
);

333 
	`XFªePixm≠
 (
ev
->
x™y
.
di•œy
, 
pm≠
);

334 
	`XFªeGC
 (
ev
->
x™y
.
di•œy
, 
gc
);

335 
	`‰ì
 (
buâ⁄s
);

337 
míu
->
width
 = 
maxwidth
;

339 
	`XM≠Wödow
 (
ev
->
x™y
.
di•œy
, 
míuwö
);

340 
	}
}

349 
	$põmíuExpo£
 (
Block
 *
b
, 
XEvít
 *
ev
)

351 
Míu
 *
míu
 = &
b
->menu;

352 
XGCVÆues
 
xgcv
;

353 
i
, 
maxwidth
 = 
míu
->
width
;

355 
xgcv
.
löe_width
 = 3;

356 
xgcv
.
f‹eground
 = 
	`WhôePixñ
 (
ev
->
x™y
.
di•œy
,

357 
	`DeÁu…S¸ìn
 (
ev
->
x™y
.
di•œy
));

358 
xgcv
.
subwödow_mode
 = 
In˛udeIn„ri‹s
;

359 
	`XCh™geGC
 (
ev
->
x™y
.
di•œy
, 
	`DefGC
 (ev->xany.display),

360 
GCSubwödowMode
 | 
GCLöeWidth
 | 
GCF‹eground
, &
xgcv
);

362 
i
=0; i < 
MaxPIES
 && i < 
míu
->
nsubws
; i++) {

363 
	`XDøwArc
 (
ev
->
x™y
.
di•œy
,Év->x™y.
wödow
, 
	`DefGC
 (ev->xany.display),

364 (1.36 + 
xs
[
i
]Ë* 
maxwidth
 - maxwidth /2,

365 (1.5 + 
ys
[
i
]Ë* 
maxwidth
 - maxwidth /2,

366 
maxwidth
, maxwidth, 0, 360*64);

368 
	}
}

370 
Funcs
 
	g_MíuFuncs
 = {

371 
míuC⁄figuªNŸify
,

372 
NULL
,

373 
NULL
,

374 
NULL
,

375 
NULL
,

376 
NULL


378 
Funcs
 *
	gMíuFuncs
 = &
_MíuFuncs
;

380 
Funcs
 
	g_PõMíuFuncs
 = {

381 
NULL
,

382 
NULL
,

383 
NULL
,

384 
põmíuExpo£
,

385 
NULL
,

386 
NULL


388 
Funcs
 *
	gPõMíuFuncs
 = &
_PõMíuFuncs
;

	@menu.h

18 #i‚de‡
_MENU_H_


19 
	#_MENU_H_


	)

21 
Míu
 
	tMíu
;

22 
	sMíu
 {

23 
Funcs
 *
	mfuncs
;

24 
	mwidth
, 
	mnsubws
;

25 
XC⁄ãxt
 
	m˘xt
;

26 
Wödow
 *
	msubws
;

29 
Funcs
 *
MíuFuncs
;

30 
Funcs
 *
PõMíuFuncs
;

32 
Wödow
 
√wMíu
 (*
¥og«me
, 
Di•œy
 *
dpy
, 
XrmD©aba£
 
db
,

33 
XC⁄ãxt
 
˘xt
, *
«me
);

35 
Wödow
 
√wPõMíu
 (*
¥og«me
, 
Di•œy
 *
dpy
, 
XrmD©aba£
 
db
,

36 
XC⁄ãxt
 
˘xt
, *
«me
);

38 
Wödow
 *
míuSëSubWös
 (
Di•œy
 *
dpy
, 
XC⁄ãxt
 
˘xt
, Wödow 
míu
,

39 
Wödow
 *
subws
, 
nsubws
);

41 
põMíuM≠
 (
Wödow
 
põmíuwö
, 
XEvít
 *
ev
, 
XC⁄ãxt
 
˘xt
);

	@menubar.c

18 
	~"funcs.h
"

19 
	~"míub¨.h
"

29 
	$míub¨C⁄figuªNŸify
 (
Block
 *
block
, 
XEvít
 *
ev
)

31 
MíuB¨
 *
£lf
 = &
block
->
míub¨
;

32 
Buâ⁄
 *
hñp
 = 
NULL
;

33 
XC⁄figuªEvít
 *
x˚
 = &
ev
->
xc⁄figuª
;

35 i‡(
x˚
->
width
 =
£lf
->width) ;

36 
£lf
->
width
 = 
x˚
->width;

37 i‡(!
£lf
->
hñpBuâ⁄
) ;

38 
	`XFödC⁄ãxt
 (
x˚
->
di•œy
, 
£lf
->
hñpBuâ⁄
,

39 
£lf
->
˘xt
, (
XPoöãr
*)&
hñp
);

40 i‡(!
hñp
) {

41 
	`¥ötf
 ("Not found help button %p %p %x\n",

42 (*)
£lf
->
hñpBuâ⁄
,

43 
x˚
->
di•œy
,

44 
£lf
->
˘xt
);

47 
	`XMoveWödow
 (
x˚
->
di•œy
, 
£lf
->
hñpBuâ⁄
, x˚->
width
 - 
hñp
->width, 0);

49 
	`ªsizeBlock
 ((
Block
*)
hñp
, 
£lf
->
hñpBuâ⁄
, hñp->
width
,

50 
x˚
->
height
, 
ev
);

51 
	}
}

63 
Wödow


64 
	$√wMíuB¨
 (*
¥og«me
, 
Di•œy
 *
dpy
, 
Wödow
 
∑ª¡
,

65 
XrmD©aba£
 
db
, 
XC⁄ãxt
 
˘xt
, *
«me
, 
x
,

66 
y
, 
width
, 
height
)

68 
Wödow
 
wö
;

69 
MíuB¨
 *
míub¨
;

70 
ªsour˚«me
[256], 
˛as¢ame
[256];

71 
background
;

73 
míub¨
 = 
	`ˇŒoc
 ( (*menubar), 1);

74 i‡(!
míub¨
) {

75 
	`Ârötf
 (
°dîr
, "U«bÀÜooˇã s∑˚ f‹ %s\n", 
«me
); 
	`exô
 (32);

77 
míub¨
->
funcs
 = 
MíuB¨Funcs
;

78 
míub¨
->
˘xt
 = ctxt;

80 
	`•rötf
 (
ªsour˚«me
, "%s.%s.background", 
¥og«me
, 
«me
);

81 
	`•rötf
 (
˛as¢ame
, "%s.background", 
¥og«me
);

82 
background
 = 
	`gëCﬁ‹
 (
dpy
, 
db
, 
ªsour˚«me
, 
˛as¢ame
, "conrnflowerblue");

84 
wö
 = 
	`XCª©eSim∂eWödow
 (
dpy
,

85 
∑ª¡
,

86 
x
, 
y
,

87 
width
, 
height
,

89 
background
);

90 
	`XSñe˘I≈ut
 (
dpy
, 
wö
, 
Såu˘uªNŸifyMask
);

92 
	`XSaveC⁄ãxt
 (
dpy
, 
wö
, 
˘xt
, (
XPoöãr
)
míub¨
);

93 
	`XM≠Wödow
 (
dpy
, 
wö
);

95  
wö
;

96 
	}
}

106 
Wödow


107 
	$£tHñpBuâ⁄
 (
Di•œy
 *
dpy
, 
XC⁄ãxt
 
˘xt
, 
Wödow
 
wö
,

108 
Wödow
 
hñpBuâ⁄
, 
x
)

110 
MíuB¨
 *
mb
;

111 
Wödow
 
ﬁd
;

113 
	`XFödC⁄ãxt
 (
dpy
, 
wö
, 
˘xt
, (
XPoöãr
*)&
mb
);

115 
ﬁd
 = 
mb
->
hñpBuâ⁄
;

116 
mb
->
hñpBuâ⁄
 = helpButton;

117 
	`XMoveWödow
 (
dpy
, 
mb
->
hñpBuâ⁄
, 
x
, 0);

119  
ﬁd
;

120 
	}
}

122 
Funcs
 
	g_MíuB¨Funcs
 = {

123 
míub¨C⁄figuªNŸify
,

124 
NULL
,

125 
NULL
,

126 
NULL
,

127 
NULL
,

128 
NULL


130 
Funcs
 *
	gMíuB¨Funcs
 = &
_MíuB¨Funcs
;

	@menubar.h

18 #i‚de‡
_MENUBAR_H_


19 
	#_MENUBAR_H_


	)

21 
MíuB¨
 
	tMíuB¨
;

22 
	sMíuB¨
 {

23 
Funcs
 *
	mfuncs
;

24 
Wödow
 
	mhñpBuâ⁄
;

25 
	mwidth
;

26 
XC⁄ãxt
 
	m˘xt
;

29 
Funcs
 *
MíuB¨Funcs
;

31 
Wödow
 
√wMíuB¨
 (*
¥og«me
, 
Di•œy
 *
dpy
, Wödow 
∑ª¡
,

32 
XrmD©aba£
 
db
, 
XC⁄ãxt
 
˘xt
, *
«me
,

33 
x
, 
y
, 
width
, 
height
);

35 
Wödow
 
£tHñpBuâ⁄
 (
Di•œy
 *
dpy
, 
XC⁄ãxt
 
˘xt
, Wödow 
mb
,

36 
Wödow
 
hñpBuâ⁄
, 
x
);

	@myMacro.h

18 #i‚de‡
_MYMACRO_H_


19 
	#_MYMACRO_H_


	)

21 
	#DEBUG_INFO_MSG
(
msg
Ë
	`¥ötf
("%s: %s : %s(),átÜine: %d\n", \

22 
msg
, 
__FILE__
, 
__func__
, 
__LINE__
)

	)

24 
	#UNUSED
(
ex¥
Ëdÿ{ ()”x¥); } 0)

	)

	@rose.h

18 #i‚de‡
__ROSE_H__


19 
	#__ROSE_H__


	)

21 
	#e_width
 70

	)

22 
	#e_height
 80

	)

23 
	ge_bôs
[] = {

86 
	#Píguö_width
 70

	)

87 
	#Píguö_height
 80

	)

88 
	gPíguö_bôs
[] = {

150 
	#buf_width
 32

	)

151 
	#buf_height
 32

	)

152 
	gbuf„r
[] = {

160 
	#Pí_32x32_width
 32

	)

161 
	#Pí_32x32_height
 32

	)

162 
	gPí_32x32_bôs
[] = {

	@xc2b.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<wch¨.h
>

21 
	~<loˇÀ.h
>

23 
	~"comm⁄.h
"

38 *
	$gë_v¨
 (*
p
)

40 *
v¨
 = 
	`gëív
 (
p
);

41 i‡(
v¨
)

42  (
v¨
);

44  
NULL
;

45 
	}
}

54 
	$XCh¨2bLí
 (
XCh¨2b
 *
°r
)

55 { 
i
 = 0;

56 
i
=0; 
°r
[i].
byã1
 || så[i].
byã2
; i++)

58  
i
;

59 
	}
}

69 
	$utf8toXCh¨2b
 (
XCh¨2b
 *
ouçut_r
, 
outsize
,

70 c⁄° *
öput
, 
öÀn
)

71 { 
i
, 
j
;

73 
i
=0, 
j
=0; i<
öÀn
 && j<
outsize
; i++)

75 
c
 = 
öput
[
i
];

76 i‡(
c
 < 128) {

77 
ouçut_r
[
j
].
byã1
 = 0;

78 
ouçut_r
[
j
].
byã2
 = 
c
; j++;

79 } i‡(
c
 < 0xC0) {

80 
	`Ârötf
 (
°dîr
, "NŸá UTF-8\n"); 
	`exô
 (32);

81 } 
c
&0xF0)

85 i‡(
öÀn
 < 
i
+1) {

86 
ouçut_r
[
j
].
byã2
 = 0;

87 
ouçut_r
[
j
].
byã1
 = 0;

88  
j
;

90 
ouçut_r
[
j
].
byã1
 = (
c
&0x1CË>> 2; 
i
++;

91 
ouçut_r
[
j
].
byã2
 = ((
c
&0x3Ë<<6Ë+ (
öput
[j]&0x3F); j++;

94 i‡(
öÀn
 < 
i
+2) {

95 
ouçut_r
[
j
].
byã2
 = 0;

96 
ouçut_r
[
j
].
byã1
 = 0;

97  
j
;

99 
i
++;

100 
ouçut_r
 [
j
].
byã1
 = ((
c
&0xFË<< 4Ë+ ((
öput
[
i
]&0x3C) >> 2);

101 
c
 = 
öput
[
i
]; i++;

102 
ouçut_r
 [
j
].
byã2
 = ((
c
&0x3Ë<< 6Ë+ (
öput
[
i
]&0x3F); j++;

105 
	`Ârötf
 (
°dîr
, "CannotÅranslate character\n");

106 
	`exô
 (33);

111 
ouçut_r
[
j
].
byã1
 = 0;

112 
ouçut_r
[
j
].
byã2
 = 0;

113  
j
;

114 
	}
}

123 
	$¥ötfXc
 (
XCh¨2b
 *
°r
)

125 
i
, 
Àn
 = 
	`XCh¨2bLí
 (
°r
);

126 
buf
[4];

128 
i
=0; i < 
Àn
; i++)

130 
ch
 = 
°r
[
i
].
byã1
 * 256 + så[i].
byã2
;

131 i‡(
ch
 < 128) {

132 
	`Âutc
 (
ch
, 
°dout
);

133 } i‡(
ch
 < (1<<11)) {

134 
buf
[0] = 0xB | (
ch
 >> 6);

135 
buf
[1] = 0XB | (
ch
 &0x3F);

136 
buf
[2] = 0;

137 
	`Âuts
 (
buf
, 
°dout
);

139 
buf
[0] = 0xB | (
ch
 >> 12);

140 
buf
[1] = 0xB | ((
ch
 >> 6) &0x3F);

141 
buf
[2] = 0xB | (
ch
 &0x3F);

142 
buf
[3] = 0;

143 
	`Âuts
 (
buf
, 
°dout
);

146 
	}
}

	@/usr/include/X11/Xatom.h

1 #i‚de‡
XATOM_H


2 
	#XATOM_H
 1

	)

9 
	#XA_PRIMARY
 ((
Atom
Ë1)

	)

10 
	#XA_SECONDARY
 ((
Atom
Ë2)

	)

11 
	#XA_ARC
 ((
Atom
Ë3)

	)

12 
	#XA_ATOM
 ((
Atom
Ë4)

	)

13 
	#XA_BITMAP
 ((
Atom
Ë5)

	)

14 
	#XA_CARDINAL
 ((
Atom
Ë6)

	)

15 
	#XA_COLORMAP
 ((
Atom
Ë7)

	)

16 
	#XA_CURSOR
 ((
Atom
Ë8)

	)

17 
	#XA_CUT_BUFFER0
 ((
Atom
Ë9)

	)

18 
	#XA_CUT_BUFFER1
 ((
Atom
Ë10)

	)

19 
	#XA_CUT_BUFFER2
 ((
Atom
Ë11)

	)

20 
	#XA_CUT_BUFFER3
 ((
Atom
Ë12)

	)

21 
	#XA_CUT_BUFFER4
 ((
Atom
Ë13)

	)

22 
	#XA_CUT_BUFFER5
 ((
Atom
Ë14)

	)

23 
	#XA_CUT_BUFFER6
 ((
Atom
Ë15)

	)

24 
	#XA_CUT_BUFFER7
 ((
Atom
Ë16)

	)

25 
	#XA_DRAWABLE
 ((
Atom
Ë17)

	)

26 
	#XA_FONT
 ((
Atom
Ë18)

	)

27 
	#XA_INTEGER
 ((
Atom
Ë19)

	)

28 
	#XA_PIXMAP
 ((
Atom
Ë20)

	)

29 
	#XA_POINT
 ((
Atom
Ë21)

	)

30 
	#XA_RECTANGLE
 ((
Atom
Ë22)

	)

31 
	#XA_RESOURCE_MANAGER
 ((
Atom
Ë23)

	)

32 
	#XA_RGB_COLOR_MAP
 ((
Atom
Ë24)

	)

33 
	#XA_RGB_BEST_MAP
 ((
Atom
Ë25)

	)

34 
	#XA_RGB_BLUE_MAP
 ((
Atom
Ë26)

	)

35 
	#XA_RGB_DEFAULT_MAP
 ((
Atom
Ë27)

	)

36 
	#XA_RGB_GRAY_MAP
 ((
Atom
Ë28)

	)

37 
	#XA_RGB_GREEN_MAP
 ((
Atom
Ë29)

	)

38 
	#XA_RGB_RED_MAP
 ((
Atom
Ë30)

	)

39 
	#XA_STRING
 ((
Atom
Ë31)

	)

40 
	#XA_VISUALID
 ((
Atom
Ë32)

	)

41 
	#XA_WINDOW
 ((
Atom
Ë33)

	)

42 
	#XA_WM_COMMAND
 ((
Atom
Ë34)

	)

43 
	#XA_WM_HINTS
 ((
Atom
Ë35)

	)

44 
	#XA_WM_CLIENT_MACHINE
 ((
Atom
Ë36)

	)

45 
	#XA_WM_ICON_NAME
 ((
Atom
Ë37)

	)

46 
	#XA_WM_ICON_SIZE
 ((
Atom
Ë38)

	)

47 
	#XA_WM_NAME
 ((
Atom
Ë39)

	)

48 
	#XA_WM_NORMAL_HINTS
 ((
Atom
Ë40)

	)

49 
	#XA_WM_SIZE_HINTS
 ((
Atom
Ë41)

	)

50 
	#XA_WM_ZOOM_HINTS
 ((
Atom
Ë42)

	)

51 
	#XA_MIN_SPACE
 ((
Atom
Ë43)

	)

52 
	#XA_NORM_SPACE
 ((
Atom
Ë44)

	)

53 
	#XA_MAX_SPACE
 ((
Atom
Ë45)

	)

54 
	#XA_END_SPACE
 ((
Atom
Ë46)

	)

55 
	#XA_SUPERSCRIPT_X
 ((
Atom
Ë47)

	)

56 
	#XA_SUPERSCRIPT_Y
 ((
Atom
Ë48)

	)

57 
	#XA_SUBSCRIPT_X
 ((
Atom
Ë49)

	)

58 
	#XA_SUBSCRIPT_Y
 ((
Atom
Ë50)

	)

59 
	#XA_UNDERLINE_POSITION
 ((
Atom
Ë51)

	)

60 
	#XA_UNDERLINE_THICKNESS
 ((
Atom
Ë52)

	)

61 
	#XA_STRIKEOUT_ASCENT
 ((
Atom
Ë53)

	)

62 
	#XA_STRIKEOUT_DESCENT
 ((
Atom
Ë54)

	)

63 
	#XA_ITALIC_ANGLE
 ((
Atom
Ë55)

	)

64 
	#XA_X_HEIGHT
 ((
Atom
Ë56)

	)

65 
	#XA_QUAD_WIDTH
 ((
Atom
Ë57)

	)

66 
	#XA_WEIGHT
 ((
Atom
Ë58)

	)

67 
	#XA_POINT_SIZE
 ((
Atom
Ë59)

	)

68 
	#XA_RESOLUTION
 ((
Atom
Ë60)

	)

69 
	#XA_COPYRIGHT
 ((
Atom
Ë61)

	)

70 
	#XA_NOTICE
 ((
Atom
Ë62)

	)

71 
	#XA_FONT_NAME
 ((
Atom
Ë63)

	)

72 
	#XA_FAMILY_NAME
 ((
Atom
Ë64)

	)

73 
	#XA_FULL_NAME
 ((
Atom
Ë65)

	)

74 
	#XA_CAP_HEIGHT
 ((
Atom
Ë66)

	)

75 
	#XA_WM_CLASS
 ((
Atom
Ë67)

	)

76 
	#XA_WM_TRANSIENT_FOR
 ((
Atom
Ë68)

	)

78 
	#XA_LAST_PREDEFINED
 ((
Atom
Ë68)

	)

	@/usr/include/X11/Xlib.h

33 #i‚de‡
_X11_XLIB_H_


34 
	#_X11_XLIB_H_


	)

36 
	#XlibS≥cifiˇti⁄Rñó£
 6

	)

38 
	~<sys/ty≥s.h
>

40 #i‡
deföed
(
__SCO__
Ë|| deföed(
__UNIXWARE__
)

41 
	~<°döt.h
>

44 
	~<X11/X.h
>

47 
	~<X11/Xfun˝rŸo.h
>

48 
	~<X11/Xosdefs.h
>

50 #i‚de‡
X_WCHAR


51 
	~<°ddef.h
>

53 #ifde‡
__UNIXOS2__


54 
	~<°dlib.h
>

57 
	twch¨_t
;

63 
_XmbÀn
(

64 *
°r
,

65 
Àn


70 
	#X_HAVE_UTF8_STRING
 1

	)

75 #ifde‡
__˛™g__


76 #¥agm®
˛™g
 
dügno°ic
 
push


77 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wpadded"

80 *
	tXPoöãr
;

82 
	#Boﬁ
 

	)

83 
	#Sètus
 

	)

84 
	#True
 1

	)

85 
	#FÆ£
 0

	)

87 
	#QueuedAÃódy
 0

	)

88 
	#QueuedA·îRódög
 1

	)

89 
	#QueuedA·îFlush
 2

	)

91 
	#C⁄√˘i⁄Numbî
(
dpy
Ë(((
_XPrivDi•œy
)(dpy))->
fd
)

	)

92 
	#RoŸWödow
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
roŸ
)

	)

93 
	#DeÁu…S¸ìn
(
dpy
Ë(((
_XPrivDi•œy
)(dpy))->
deÁu…_s¸ìn
)

	)

94 
	#DeÁu…RoŸWödow
(
dpy
Ë(
	`S¸ìnOfDi•œy
(dpy,
	`DeÁu…S¸ìn
(dpy))->
roŸ
)

	)

95 
	#DeÁu…VisuÆ
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
roŸ_visuÆ
)

	)

96 
	#DeÁu…GC
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
deÁu…_gc
)

	)

97 
	#BœckPixñ
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
bœck_pixñ
)

	)

98 
	#WhôePixñ
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
whôe_pixñ
)

	)

99 
	#AŒPœ√s
 (()~0L)

	)

100 
	#QLígth
(
dpy
Ë(((
_XPrivDi•œy
)(dpy))->
qÀn
)

	)

101 
	#Di•œyWidth
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
width
)

	)

102 
	#Di•œyHeight
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
height
)

	)

103 
	#Di•œyWidthMM
(
dpy
, 
s¸
)(
	`S¸ìnOfDi•œy
(dpy,s¸)->
mwidth
)

	)

104 
	#Di•œyHeightMM
(
dpy
, 
s¸
)(
	`S¸ìnOfDi•œy
(dpy,s¸)->
mheight
)

	)

105 
	#Di•œyPœ√s
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
roŸ_dïth
)

	)

106 
	#Di•œyCñls
(
dpy
, 
s¸
Ë(
	`DeÁu…VisuÆ
(dpy,s¸)->
m≠_íåõs
)

	)

107 
	#S¸ìnCou¡
(
dpy
Ë(((
_XPrivDi•œy
)(dpy))->
ns¸ìns
)

	)

108 
	#SîvîVíd‹
(
dpy
Ë(((
_XPrivDi•œy
)(dpy))->
víd‹
)

	)

109 
	#PrŸocﬁVîsi⁄
(
dpy
Ë(((
_XPrivDi•œy
)(dpy))->
¥Ÿo_maj‹_vîsi⁄
)

	)

110 
	#PrŸocﬁRevisi⁄
(
dpy
Ë(((
_XPrivDi•œy
)(dpy))->
¥Ÿo_mö‹_vîsi⁄
)

	)

111 
	#Víd‹Rñó£
(
dpy
Ë(((
_XPrivDi•œy
)(dpy))->
ªÀa£
)

	)

112 
	#Di•œySåög
(
dpy
Ë(((
_XPrivDi•œy
)(dpy))->
di•œy_«me
)

	)

113 
	#DeÁu…Dïth
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
roŸ_dïth
)

	)

114 
	#DeÁu…Cﬁ‹m≠
(
dpy
, 
s¸
)(
	`S¸ìnOfDi•œy
(dpy,s¸)->
cm≠
)

	)

115 
	#Bôm≠Unô
(
dpy
Ë(((
_XPrivDi•œy
)(dpy))->
bôm≠_unô
)

	)

116 
	#Bôm≠BôOrdî
(
dpy
Ë(((
_XPrivDi•œy
)(dpy))->
bôm≠_bô_‹dî
)

	)

117 
	#Bôm≠Pad
(
dpy
Ë(((
_XPrivDi•œy
)(dpy))->
bôm≠_∑d
)

	)

118 
	#ImageByãOrdî
(
dpy
Ë(((
_XPrivDi•œy
)(dpy))->
byã_‹dî
)

	)

119 
	#NextReque°
(
dpy
Ë(((
_XPrivDi•œy
)(dpy))->
ªque°
 + 1)

	)

120 
	#La°KnownReque°Pro˚s£d
(
dpy
Ë(((
_XPrivDi•œy
)(dpy))->
œ°_ªque°_ªad
)

	)

123 
	#S¸ìnOfDi•œy
(
dpy
, 
s¸
)(&((
_XPrivDi•œy
)(dpy))->
s¸ìns
[s¸])

	)

124 
	#DeÁu…S¸ìnOfDi•œy
(
dpy
Ë
	`S¸ìnOfDi•œy
(dpy,
	`DeÁu…S¸ìn
(dpy))

	)

125 
	#Di•œyOfS¸ìn
(
s
Ë((s)->
di•œy
)

	)

126 
	#RoŸWödowOfS¸ìn
(
s
Ë((s)->
roŸ
)

	)

127 
	#BœckPixñOfS¸ìn
(
s
Ë((s)->
bœck_pixñ
)

	)

128 
	#WhôePixñOfS¸ìn
(
s
Ë((s)->
whôe_pixñ
)

	)

129 
	#DeÁu…Cﬁ‹m≠OfS¸ìn
(
s
)((s)->
cm≠
)

	)

130 
	#DeÁu…DïthOfS¸ìn
(
s
Ë((s)->
roŸ_dïth
)

	)

131 
	#DeÁu…GCOfS¸ìn
(
s
Ë((s)->
deÁu…_gc
)

	)

132 
	#DeÁu…VisuÆOfS¸ìn
(
s
)((s)->
roŸ_visuÆ
)

	)

133 
	#WidthOfS¸ìn
(
s
Ë((s)->
width
)

	)

134 
	#HeightOfS¸ìn
(
s
Ë((s)->
height
)

	)

135 
	#WidthMMOfS¸ìn
(
s
Ë((s)->
mwidth
)

	)

136 
	#HeightMMOfS¸ìn
(
s
Ë((s)->
mheight
)

	)

137 
	#Pœ√sOfS¸ìn
(
s
Ë((s)->
roŸ_dïth
)

	)

138 
	#CñlsOfS¸ìn
(
s
Ë(
	`DeÁu…VisuÆOfS¸ìn
((s))->
m≠_íåõs
)

	)

139 
	#MöCm≠sOfS¸ìn
(
s
Ë((s)->
mö_m≠s
)

	)

140 
	#MaxCm≠sOfS¸ìn
(
s
Ë((s)->
max_m≠s
)

	)

141 
	#D€sSaveUndîs
(
s
Ë((s)->
ßve_undîs
)

	)

142 
	#D€sBackögSt‹e
(
s
Ë((s)->
backög_°‹e
)

	)

143 
	#EvítMaskOfS¸ìn
(
s
Ë((s)->
roŸ_öput_mask
)

	)

148 
	s_XExtD©a
 {

149 
	mnumbî
;

150 
_XExtD©a
 *
	m√xt
;

151 (*
	m‰ì_¥iv©e
)(

152 
_XExtD©a
 *
	mexãnsi⁄


154 
XPoöãr
 
	m¥iv©e_d©a
;

155 } 
	tXExtD©a
;

161 
	mexãnsi⁄
;

162 
	mmaj‹_›code
;

163 
	mfú°_evít
;

164 
	mfú°_îr‹
;

165 } 
	tXExtCodes
;

172 
	mdïth
;

173 
	mbôs_≥r_pixñ
;

174 
	msˇ∆öe_∑d
;

175 } 
	tXPixm≠F‹m©VÆues
;

182 
	mfun˘i⁄
;

183 
	m∂™e_mask
;

184 
	mf‹eground
;

185 
	mbackground
;

186 
	mlöe_width
;

187 
	mlöe_°yÀ
;

188 
	mˇp_°yÀ
;

190 
	mjoö_°yÀ
;

191 
	mfûl_°yÀ
;

193 
	mfûl_ruÀ
;

194 
	m¨c_mode
;

195 
Pixm≠
 
	mtûe
;

196 
Pixm≠
 
	m°ù∂e
;

197 
	mts_x_‹igö
;

198 
	mts_y_‹igö
;

199 
F⁄t
 
	mf⁄t
;

200 
	msubwödow_mode
;

201 
Boﬁ
 
	mgøphics_exposuªs
;

202 
	m˛ù_x_‹igö
;

203 
	m˛ù_y_‹igö
;

204 
Pixm≠
 
	m˛ù_mask
;

205 
	mdash_off£t
;

206 
	mdashes
;

207 } 
	tXGCVÆues
;

214 
	g_XGC


215 #ifde‡
	tXLIB_ILLEGAL_ACCESS


217 
XExtD©a
 *
	gext_d©a
;

218 
GC⁄ãxt
 
	ggid
;

222 *
	tGC
;

228 
XExtD©a
 *
	mext_d©a
;

229 
VisuÆID
 
	mvisuÆid
;

230 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

231 
	mc_˛ass
;

233 
	m˛ass
;

235 
	mªd_mask
, 
	mgªí_mask
, 
	mblue_mask
;

236 
	mbôs_≥r_rgb
;

237 
	mm≠_íåõs
;

238 } 
	tVisuÆ
;

244 
	mdïth
;

245 
	mnvisuÆs
;

246 
VisuÆ
 *
	mvisuÆs
;

247 } 
	tDïth
;

255 
	g_XDi•œy
;

258 
XExtD©a
 *
	mext_d©a
;

259 
_XDi•œy
 *
	mdi•œy
;

260 
Wödow
 
	mroŸ
;

261 
	mwidth
, 
	mheight
;

262 
	mmwidth
, 
	mmheight
;

263 
	mndïths
;

264 
Dïth
 *
	mdïths
;

265 
	mroŸ_dïth
;

266 
VisuÆ
 *
	mroŸ_visuÆ
;

267 
GC
 
	mdeÁu…_gc
;

268 
Cﬁ‹m≠
 
	mcm≠
;

269 
	mwhôe_pixñ
;

270 
	mbœck_pixñ
;

271 
	mmax_m≠s
, 
	mmö_m≠s
;

272 
	mbackög_°‹e
;

273 
Boﬁ
 
	mßve_undîs
;

274 
	mroŸ_öput_mask
;

275 } 
	tS¸ìn
;

281 
XExtD©a
 *
	mext_d©a
;

282 
	mdïth
;

283 
	mbôs_≥r_pixñ
;

284 
	msˇ∆öe_∑d
;

285 } 
	tS¸ìnF‹m©
;

291 
Pixm≠
 
	mbackground_pixm≠
;

292 
	mbackground_pixñ
;

293 
Pixm≠
 
	mb‹dî_pixm≠
;

294 
	mb‹dî_pixñ
;

295 
	mbô_gøvôy
;

296 
	mwö_gøvôy
;

297 
	mbackög_°‹e
;

298 
	mbackög_∂™es
;

299 
	mbackög_pixñ
;

300 
Boﬁ
 
	mßve_undî
;

301 
	mevít_mask
;

302 
	mdo_nŸ_¥›ag©e_mask
;

303 
Boﬁ
 
	movîride_ªdúe˘
;

304 
Cﬁ‹m≠
 
	mcﬁ‹m≠
;

305 
Curs‹
 
	mcurs‹
;

306 } 
	tXSëWödowAâribuãs
;

309 
	mx
, 
	my
;

310 
	mwidth
, 
	mheight
;

311 
	mb‹dî_width
;

312 
	mdïth
;

313 
VisuÆ
 *
	mvisuÆ
;

314 
Wödow
 
	mroŸ
;

315 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

316 
	mc_˛ass
;

318 
	m˛ass
;

320 
	mbô_gøvôy
;

321 
	mwö_gøvôy
;

322 
	mbackög_°‹e
;

323 
	mbackög_∂™es
;

324 
	mbackög_pixñ
;

325 
Boﬁ
 
	mßve_undî
;

326 
Cﬁ‹m≠
 
	mcﬁ‹m≠
;

327 
Boﬁ
 
	mm≠_ö°ÆÀd
;

328 
	mm≠_°©e
;

329 
	mÆl_evít_masks
;

330 
	myour_evít_mask
;

331 
	mdo_nŸ_¥›ag©e_mask
;

332 
Boﬁ
 
	movîride_ªdúe˘
;

333 
S¸ìn
 *
	ms¸ìn
;

334 } 
	tXWödowAâribuãs
;

342 
	mÁmûy
;

343 
	mÀngth
;

344 *
	maddªss
;

345 } 
	tXHo°Addªss
;

351 
	mty≥Àngth
;

352 
	mvÆuñígth
;

353 *
	mty≥
;

354 *
	mvÆue
;

355 } 
	tXSîvîI¡î¥ëedAddªss
;

360 
	s_XImage
 {

361 
	mwidth
, 
	mheight
;

362 
	mxoff£t
;

363 
	mf‹m©
;

364 *
	md©a
;

365 
	mbyã_‹dî
;

366 
	mbôm≠_unô
;

367 
	mbôm≠_bô_‹dî
;

368 
	mbôm≠_∑d
;

369 
	mdïth
;

370 
	mbyãs_≥r_löe
;

371 
	mbôs_≥r_pixñ
;

372 
	mªd_mask
;

373 
	mgªí_mask
;

374 
	mblue_mask
;

375 
XPoöãr
 
	mobd©a
;

376 
	sfuncs
 {

377 
	m_XImage
 *(*
	m¸óã_image
)(

378 
	m_XDi•œy
* ,

379 
	mVisuÆ
* ,

388 (*
	mde°roy_image
Ë(
	m_XImage
 *);

389 (*
	mgë_pixñ
Ë(
	m_XImage
 *, , );

390 (*
	mput_pixñ
Ë(
	m_XImage
 *, , , );

391 
	m_XImage
 *(*
	msub_image
)(_XImage *, , , , );

392 (*
	madd_pixñ
Ë(
	m_XImage
 *, );

393 } 
	mf
;

394 } 
	tXImage
;

400 
	mx
, 
	my
;

401 
	mwidth
, 
	mheight
;

402 
	mb‹dî_width
;

403 
Wödow
 
	msiblög
;

404 
	m°ack_mode
;

405 } 
	tXWödowCh™ges
;

411 
	mpixñ
;

412 
	mªd
, 
	mgªí
, 
	mblue
;

413 
	mÊags
;

414 
	m∑d
;

415 } 
	tXCﬁ‹
;

423 
	mx1
, 
	my1
, 
	mx2
, 
	my2
;

424 } 
	tXSegmít
;

427 
	mx
, 
	my
;

428 } 
	tXPoöt
;

431 
	mx
, 
	my
;

432 
	mwidth
, 
	mheight
;

433 } 
	tXRe˘™gÀ
;

436 
	mx
, 
	my
;

437 
	mwidth
, 
	mheight
;

438 
	m™gÀ1
, 
	m™gÀ2
;

439 } 
	tXArc
;

445 
	mkey_˛ick_≥r˚¡
;

446 
	mbñl_≥r˚¡
;

447 
	mbñl_pôch
;

448 
	mbñl_duøti⁄
;

449 
	mÀd
;

450 
	mÀd_mode
;

451 
	mkey
;

452 
	mauto_ª≥©_mode
;

453 } 
	tXKeybﬂrdC⁄åﬁ
;

458 
	mkey_˛ick_≥r˚¡
;

459 
	mbñl_≥r˚¡
;

460 
	mbñl_pôch
, 
	mbñl_duøti⁄
;

461 
	mÀd_mask
;

462 
	mglobÆ_auto_ª≥©
;

463 
	mauto_ª≥©s
[32];

464 } 
	tXKeybﬂrdSèã
;

469 
Time
 
	mtime
;

470 
	mx
, 
	my
;

471 } 
	tXTimeCo‹d
;

476 
	mmax_key≥rmod
;

477 
KeyCode
 *
	mmodifõrm≠
;

478 } 
	tXModifõrKeym≠
;

486 #i‚de‡
XLIB_ILLEGAL_ACCESS


487 
_XDi•œy
 
	tDi•œy
;

490 
	g_XPriv©e
;

491 
	g_XrmHashBuckëRec
;

494 #ifde‡
XLIB_ILLEGAL_ACCESS


495 
	t_XDi•œy


498 
XExtD©a
 *
	gext_d©a
;

499 
_XPriv©e
 *
	g¥iv©e1
;

500 
	gfd
;

501 
	g¥iv©e2
;

502 
	g¥Ÿo_maj‹_vîsi⁄
;

503 
	g¥Ÿo_mö‹_vîsi⁄
;

504 *
	gvíd‹
;

505 
XID
 
	g¥iv©e3
;

506 
XID
 
	g¥iv©e4
;

507 
XID
 
	g¥iv©e5
;

508 
	g¥iv©e6
;

509 
XID
 (*
ªsour˚_Æloc
)(

510 
	g_XDi•œy
*

512 
	gbyã_‹dî
;

513 
	gbôm≠_unô
;

514 
	gbôm≠_∑d
;

515 
	gbôm≠_bô_‹dî
;

516 
	gnf‹m©s
;

517 
S¸ìnF‹m©
 *
	gpixm≠_f‹m©
;

518 
	g¥iv©e8
;

519 
	gªÀa£
;

520 
_XPriv©e
 *
	g¥iv©e9
, *
	g¥iv©e10
;

521 
	gqÀn
;

522 
	gœ°_ªque°_ªad
;

523 
	gªque°
;

524 
XPoöãr
 
	g¥iv©e11
;

525 
XPoöãr
 
	g¥iv©e12
;

526 
XPoöãr
 
	g¥iv©e13
;

527 
XPoöãr
 
	g¥iv©e14
;

528 
	gmax_ªque°_size
;

529 
_XrmHashBuckëRec
 *
	gdb
;

530 (*
	g¥iv©e15
)(

531 
	g_XDi•œy
*

533 *
	gdi•œy_«me
;

534 
	gdeÁu…_s¸ìn
;

535 
	gns¸ìns
;

536 
S¸ìn
 *
	gs¸ìns
;

537 
	gmŸi⁄_buf„r
;

538 
	g¥iv©e16
;

539 
	gmö_keycode
;

540 
	gmax_keycode
;

541 
XPoöãr
 
	g¥iv©e17
;

542 
XPoöãr
 
	g¥iv©e18
;

543 
	g¥iv©e19
;

544 *
	gxdeÁu…s
;

547 #ifde‡
	tXLIB_ILLEGAL_ACCESS


548 
	tDi•œy
,

550 *
	t_XPrivDi•œy
;

552 #unde‡
_XEVENT_


553 #i‚de‡
_XEVENT_


558 
	mty≥
;

559 
	m£rül
;

560 
Boﬁ
 
	m£nd_evít
;

561 
Di•œy
 *
	mdi•œy
;

562 
Wödow
 
	mwödow
;

563 
Wödow
 
	mroŸ
;

564 
Wödow
 
	msubwödow
;

565 
Time
 
	mtime
;

566 
	mx
, 
	my
;

567 
	mx_roŸ
, 
	my_roŸ
;

568 
	m°©e
;

569 
	mkeycode
;

570 
Boﬁ
 
	mßme_s¸ìn
;

571 } 
	tXKeyEvít
;

572 
XKeyEvít
 
	tXKeyPªs£dEvít
;

573 
XKeyEvít
 
	tXKeyRñó£dEvít
;

576 
	mty≥
;

577 
	m£rül
;

578 
Boﬁ
 
	m£nd_evít
;

579 
Di•œy
 *
	mdi•œy
;

580 
Wödow
 
	mwödow
;

581 
Wödow
 
	mroŸ
;

582 
Wödow
 
	msubwödow
;

583 
Time
 
	mtime
;

584 
	mx
, 
	my
;

585 
	mx_roŸ
, 
	my_roŸ
;

586 
	m°©e
;

587 
	mbuâ⁄
;

588 
Boﬁ
 
	mßme_s¸ìn
;

589 } 
	tXBuâ⁄Evít
;

590 
XBuâ⁄Evít
 
	tXBuâ⁄Pªs£dEvít
;

591 
XBuâ⁄Evít
 
	tXBuâ⁄Rñó£dEvít
;

594 
	mty≥
;

595 
	m£rül
;

596 
Boﬁ
 
	m£nd_evít
;

597 
Di•œy
 *
	mdi•œy
;

598 
Wödow
 
	mwödow
;

599 
Wödow
 
	mroŸ
;

600 
Wödow
 
	msubwödow
;

601 
Time
 
	mtime
;

602 
	mx
, 
	my
;

603 
	mx_roŸ
, 
	my_roŸ
;

604 
	m°©e
;

605 
	mis_höt
;

606 
Boﬁ
 
	mßme_s¸ìn
;

607 } 
	tXMŸi⁄Evít
;

608 
XMŸi⁄Evít
 
	tXPoöãrMovedEvít
;

611 
	mty≥
;

612 
	m£rül
;

613 
Boﬁ
 
	m£nd_evít
;

614 
Di•œy
 *
	mdi•œy
;

615 
Wödow
 
	mwödow
;

616 
Wödow
 
	mroŸ
;

617 
Wödow
 
	msubwödow
;

618 
Time
 
	mtime
;

619 
	mx
, 
	my
;

620 
	mx_roŸ
, 
	my_roŸ
;

621 
	mmode
;

622 
	mdëaû
;

627 
Boﬁ
 
	mßme_s¸ìn
;

628 
Boﬁ
 
	mfocus
;

629 
	m°©e
;

630 } 
	tXCrossögEvít
;

631 
XCrossögEvít
 
	tXE¡îWödowEvít
;

632 
XCrossögEvít
 
	tXLóveWödowEvít
;

635 
	mty≥
;

636 
	m£rül
;

637 
Boﬁ
 
	m£nd_evít
;

638 
Di•œy
 *
	mdi•œy
;

639 
Wödow
 
	mwödow
;

640 
	mmode
;

642 
	mdëaû
;

648 } 
	tXFocusCh™geEvít
;

649 
XFocusCh™geEvít
 
	tXFocusInEvít
;

650 
XFocusCh™geEvít
 
	tXFocusOutEvít
;

654 
	mty≥
;

655 
	m£rül
;

656 
Boﬁ
 
	m£nd_evít
;

657 
Di•œy
 *
	mdi•œy
;

658 
Wödow
 
	mwödow
;

659 
	mkey_ve˘‹
[32];

660 } 
	tXKeym≠Evít
;

663 
	mty≥
;

664 
	m£rül
;

665 
Boﬁ
 
	m£nd_evít
;

666 
Di•œy
 *
	mdi•œy
;

667 
Wödow
 
	mwödow
;

668 
	mx
, 
	my
;

669 
	mwidth
, 
	mheight
;

670 
	mcou¡
;

671 } 
	tXExpo£Evít
;

674 
	mty≥
;

675 
	m£rül
;

676 
Boﬁ
 
	m£nd_evít
;

677 
Di•œy
 *
	mdi•œy
;

678 
DøwabÀ
 
	mdøwabÀ
;

679 
	mx
, 
	my
;

680 
	mwidth
, 
	mheight
;

681 
	mcou¡
;

682 
	mmaj‹_code
;

683 
	mmö‹_code
;

684 } 
	tXGøphicsExpo£Evít
;

687 
	mty≥
;

688 
	m£rül
;

689 
Boﬁ
 
	m£nd_evít
;

690 
Di•œy
 *
	mdi•œy
;

691 
DøwabÀ
 
	mdøwabÀ
;

692 
	mmaj‹_code
;

693 
	mmö‹_code
;

694 } 
	tXNoExpo£Evít
;

697 
	mty≥
;

698 
	m£rül
;

699 
Boﬁ
 
	m£nd_evít
;

700 
Di•œy
 *
	mdi•œy
;

701 
Wödow
 
	mwödow
;

702 
	m°©e
;

703 } 
	tXVisibûôyEvít
;

706 
	mty≥
;

707 
	m£rül
;

708 
Boﬁ
 
	m£nd_evít
;

709 
Di•œy
 *
	mdi•œy
;

710 
Wödow
 
	m∑ª¡
;

711 
Wödow
 
	mwödow
;

712 
	mx
, 
	my
;

713 
	mwidth
, 
	mheight
;

714 
	mb‹dî_width
;

715 
Boﬁ
 
	movîride_ªdúe˘
;

716 } 
	tXCª©eWödowEvít
;

719 
	mty≥
;

720 
	m£rül
;

721 
Boﬁ
 
	m£nd_evít
;

722 
Di•œy
 *
	mdi•œy
;

723 
Wödow
 
	mevít
;

724 
Wödow
 
	mwödow
;

725 } 
	tXDe°royWödowEvít
;

728 
	mty≥
;

729 
	m£rül
;

730 
Boﬁ
 
	m£nd_evít
;

731 
Di•œy
 *
	mdi•œy
;

732 
Wödow
 
	mevít
;

733 
Wödow
 
	mwödow
;

734 
Boﬁ
 
	m‰om_c⁄figuª
;

735 } 
	tXUnm≠Evít
;

738 
	mty≥
;

739 
	m£rül
;

740 
Boﬁ
 
	m£nd_evít
;

741 
Di•œy
 *
	mdi•œy
;

742 
Wödow
 
	mevít
;

743 
Wödow
 
	mwödow
;

744 
Boﬁ
 
	movîride_ªdúe˘
;

745 } 
	tXM≠Evít
;

748 
	mty≥
;

749 
	m£rül
;

750 
Boﬁ
 
	m£nd_evít
;

751 
Di•œy
 *
	mdi•œy
;

752 
Wödow
 
	m∑ª¡
;

753 
Wödow
 
	mwödow
;

754 } 
	tXM≠Reque°Evít
;

757 
	mty≥
;

758 
	m£rül
;

759 
Boﬁ
 
	m£nd_evít
;

760 
Di•œy
 *
	mdi•œy
;

761 
Wödow
 
	mevít
;

762 
Wödow
 
	mwödow
;

763 
Wödow
 
	m∑ª¡
;

764 
	mx
, 
	my
;

765 
Boﬁ
 
	movîride_ªdúe˘
;

766 } 
	tXRï¨ítEvít
;

769 
	mty≥
;

770 
	m£rül
;

771 
Boﬁ
 
	m£nd_evít
;

772 
Di•œy
 *
	mdi•œy
;

773 
Wödow
 
	mevít
;

774 
Wödow
 
	mwödow
;

775 
	mx
, 
	my
;

776 
	mwidth
, 
	mheight
;

777 
	mb‹dî_width
;

778 
Wödow
 
	mabove
;

779 
Boﬁ
 
	movîride_ªdúe˘
;

780 } 
	tXC⁄figuªEvít
;

783 
	mty≥
;

784 
	m£rül
;

785 
Boﬁ
 
	m£nd_evít
;

786 
Di•œy
 *
	mdi•œy
;

787 
Wödow
 
	mevít
;

788 
Wödow
 
	mwödow
;

789 
	mx
, 
	my
;

790 } 
	tXGøvôyEvít
;

793 
	mty≥
;

794 
	m£rül
;

795 
Boﬁ
 
	m£nd_evít
;

796 
Di•œy
 *
	mdi•œy
;

797 
Wödow
 
	mwödow
;

798 
	mwidth
, 
	mheight
;

799 } 
	tXResizeReque°Evít
;

802 
	mty≥
;

803 
	m£rül
;

804 
Boﬁ
 
	m£nd_evít
;

805 
Di•œy
 *
	mdi•œy
;

806 
Wödow
 
	m∑ª¡
;

807 
Wödow
 
	mwödow
;

808 
	mx
, 
	my
;

809 
	mwidth
, 
	mheight
;

810 
	mb‹dî_width
;

811 
Wödow
 
	mabove
;

812 
	mdëaû
;

813 
	mvÆue_mask
;

814 } 
	tXC⁄figuªReque°Evít
;

817 
	mty≥
;

818 
	m£rül
;

819 
Boﬁ
 
	m£nd_evít
;

820 
Di•œy
 *
	mdi•œy
;

821 
Wödow
 
	mevít
;

822 
Wödow
 
	mwödow
;

823 
	m∂a˚
;

824 } 
	tXCúcuœãEvít
;

827 
	mty≥
;

828 
	m£rül
;

829 
Boﬁ
 
	m£nd_evít
;

830 
Di•œy
 *
	mdi•œy
;

831 
Wödow
 
	m∑ª¡
;

832 
Wödow
 
	mwödow
;

833 
	m∂a˚
;

834 } 
	tXCúcuœãReque°Evít
;

837 
	mty≥
;

838 
	m£rül
;

839 
Boﬁ
 
	m£nd_evít
;

840 
Di•œy
 *
	mdi•œy
;

841 
Wödow
 
	mwödow
;

842 
Atom
 
	m©om
;

843 
Time
 
	mtime
;

844 
	m°©e
;

845 } 
	tXPr›îtyEvít
;

848 
	mty≥
;

849 
	m£rül
;

850 
Boﬁ
 
	m£nd_evít
;

851 
Di•œy
 *
	mdi•œy
;

852 
Wödow
 
	mwödow
;

853 
Atom
 
	m£À˘i⁄
;

854 
Time
 
	mtime
;

855 } 
	tXSñe˘i⁄CÀ¨Evít
;

858 
	mty≥
;

859 
	m£rül
;

860 
Boﬁ
 
	m£nd_evít
;

861 
Di•œy
 *
	mdi•œy
;

862 
Wödow
 
	mow√r
;

863 
Wödow
 
	mªque°‹
;

864 
Atom
 
	m£À˘i⁄
;

865 
Atom
 
	mèrgë
;

866 
Atom
 
	m¥›îty
;

867 
Time
 
	mtime
;

868 } 
	tXSñe˘i⁄Reque°Evít
;

871 
	mty≥
;

872 
	m£rül
;

873 
Boﬁ
 
	m£nd_evít
;

874 
Di•œy
 *
	mdi•œy
;

875 
Wödow
 
	mªque°‹
;

876 
Atom
 
	m£À˘i⁄
;

877 
Atom
 
	mèrgë
;

878 
Atom
 
	m¥›îty
;

879 
Time
 
	mtime
;

880 } 
	tXSñe˘i⁄Evít
;

883 
	mty≥
;

884 
	m£rül
;

885 
Boﬁ
 
	m£nd_evít
;

886 
Di•œy
 *
	mdi•œy
;

887 
Wödow
 
	mwödow
;

888 
Cﬁ‹m≠
 
	mcﬁ‹m≠
;

889 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

890 
Boﬁ
 
	mc_√w
;

892 
Boﬁ
 
	m√w
;

894 
	m°©e
;

895 } 
	tXCﬁ‹m≠Evít
;

898 
	mty≥
;

899 
	m£rül
;

900 
Boﬁ
 
	m£nd_evít
;

901 
Di•œy
 *
	mdi•œy
;

902 
Wödow
 
	mwödow
;

903 
Atom
 
	mmesßge_ty≥
;

904 
	mf‹m©
;

906 
	mb
[20];

907 
	ms
[10];

908 
	ml
[5];

909 } 
	md©a
;

910 } 
	tXClõ¡MesßgeEvít
;

913 
	mty≥
;

914 
	m£rül
;

915 
Boﬁ
 
	m£nd_evít
;

916 
Di•œy
 *
	mdi•œy
;

917 
Wödow
 
	mwödow
;

918 
	mªque°
;

920 
	mfú°_keycode
;

921 
	mcou¡
;

922 } 
	tXM≠pögEvít
;

925 
	mty≥
;

926 
Di•œy
 *
	mdi•œy
;

927 
XID
 
	mªsour˚id
;

928 
	m£rül
;

929 
	mîr‹_code
;

930 
	mªque°_code
;

931 
	mmö‹_code
;

932 } 
	tXEº‹Evít
;

935 
	mty≥
;

936 
	m£rül
;

937 
Boﬁ
 
	m£nd_evít
;

938 
Di•œy
 *
	mdi•œy
;

939 
Wödow
 
	mwödow
;

940 } 
	tXAnyEvít
;

950 
	mty≥
;

951 
	m£rül
;

952 
Boﬁ
 
	m£nd_evít
;

953 
Di•œy
 *
	mdi•œy
;

954 
	mexãnsi⁄
;

955 
	mevty≥
;

956 } 
	tXGíîicEvít
;

959 
	mty≥
;

960 
	m£rül
;

961 
Boﬁ
 
	m£nd_evít
;

962 
Di•œy
 *
	mdi•œy
;

963 
	mexãnsi⁄
;

964 
	mevty≥
;

965 
	mcookõ
;

966 *
	md©a
;

967 } 
	tXGíîicEvítCookõ
;

973 
	u_XEvít
 {

974 
	mty≥
;

975 
XAnyEvít
 
	mx™y
;

976 
XKeyEvít
 
	mxkey
;

977 
XBuâ⁄Evít
 
	mxbuâ⁄
;

978 
XMŸi⁄Evít
 
	mxmŸi⁄
;

979 
XCrossögEvít
 
	mx¸ossög
;

980 
XFocusCh™geEvít
 
	mxfocus
;

981 
XExpo£Evít
 
	mxexpo£
;

982 
XGøphicsExpo£Evít
 
	mxgøphic£xpo£
;

983 
XNoExpo£Evít
 
	mxn€xpo£
;

984 
XVisibûôyEvít
 
	mxvisibûôy
;

985 
XCª©eWödowEvít
 
	mx¸óãwödow
;

986 
XDe°royWödowEvít
 
	mxde°roywödow
;

987 
XUnm≠Evít
 
	mxunm≠
;

988 
XM≠Evít
 
	mxm≠
;

989 
XM≠Reque°Evít
 
	mxm≠ªque°
;

990 
XRï¨ítEvít
 
	mxª∑ª¡
;

991 
XC⁄figuªEvít
 
	mxc⁄figuª
;

992 
XGøvôyEvít
 
	mxgøvôy
;

993 
XResizeReque°Evít
 
	mxªsizîeque°
;

994 
XC⁄figuªReque°Evít
 
	mxc⁄figuªªque°
;

995 
XCúcuœãEvít
 
	mxcúcuœã
;

996 
XCúcuœãReque°Evít
 
	mxcúcuœãªque°
;

997 
XPr›îtyEvít
 
	mx¥›îty
;

998 
XSñe˘i⁄CÀ¨Evít
 
	mx£À˘i⁄˛ór
;

999 
XSñe˘i⁄Reque°Evít
 
	mx£À˘i⁄ªque°
;

1000 
XSñe˘i⁄Evít
 
	mx£À˘i⁄
;

1001 
XCﬁ‹m≠Evít
 
	mxcﬁ‹m≠
;

1002 
XClõ¡MesßgeEvít
 
	mx˛õ¡
;

1003 
XM≠pögEvít
 
	mxm≠pög
;

1004 
XEº‹Evít
 
	mxîr‹
;

1005 
XKeym≠Evít
 
	mxkeym≠
;

1006 
XGíîicEvít
 
	mxgíîic
;

1007 
XGíîicEvítCookõ
 
	mxcookõ
;

1008 
	m∑d
[24];

1009 } 
	tXEvít
;

1012 
	#XAŒocID
(
dpy
Ë((*((
_XPrivDi•œy
)(dpy))->
ªsour˚_Æloc
)((dpy)))

	)

1018 
	mlbórög
;

1019 
	mrbórög
;

1020 
	mwidth
;

1021 
	mas˚¡
;

1022 
	mdes˚¡
;

1023 
	m©åibuãs
;

1024 } 
	tXCh¨Såu˘
;

1031 
Atom
 
	m«me
;

1032 
	mˇrd32
;

1033 } 
	tXF⁄tPr›
;

1036 
XExtD©a
 *
	mext_d©a
;

1037 
F⁄t
 
	mfid
;

1038 
	mdúe˘i⁄
;

1039 
	mmö_ch¨_‹_byã2
;

1040 
	mmax_ch¨_‹_byã2
;

1041 
	mmö_byã1
;

1042 
	mmax_byã1
;

1043 
Boﬁ
 
	mÆl_ch¨s_exi°
;

1044 
	mdeÁu…_ch¨
;

1045 
	mn_¥›îtõs
;

1046 
XF⁄tPr›
 *
	m¥›îtõs
;

1047 
XCh¨Såu˘
 
	mmö_bounds
;

1048 
XCh¨Såu˘
 
	mmax_bounds
;

1049 
XCh¨Såu˘
 *
	m≥r_ch¨
;

1050 
	mas˚¡
;

1051 
	mdes˚¡
;

1052 } 
	tXF⁄tSåu˘
;

1058 *
	mch¨s
;

1059 
	mnch¨s
;

1060 
	mdñè
;

1061 
F⁄t
 
	mf⁄t
;

1062 } 
	tXTextIãm
;

1065 
	mbyã1
;

1066 
	mbyã2
;

1067 } 
	tXCh¨2b
;

1070 
XCh¨2b
 *
	mch¨s
;

1071 
	mnch¨s
;

1072 
	mdñè
;

1073 
F⁄t
 
	mf⁄t
;

1074 } 
	tXTextIãm16
;

1077 uni⁄ { 
Di•œy
 *
	mdi•œy
;

1078 
GC
 
	mgc
;

1079 
VisuÆ
 *
	mvisuÆ
;

1080 
S¸ìn
 *
	ms¸ìn
;

1081 
S¸ìnF‹m©
 *
	mpixm≠_f‹m©
;

1082 
XF⁄tSåu˘
 *
	mf⁄t
; } 
	tXED©aObje˘
;

1085 
XRe˘™gÀ
 
	mmax_ök_exã¡
;

1086 
XRe˘™gÀ
 
	mmax_logiˇl_exã¡
;

1087 } 
	tXF⁄tSëExã¡s
;

1093 
_XOM
 *
	tXOM
;

1094 
_XOC
 *
	tXOC
, *
	tXF⁄tSë
;

1097 *
	mch¨s
;

1098 
	mnch¨s
;

1099 
	mdñè
;

1100 
XF⁄tSë
 
	mf⁄t_£t
;

1101 } 
	tXmbTextIãm
;

1104 
wch¨_t
 *
	mch¨s
;

1105 
	mnch¨s
;

1106 
	mdñè
;

1107 
XF⁄tSë
 
	mf⁄t_£t
;

1108 } 
	tXwcTextIãm
;

1110 
	#XNRequúedCh¨Së
 "ªquúedCh¨Së"

	)

1111 
	#XNQuîyOrõ¡©i⁄
 "quîyOrõ¡©i⁄"

	)

1112 
	#XNBa£F⁄tName
 "ba£F⁄tName"

	)

1113 
	#XNOMAutom©ic
 "omAutom©ic"

	)

1114 
	#XNMissögCh¨Së
 "missögCh¨Së"

	)

1115 
	#XNDeÁu…Såög
 "deÁu…Såög"

	)

1116 
	#XNOrõ¡©i⁄
 "‹õ¡©i⁄"

	)

1117 
	#XNDúe˘i⁄ÆDïídítDøwög
 "dúe˘i⁄ÆDïídítDøwög"

	)

1118 
	#XNC⁄ãxtuÆDøwög
 "c⁄ãxtuÆDøwög"

	)

1119 
	#XNF⁄tInfo
 "f⁄tInfo"

	)

1122 
	mch¨£t_cou¡
;

1123 **
	mch¨£t_li°
;

1124 } 
	tXOMCh¨SëLi°
;

1127 
	mXOMOrõ¡©i⁄_LTR_TTB
,

1128 
	mXOMOrõ¡©i⁄_RTL_TTB
,

1129 
	mXOMOrõ¡©i⁄_TTB_LTR
,

1130 
	mXOMOrõ¡©i⁄_TTB_RTL
,

1131 
	mXOMOrõ¡©i⁄_C⁄ãxt


1132 } 
	tXOrõ¡©i⁄
;

1135 
	mnum_‹õ¡©i⁄
;

1136 
XOrõ¡©i⁄
 *
	m‹õ¡©i⁄
;

1137 } 
	tXOMOrõ¡©i⁄
;

1140 
	mnum_f⁄t
;

1141 
XF⁄tSåu˘
 **
	mf⁄t_°ru˘_li°
;

1142 **
	mf⁄t_«me_li°
;

1143 } 
	tXOMF⁄tInfo
;

1145 
_XIM
 *
	tXIM
;

1146 
_XIC
 *
	tXIC
;

1148 (*
	tXIMProc
)(

1149 
	tXIM
,

1150 
	tXPoöãr
,

1151 
	tXPoöãr


1154 
	$Boﬁ
 (*
	tXICProc
)(

1155 
	tXIC
,

1156 
	tXPoöãr
,

1157 
	tXPoöãr


1160 (*
	tXIDProc
)(

1161 
	tDi•œy
*,

1162 
	tXPoöãr
,

1163 
	tXPoöãr


1166 
	tXIMStyÀ
;

1169 
cou¡_°yÀs
;

1170 
XIMStyÀ
 *
suµ‹ãd_°yÀs
;

1171 } 
	tXIMStyÀs
;

1173 
	#XIMPªedôAªa
 0x0001L

	)

1174 
	#XIMPªedôCÆlbacks
 0x0002L

	)

1175 
	#XIMPªedôPosôi⁄
 0x0004L

	)

1176 
	#XIMPªedôNŸhög
 0x0008L

	)

1177 
	#XIMPªedôN⁄e
 0x0010L

	)

1178 
	#XIMSètusAªa
 0x0100L

	)

1179 
	#XIMSètusCÆlbacks
 0x0200L

	)

1180 
	#XIMSètusNŸhög
 0x0400L

	)

1181 
	#XIMSètusN⁄e
 0x0800L

	)

1183 
	#XNVaNe°edLi°
 "XNVaNe°edLi°"

	)

1184 
	#XNQuîyI≈utStyÀ
 "quîyI≈utStyÀ"

	)

1185 
	#XNClõ¡Wödow
 "˛õ¡Wödow"

	)

1186 
	#XNI≈utStyÀ
 "öputStyÀ"

	)

1187 
	#XNFocusWödow
 "focusWödow"

	)

1188 
	#XNResour˚Name
 "ªsour˚Name"

	)

1189 
	#XNResour˚Cœss
 "ªsour˚Cœss"

	)

1190 
	#XNGeomëryCÆlback
 "geomëryCÆlback"

	)

1191 
	#XNDe°royCÆlback
 "de°royCÆlback"

	)

1192 
	#XNFûãrEvíts
 "fûãrEvíts"

	)

1193 
	#XNPªedôSèπCÆlback
 "¥ìdôSèπCÆlback"

	)

1194 
	#XNPªedôD⁄eCÆlback
 "¥ìdôD⁄eCÆlback"

	)

1195 
	#XNPªedôDøwCÆlback
 "¥ìdôDøwCÆlback"

	)

1196 
	#XNPªedôC¨ëCÆlback
 "¥ìdôC¨ëCÆlback"

	)

1197 
	#XNPªedôSèãNŸifyCÆlback
 "¥ìdôSèãNŸifyCÆlback"

	)

1198 
	#XNPªedôAâribuãs
 "¥ìdôAâribuãs"

	)

1199 
	#XNSètusSèπCÆlback
 "°©usSèπCÆlback"

	)

1200 
	#XNSètusD⁄eCÆlback
 "°©usD⁄eCÆlback"

	)

1201 
	#XNSètusDøwCÆlback
 "°©usDøwCÆlback"

	)

1202 
	#XNSètusAâribuãs
 "°©usAâribuãs"

	)

1203 
	#XNAªa
 "¨ó"

	)

1204 
	#XNAªaNìded
 "¨óNìded"

	)

1205 
	#XNSpŸLoˇti⁄
 "•ŸLoˇti⁄"

	)

1206 
	#XNCﬁ‹m≠
 "cﬁ‹M≠"

	)

1207 
	#XNStdCﬁ‹m≠
 "°dCﬁ‹M≠"

	)

1208 
	#XNF‹eground
 "f‹eground"

	)

1209 
	#XNBackground
 "background"

	)

1210 
	#XNBackgroundPixm≠
 "backgroundPixm≠"

	)

1211 
	#XNF⁄tSë
 "f⁄tSë"

	)

1212 
	#XNLöeS∑˚
 "löeS∑˚"

	)

1213 
	#XNCurs‹
 "curs‹"

	)

1215 
	#XNQuîyIMVÆuesLi°
 "quîyIMVÆuesLi°"

	)

1216 
	#XNQuîyICVÆuesLi°
 "quîyICVÆuesLi°"

	)

1217 
	#XNVisibÀPosôi⁄
 "visibÀPosôi⁄"

	)

1218 
	#XNR6PªedôCÆlback
 "r6PªedôCÆlback"

	)

1219 
	#XNSåögC⁄vîsi⁄CÆlback
 "°rögC⁄vîsi⁄CÆlback"

	)

1220 
	#XNSåögC⁄vîsi⁄
 "°rögC⁄vîsi⁄"

	)

1221 
	#XNRe£tSèã
 "ª£tSèã"

	)

1222 
	#XNHŸKey
 "hŸKey"

	)

1223 
	#XNHŸKeySèã
 "hŸKeySèã"

	)

1224 
	#XNPªedôSèã
 "¥ìdôSèã"

	)

1225 
	#XNSï¨©‹ofNe°edLi°
 "£∑øt‹ofNe°edLi°"

	)

1227 
	#XBuf„rOvîÊow
 -1

	)

1228 
	#XLookupN⁄e
 1

	)

1229 
	#XLookupCh¨s
 2

	)

1230 
	#XLookupKeySym
 3

	)

1231 
	#XLookupBŸh
 4

	)

1233 *
	tXVaNe°edLi°
;

1236 
XPoöãr
 
˛õ¡_d©a
;

1237 
XIMProc
 
ˇŒback
;

1238 } 
	tXIMCÆlback
;

1241 
XPoöãr
 
˛õ¡_d©a
;

1242 
XICProc
 
ˇŒback
;

1243 } 
	tXICCÆlback
;

1245 
	tXIMFìdback
;

1247 
	#XIMRevî£
 1L

	)

1248 
	#XIMUndîlöe
 (1L<<1)

	)

1249 
	#XIMHighlight
 (1L<<2)

	)

1250 
	#XIMPrim¨y
 (1L<<5)

	)

1251 
	#XIMSec⁄d¨y
 (1L<<6)

	)

1252 
	#XIMTîtüry
 (1L<<7)

	)

1253 
	#XIMVisibÀToF‹w¨d
 (1L<<8)

	)

1254 
	#XIMVisibÀToBackw‹d
 (1L<<9)

	)

1255 
	#XIMVisibÀToCíãr
 (1L<<10)

	)

1257 
	s_XIMText
 {

1258 
Àngth
;

1259 
XIMFìdback
 *
„edback
;

1260 
Boﬁ
 
ícodög_is_wch¨
;

1262 *
mu…i_byã
;

1263 
wch¨_t
 *
wide_ch¨
;

1264 } 
°rög
;

1265 } 
	tXIMText
;

1267 
	tXIMPªedôSèã
;

1269 
	#XIMPªedôUnKnown
 0L

	)

1270 
	#XIMPªedôE«bÀ
 1L

	)

1271 
	#XIMPªedôDißbÀ
 (1L<<1)

	)

1273 
	s_XIMPªedôSèãNŸifyCÆlbackSåu˘
 {

1274 
XIMPªedôSèã
 
°©e
;

1275 } 
	tXIMPªedôSèãNŸifyCÆlbackSåu˘
;

1277 
	tXIMRe£tSèã
;

1279 
	#XIMInôülSèã
 1L

	)

1280 
	#XIMPª£rveSèã
 (1L<<1)

	)

1282 
	tXIMSåögC⁄vîsi⁄Fìdback
;

1284 
	#XIMSåögC⁄vîsi⁄Le·Edge
 (0x00000001)

	)

1285 
	#XIMSåögC⁄vîsi⁄RightEdge
 (0x00000002)

	)

1286 
	#XIMSåögC⁄vîsi⁄T›Edge
 (0x00000004)

	)

1287 
	#XIMSåögC⁄vîsi⁄BŸtomEdge
 (0x00000008)

	)

1288 
	#XIMSåögC⁄vîsi⁄C⁄˚Æed
 (0x00000010)

	)

1289 
	#XIMSåögC⁄vîsi⁄Wøµed
 (0x00000020)

	)

1291 
	s_XIMSåögC⁄vîsi⁄Text
 {

1292 
Àngth
;

1293 
XIMSåögC⁄vîsi⁄Fìdback
 *
„edback
;

1294 
Boﬁ
 
ícodög_is_wch¨
;

1296 *
mbs
;

1297 
wch¨_t
 *
wcs
;

1298 } 
°rög
;

1299 } 
	tXIMSåögC⁄vîsi⁄Text
;

1301 
	tXIMSåögC⁄vîsi⁄Posôi⁄
;

1303 
	tXIMSåögC⁄vîsi⁄Ty≥
;

1305 
	#XIMSåögC⁄vîsi⁄Buf„r
 (0x0001)

	)

1306 
	#XIMSåögC⁄vîsi⁄Löe
 (0x0002)

	)

1307 
	#XIMSåögC⁄vîsi⁄W‹d
 (0x0003)

	)

1308 
	#XIMSåögC⁄vîsi⁄Ch¨
 (0x0004)

	)

1310 
	tXIMSåögC⁄vîsi⁄O≥øti⁄
;

1312 
	#XIMSåögC⁄vîsi⁄Sub°ôuti⁄
 (0x0001)

	)

1313 
	#XIMSåögC⁄vîsi⁄RërõvÆ
 (0x0002)

	)

1316 
XIMF‹w¨dCh¨
, 
XIMBackw¨dCh¨
,

1317 
XIMF‹w¨dW‹d
, 
XIMBackw¨dW‹d
,

1318 
XIMC¨ëUp
, 
XIMC¨ëDown
,

1319 
XIMNextLöe
, 
XIMPªviousLöe
,

1320 
XIMLöeSèπ
, 
XIMLöeEnd
,

1321 
XIMAbsﬁuãPosôi⁄
,

1322 
XIMD⁄tCh™ge


1323 } 
	tXIMC¨ëDúe˘i⁄
;

1325 
	s_XIMSåögC⁄vîsi⁄CÆlbackSåu˘
 {

1326 
XIMSåögC⁄vîsi⁄Posôi⁄
 
posôi⁄
;

1327 
XIMC¨ëDúe˘i⁄
 
dúe˘i⁄
;

1328 
XIMSåögC⁄vîsi⁄O≥øti⁄
 
›î©i⁄
;

1329 
Á˘‹
;

1330 
XIMSåögC⁄vîsi⁄Text
 *
ãxt
;

1331 } 
	tXIMSåögC⁄vîsi⁄CÆlbackSåu˘
;

1333 
	s_XIMPªedôDøwCÆlbackSåu˘
 {

1334 
ˇªt
;

1335 
chg_fú°
;

1336 
chg_Àngth
;

1337 
XIMText
 *
ãxt
;

1338 } 
	tXIMPªedôDøwCÆlbackSåu˘
;

1341 
XIMIsInvisibÀ
,

1342 
XIMIsPrim¨y
,

1343 
XIMIsSec⁄d¨y


1344 } 
	tXIMC¨ëStyÀ
;

1346 
	s_XIMPªedôC¨ëCÆlbackSåu˘
 {

1347 
posôi⁄
;

1348 
XIMC¨ëDúe˘i⁄
 
dúe˘i⁄
;

1349 
XIMC¨ëStyÀ
 
°yÀ
;

1350 } 
	tXIMPªedôC¨ëCÆlbackSåu˘
;

1353 
XIMTextTy≥
,

1354 
XIMBôm≠Ty≥


1355 } 
	tXIMSètusD©aTy≥
;

1357 
	s_XIMSètusDøwCÆlbackSåu˘
 {

1358 
XIMSètusD©aTy≥
 
ty≥
;

1360 
XIMText
 *
ãxt
;

1361 
Pixm≠
 
bôm≠
;

1362 } 
d©a
;

1363 } 
	tXIMSètusDøwCÆlbackSåu˘
;

1365 
	s_XIMHŸKeyTriggî
 {

1366 
KeySym
 
keysym
;

1367 
modifõr
;

1368 
modifõr_mask
;

1369 } 
	tXIMHŸKeyTriggî
;

1371 
	s_XIMHŸKeyTriggîs
 {

1372 
num_hŸ_key
;

1373 
XIMHŸKeyTriggî
 *
key
;

1374 } 
	tXIMHŸKeyTriggîs
;

1376 
	tXIMHŸKeySèã
;

1378 
	#XIMHŸKeySèãON
 (0x0001L)

	)

1379 
	#XIMHŸKeySèãOFF
 (0x0002L)

	)

1382 
cou¡_vÆues
;

1383 **
suµ‹ãd_vÆues
;

1384 } 
	tXIMVÆuesLi°
;

1386 
_XFUNCPROTOBEGIN


1388 #i‡
	`deföed
(
WIN32
Ë&& !deföed(
_XLIBINT_
)

1389 
	#_Xdebug
 (*
_Xdebug_p
)

	)

1392 
_Xdebug
;

1394 
XF⁄tSåu˘
 *
	`XLﬂdQuîyF⁄t
(

1395 
Di•œy
* ,

1396 
_Xc⁄°
 *

1399 
XF⁄tSåu˘
 *
	`XQuîyF⁄t
(

1400 
Di•œy
* ,

1401 
XID


1405 
XTimeCo‹d
 *
	`XGëMŸi⁄Evíts
(

1406 
Di•œy
* ,

1407 
Wödow
 ,

1408 
Time
 ,

1409 
Time
 ,

1413 
XModifõrKeym≠
 *
	`XDñëeModifõrm≠E¡ry
(

1414 
XModifõrKeym≠
* ,

1415 #i‡
NìdWidePrŸŸy≥s


1418 
KeyCode
 ,

1423 
XModifõrKeym≠
 *
	`XGëModifõrM≠pög
(

1424 
Di•œy
*

1427 
XModifõrKeym≠
 *
	`XIn£πModifõrm≠E¡ry
(

1428 
XModifõrKeym≠
* ,

1429 #i‡
NìdWidePrŸŸy≥s


1432 
KeyCode
 ,

1437 
XModifõrKeym≠
 *
	`XNewModifõrm≠
(

1441 
XImage
 *
	`XCª©eImage
(

1442 
Di•œy
* ,

1443 
VisuÆ
* ,

1453 
Sètus
 
	`XInôImage
(

1454 
XImage
*

1456 
XImage
 *
	`XGëImage
(

1457 
Di•œy
* ,

1458 
DøwabÀ
 ,

1466 
XImage
 *
	`XGëSubImage
(

1467 
Di•œy
* ,

1468 
DøwabÀ
 ,

1475 
XImage
* ,

1483 
Di•œy
 *
	`XO≥nDi•œy
(

1484 
_Xc⁄°
 *

1487 
	`XrmInôülize
(

1491 *
	`XFëchByãs
(

1492 
Di•œy
* ,

1495 *
	`XFëchBuf„r
(

1496 
Di•œy
* ,

1500 *
	`XGëAtomName
(

1501 
Di•œy
* ,

1502 
Atom


1504 
Sètus
 
	`XGëAtomNames
(

1505 
Di•œy
* ,

1506 
Atom
* ,

1510 *
	`XGëDeÁu…
(

1511 
Di•œy
* ,

1512 
_Xc⁄°
 * ,

1513 
_Xc⁄°
 *

1515 *
	`XDi•œyName
(

1516 
_Xc⁄°
 *

1518 *
	`XKeysymToSåög
(

1519 
KeySym


1522 (*
	$XSynchr⁄ize
(

1523 
Di•œy
* ,

1524 
Boﬁ


1526 
Di•œy
*

1528 (*
	`XSëA·îFun˘i⁄
(

1529 
Di•œy
* ,

1531 
Di•œy
*

1534 
Di•œy
*

1536 
Atom
 
	`XI¡înAtom
(

1537 
Di•œy
* ,

1538 
_Xc⁄°
 * ,

1539 
Boﬁ


1541 
Sètus
 
	`XI¡înAtoms
(

1542 
Di•œy
* ,

1545 
Boﬁ
 ,

1546 
Atom
*

1548 
Cﬁ‹m≠
 
	`XC›yCﬁ‹m≠AndFªe
(

1549 
Di•œy
* ,

1550 
Cﬁ‹m≠


1552 
Cﬁ‹m≠
 
	`XCª©eCﬁ‹m≠
(

1553 
Di•œy
* ,

1554 
Wödow
 ,

1555 
VisuÆ
* ,

1558 
Curs‹
 
	`XCª©ePixm≠Curs‹
(

1559 
Di•œy
* ,

1560 
Pixm≠
 ,

1561 
Pixm≠
 ,

1562 
XCﬁ‹
* ,

1563 
XCﬁ‹
* ,

1567 
Curs‹
 
	`XCª©eGlyphCurs‹
(

1568 
Di•œy
* ,

1569 
F⁄t
 ,

1570 
F⁄t
 ,

1573 
XCﬁ‹
 
_Xc⁄°
 * ,

1574 
XCﬁ‹
 
_Xc⁄°
 *

1576 
Curs‹
 
	`XCª©eF⁄tCurs‹
(

1577 
Di•œy
* ,

1580 
F⁄t
 
	`XLﬂdF⁄t
(

1581 
Di•œy
* ,

1582 
_Xc⁄°
 *

1584 
GC
 
	`XCª©eGC
(

1585 
Di•œy
* ,

1586 
DøwabÀ
 ,

1588 
XGCVÆues
*

1590 
GC⁄ãxt
 
	`XGC⁄ãxtFromGC
(

1591 
GC


1593 
	`XFlushGC
(

1594 
Di•œy
* ,

1595 
GC


1597 
Pixm≠
 
	`XCª©ePixm≠
(

1598 
Di•œy
* ,

1599 
DøwabÀ
 ,

1604 
Pixm≠
 
	`XCª©eBôm≠FromD©a
(

1605 
Di•œy
* ,

1606 
DøwabÀ
 ,

1607 
_Xc⁄°
 * ,

1611 
Pixm≠
 
	`XCª©ePixm≠FromBôm≠D©a
(

1612 
Di•œy
* ,

1613 
DøwabÀ
 ,

1621 
Wödow
 
	`XCª©eSim∂eWödow
(

1622 
Di•œy
* ,

1623 
Wödow
 ,

1632 
Wödow
 
	`XGëSñe˘i⁄Ow√r
(

1633 
Di•œy
* ,

1634 
Atom


1636 
Wödow
 
	`XCª©eWödow
(

1637 
Di•œy
* ,

1638 
Wödow
 ,

1646 
VisuÆ
* ,

1648 
XSëWödowAâribuãs
*

1650 
Cﬁ‹m≠
 *
	`XLi°In°ÆÀdCﬁ‹m≠s
(

1651 
Di•œy
* ,

1652 
Wödow
 ,

1655 **
	`XLi°F⁄ts
(

1656 
Di•œy
* ,

1657 
_Xc⁄°
 * ,

1661 **
	`XLi°F⁄tsWôhInfo
(

1662 
Di•œy
* ,

1663 
_Xc⁄°
 * ,

1666 
XF⁄tSåu˘
**

1668 **
	`XGëF⁄tP©h
(

1669 
Di•œy
* ,

1672 **
	`XLi°Exãnsi⁄s
(

1673 
Di•œy
* ,

1676 
Atom
 *
	`XLi°Pr›îtõs
(

1677 
Di•œy
* ,

1678 
Wödow
 ,

1681 
XHo°Addªss
 *
	`XLi°Ho°s
(

1682 
Di•œy
* ,

1684 
Boﬁ
*

1686 
_X_DEPRECATED


1687 
KeySym
 
	`XKeycodeToKeysym
(

1688 
Di•œy
* ,

1689 #i‡
NìdWidePrŸŸy≥s


1692 
KeyCode
 ,

1696 
KeySym
 
	`XLookupKeysym
(

1697 
XKeyEvít
* ,

1700 
KeySym
 *
	`XGëKeybﬂrdM≠pög
(

1701 
Di•œy
* ,

1702 #i‡
NìdWidePrŸŸy≥s


1705 
KeyCode
 ,

1710 
KeySym
 
	`XSåögToKeysym
(

1711 
_Xc⁄°
 *

1713 
	`XMaxReque°Size
(

1714 
Di•œy
*

1716 
	`XExãndedMaxReque°Size
(

1717 
Di•œy
*

1719 *
	`XResour˚M™agîSåög
(

1720 
Di•œy
*

1722 *
	`XS¸ìnResour˚Såög
(

1723 
S¸ìn
*

1725 
	`XDi•œyMŸi⁄Buf„rSize
(

1726 
Di•œy
*

1728 
VisuÆID
 
	`XVisuÆIDFromVisuÆ
(

1729 
VisuÆ
*

1734 
Sètus
 
	`XInôThªads
(

1738 
	`XLockDi•œy
(

1739 
Di•œy
*

1742 
	`XU∆ockDi•œy
(

1743 
Di•œy
*

1748 
XExtCodes
 *
	`XInôExãnsi⁄
(

1749 
Di•œy
* ,

1750 
_Xc⁄°
 *

1753 
XExtCodes
 *
	`XAddExãnsi⁄
(

1754 
Di•œy
*

1756 
XExtD©a
 *
	`XFödOnExãnsi⁄Li°
(

1757 
XExtD©a
** ,

1760 
XExtD©a
 **
	`XEHódOfExãnsi⁄Li°
(

1761 
XED©aObje˘


1765 
Wödow
 
	`XRoŸWödow
(

1766 
Di•œy
* ,

1769 
Wödow
 
	`XDeÁu…RoŸWödow
(

1770 
Di•œy
*

1772 
Wödow
 
	`XRoŸWödowOfS¸ìn
(

1773 
S¸ìn
*

1775 
VisuÆ
 *
	`XDeÁu…VisuÆ
(

1776 
Di•œy
* ,

1779 
VisuÆ
 *
	`XDeÁu…VisuÆOfS¸ìn
(

1780 
S¸ìn
*

1782 
GC
 
	`XDeÁu…GC
(

1783 
Di•œy
* ,

1786 
GC
 
	`XDeÁu…GCOfS¸ìn
(

1787 
S¸ìn
*

1789 
	`XBœckPixñ
(

1790 
Di•œy
* ,

1793 
	`XWhôePixñ
(

1794 
Di•œy
* ,

1797 
	`XAŒPœ√s
(

1800 
	`XBœckPixñOfS¸ìn
(

1801 
S¸ìn
*

1803 
	`XWhôePixñOfS¸ìn
(

1804 
S¸ìn
*

1806 
	`XNextReque°
(

1807 
Di•œy
*

1809 
	`XLa°KnownReque°Pro˚s£d
(

1810 
Di•œy
*

1812 *
	`XSîvîVíd‹
(

1813 
Di•œy
*

1815 *
	`XDi•œySåög
(

1816 
Di•œy
*

1818 
Cﬁ‹m≠
 
	`XDeÁu…Cﬁ‹m≠
(

1819 
Di•œy
* ,

1822 
Cﬁ‹m≠
 
	`XDeÁu…Cﬁ‹m≠OfS¸ìn
(

1823 
S¸ìn
*

1825 
Di•œy
 *
	`XDi•œyOfS¸ìn
(

1826 
S¸ìn
*

1828 
S¸ìn
 *
	`XS¸ìnOfDi•œy
(

1829 
Di•œy
* ,

1832 
S¸ìn
 *
	`XDeÁu…S¸ìnOfDi•œy
(

1833 
Di•œy
*

1835 
	`XEvítMaskOfS¸ìn
(

1836 
S¸ìn
*

1839 
	`XS¸ìnNumbîOfS¸ìn
(

1840 
S¸ìn
*

1843 (*
	tXEº‹H™dÀr
) (

1844 
	tDi•œy
* ,

1845 
	tXEº‹Evít
*

1848 
XEº‹H™dÀr
 
	`XSëEº‹H™dÀr
 (

1849 
XEº‹H™dÀr


1853 (*
	tXIOEº‹H™dÀr
) (

1854 
	tDi•œy
*

1857 
XIOEº‹H™dÀr
 
	`XSëIOEº‹H™dÀr
 (

1858 
XIOEº‹H™dÀr


1861 (*
	tXIOEº‹ExôH™dÀr
) (

1862 
	tDi•œy
*,

1866 
	`XSëIOEº‹ExôH™dÀr
 (

1867 
Di•œy
*,

1868 
XIOEº‹ExôH™dÀr
,

1872 
XPixm≠F‹m©VÆues
 *
	`XLi°Pixm≠F‹m©s
(

1873 
Di•œy
* ,

1876 *
	`XLi°Dïths
(

1877 
Di•œy
* ,

1884 
Sètus
 
	`XRec⁄figuªWMWödow
(

1885 
Di•œy
* ,

1886 
Wödow
 ,

1889 
XWödowCh™ges
*

1892 
Sètus
 
	`XGëWMPrŸocﬁs
(

1893 
Di•œy
* ,

1894 
Wödow
 ,

1895 
Atom
** ,

1898 
Sètus
 
	`XSëWMPrŸocﬁs
(

1899 
Di•œy
* ,

1900 
Wödow
 ,

1901 
Atom
* ,

1904 
Sètus
 
	`XIc⁄ifyWödow
(

1905 
Di•œy
* ,

1906 
Wödow
 ,

1909 
Sètus
 
	`XWôhdøwWödow
(

1910 
Di•œy
* ,

1911 
Wödow
 ,

1914 
Sètus
 
	`XGëComm™d
(

1915 
Di•œy
* ,

1916 
Wödow
 ,

1920 
Sètus
 
	`XGëWMCﬁ‹m≠Wödows
(

1921 
Di•œy
* ,

1922 
Wödow
 ,

1923 
Wödow
** ,

1926 
Sètus
 
	`XSëWMCﬁ‹m≠Wödows
(

1927 
Di•œy
* ,

1928 
Wödow
 ,

1929 
Wödow
* ,

1932 
	`XFªeSåögLi°
(

1935 
	`XSëTønsõ¡F‹Höt
(

1936 
Di•œy
* ,

1937 
Wödow
 ,

1938 
Wödow


1943 
	`XA˘iv©eS¸ìnSavî
(

1944 
Di•œy
*

1947 
	`XAddHo°
(

1948 
Di•œy
* ,

1949 
XHo°Addªss
*

1952 
	`XAddHo°s
(

1953 
Di•œy
* ,

1954 
XHo°Addªss
* ,

1958 
	`XAddToExãnsi⁄Li°
(

1959 
_XExtD©a
** ,

1960 
XExtD©a
*

1963 
	`XAddToSaveSë
(

1964 
Di•œy
* ,

1965 
Wödow


1968 
Sètus
 
	`XAŒocCﬁ‹
(

1969 
Di•œy
* ,

1970 
Cﬁ‹m≠
 ,

1971 
XCﬁ‹
*

1974 
Sètus
 
	`XAŒocCﬁ‹Cñls
(

1975 
Di•œy
* ,

1976 
Cﬁ‹m≠
 ,

1977 
Boﬁ
 ,

1984 
Sètus
 
	`XAŒocCﬁ‹Pœ√s
(

1985 
Di•œy
* ,

1986 
Cﬁ‹m≠
 ,

1987 
Boﬁ
 ,

1998 
Sètus
 
	`XAŒocNamedCﬁ‹
(

1999 
Di•œy
* ,

2000 
Cﬁ‹m≠
 ,

2001 
_Xc⁄°
 * ,

2002 
XCﬁ‹
* ,

2003 
XCﬁ‹
*

2006 
	`XAŒowEvíts
(

2007 
Di•œy
* ,

2009 
Time


2012 
	`XAutoRïótOff
(

2013 
Di•œy
*

2016 
	`XAutoRïótOn
(

2017 
Di•œy
*

2020 
	`XBñl
(

2021 
Di•œy
* ,

2025 
	`XBôm≠BôOrdî
(

2026 
Di•œy
*

2029 
	`XBôm≠Pad
(

2030 
Di•œy
*

2033 
	`XBôm≠Unô
(

2034 
Di•œy
*

2037 
	`XCñlsOfS¸ìn
(

2038 
S¸ìn
*

2041 
	`XCh™geA˘ivePoöãrGøb
(

2042 
Di•œy
* ,

2044 
Curs‹
 ,

2045 
Time


2048 
	`XCh™geGC
(

2049 
Di•œy
* ,

2050 
GC
 ,

2052 
XGCVÆues
*

2055 
	`XCh™geKeybﬂrdC⁄åﬁ
(

2056 
Di•œy
* ,

2058 
XKeybﬂrdC⁄åﬁ
*

2061 
	`XCh™geKeybﬂrdM≠pög
(

2062 
Di•œy
* ,

2065 
KeySym
* ,

2069 
	`XCh™gePoöãrC⁄åﬁ
(

2070 
Di•œy
* ,

2071 
Boﬁ
 ,

2072 
Boﬁ
 ,

2078 
	`XCh™gePr›îty
(

2079 
Di•œy
* ,

2080 
Wödow
 ,

2081 
Atom
 ,

2082 
Atom
 ,

2085 
_Xc⁄°
 * ,

2089 
	`XCh™geSaveSë
(

2090 
Di•œy
* ,

2091 
Wödow
 ,

2095 
	`XCh™geWödowAâribuãs
(

2096 
Di•œy
* ,

2097 
Wödow
 ,

2099 
XSëWödowAâribuãs
*

2102 
Boﬁ
 
	`XCheckIfEvít
(

2103 
Di•œy
* ,

2104 
XEvít
* ,

2105 
	$Boﬁ
 (*) (

2106 
Di•œy
* ,

2107 
XEvít
* ,

2108 
XPoöãr


2110 
XPoöãr


2113 
Boﬁ
 
	`XCheckMaskEvít
(

2114 
Di•œy
* ,

2116 
XEvít
*

2119 
Boﬁ
 
	`XCheckTy≥dEvít
(

2120 
Di•œy
* ,

2122 
XEvít
*

2125 
Boﬁ
 
	`XCheckTy≥dWödowEvít
(

2126 
Di•œy
* ,

2127 
Wödow
 ,

2129 
XEvít
*

2132 
Boﬁ
 
	`XCheckWödowEvít
(

2133 
Di•œy
* ,

2134 
Wödow
 ,

2136 
XEvít
*

2139 
	`XCúcuœãSubwödows
(

2140 
Di•œy
* ,

2141 
Wödow
 ,

2145 
	`XCúcuœãSubwödowsDown
(

2146 
Di•œy
* ,

2147 
Wödow


2150 
	`XCúcuœãSubwödowsUp
(

2151 
Di•œy
* ,

2152 
Wödow


2155 
	`XCÀ¨Aªa
(

2156 
Di•œy
* ,

2157 
Wödow
 ,

2162 
Boﬁ


2165 
	`XCÀ¨Wödow
(

2166 
Di•œy
* ,

2167 
Wödow


2170 
	`XClo£Di•œy
(

2171 
Di•œy
*

2174 
	`XC⁄figuªWödow
(

2175 
Di•œy
* ,

2176 
Wödow
 ,

2178 
XWödowCh™ges
*

2181 
	`XC⁄√˘i⁄Numbî
(

2182 
Di•œy
*

2185 
	`XC⁄vîtSñe˘i⁄
(

2186 
Di•œy
* ,

2187 
Atom
 ,

2188 
Atom
 ,

2189 
Atom
 ,

2190 
Wödow
 ,

2191 
Time


2194 
	`XC›yAªa
(

2195 
Di•œy
* ,

2196 
DøwabÀ
 ,

2197 
DøwabÀ
 ,

2198 
GC
 ,

2207 
	`XC›yGC
(

2208 
Di•œy
* ,

2209 
GC
 ,

2211 
GC


2214 
	`XC›yPœ√
(

2215 
Di•œy
* ,

2216 
DøwabÀ
 ,

2217 
DøwabÀ
 ,

2218 
GC
 ,

2228 
	`XDeÁu…Dïth
(

2229 
Di•œy
* ,

2233 
	`XDeÁu…DïthOfS¸ìn
(

2234 
S¸ìn
*

2237 
	`XDeÁu…S¸ìn
(

2238 
Di•œy
*

2241 
	`XDeföeCurs‹
(

2242 
Di•œy
* ,

2243 
Wödow
 ,

2244 
Curs‹


2247 
	`XDñëePr›îty
(

2248 
Di•œy
* ,

2249 
Wödow
 ,

2250 
Atom


2253 
	`XDe°royWödow
(

2254 
Di•œy
* ,

2255 
Wödow


2258 
	`XDe°roySubwödows
(

2259 
Di•œy
* ,

2260 
Wödow


2263 
	`XD€sBackögSt‹e
(

2264 
S¸ìn
*

2267 
Boﬁ
 
	`XD€sSaveUndîs
(

2268 
S¸ìn
*

2271 
	`XDißbÀAc˚ssC⁄åﬁ
(

2272 
Di•œy
*

2276 
	`XDi•œyCñls
(

2277 
Di•œy
* ,

2281 
	`XDi•œyHeight
(

2282 
Di•œy
* ,

2286 
	`XDi•œyHeightMM
(

2287 
Di•œy
* ,

2291 
	`XDi•œyKeycodes
(

2292 
Di•œy
* ,

2297 
	`XDi•œyPœ√s
(

2298 
Di•œy
* ,

2302 
	`XDi•œyWidth
(

2303 
Di•œy
* ,

2307 
	`XDi•œyWidthMM
(

2308 
Di•œy
* ,

2312 
	`XDøwArc
(

2313 
Di•œy
* ,

2314 
DøwabÀ
 ,

2315 
GC
 ,

2324 
	`XDøwArcs
(

2325 
Di•œy
* ,

2326 
DøwabÀ
 ,

2327 
GC
 ,

2328 
XArc
* ,

2332 
	`XDøwImageSåög
(

2333 
Di•œy
* ,

2334 
DøwabÀ
 ,

2335 
GC
 ,

2338 
_Xc⁄°
 * ,

2342 
	`XDøwImageSåög16
(

2343 
Di•œy
* ,

2344 
DøwabÀ
 ,

2345 
GC
 ,

2348 
_Xc⁄°
 
XCh¨2b
* ,

2352 
	`XDøwLöe
(

2353 
Di•œy
* ,

2354 
DøwabÀ
 ,

2355 
GC
 ,

2362 
	`XDøwLöes
(

2363 
Di•œy
* ,

2364 
DøwabÀ
 ,

2365 
GC
 ,

2366 
XPoöt
* ,

2371 
	`XDøwPoöt
(

2372 
Di•œy
* ,

2373 
DøwabÀ
 ,

2374 
GC
 ,

2379 
	`XDøwPoöts
(

2380 
Di•œy
* ,

2381 
DøwabÀ
 ,

2382 
GC
 ,

2383 
XPoöt
* ,

2388 
	`XDøwRe˘™gÀ
(

2389 
Di•œy
* ,

2390 
DøwabÀ
 ,

2391 
GC
 ,

2398 
	`XDøwRe˘™gÀs
(

2399 
Di•œy
* ,

2400 
DøwabÀ
 ,

2401 
GC
 ,

2402 
XRe˘™gÀ
* ,

2406 
	`XDøwSegmíts
(

2407 
Di•œy
* ,

2408 
DøwabÀ
 ,

2409 
GC
 ,

2410 
XSegmít
* ,

2414 
	`XDøwSåög
(

2415 
Di•œy
* ,

2416 
DøwabÀ
 ,

2417 
GC
 ,

2420 
_Xc⁄°
 * ,

2424 
	`XDøwSåög16
(

2425 
Di•œy
* ,

2426 
DøwabÀ
 ,

2427 
GC
 ,

2430 
_Xc⁄°
 
XCh¨2b
* ,

2434 
	`XDøwText
(

2435 
Di•œy
* ,

2436 
DøwabÀ
 ,

2437 
GC
 ,

2440 
XTextIãm
* ,

2444 
	`XDøwText16
(

2445 
Di•œy
* ,

2446 
DøwabÀ
 ,

2447 
GC
 ,

2450 
XTextIãm16
* ,

2454 
	`XE«bÀAc˚ssC⁄åﬁ
(

2455 
Di•œy
*

2458 
	`XEvítsQueued
(

2459 
Di•œy
* ,

2463 
Sètus
 
	`XFëchName
(

2464 
Di•œy
* ,

2465 
Wödow
 ,

2469 
	`XFûlArc
(

2470 
Di•œy
* ,

2471 
DøwabÀ
 ,

2472 
GC
 ,

2481 
	`XFûlArcs
(

2482 
Di•œy
* ,

2483 
DøwabÀ
 ,

2484 
GC
 ,

2485 
XArc
* ,

2489 
	`XFûlPﬁyg⁄
(

2490 
Di•œy
* ,

2491 
DøwabÀ
 ,

2492 
GC
 ,

2493 
XPoöt
* ,

2499 
	`XFûlRe˘™gÀ
(

2500 
Di•œy
* ,

2501 
DøwabÀ
 ,

2502 
GC
 ,

2509 
	`XFûlRe˘™gÀs
(

2510 
Di•œy
* ,

2511 
DøwabÀ
 ,

2512 
GC
 ,

2513 
XRe˘™gÀ
* ,

2517 
	`XFlush
(

2518 
Di•œy
*

2521 
	`XF‹˚S¸ìnSavî
(

2522 
Di•œy
* ,

2526 
	`XFªe
(

2530 
	`XFªeCﬁ‹m≠
(

2531 
Di•œy
* ,

2532 
Cﬁ‹m≠


2535 
	`XFªeCﬁ‹s
(

2536 
Di•œy
* ,

2537 
Cﬁ‹m≠
 ,

2543 
	`XFªeCurs‹
(

2544 
Di•œy
* ,

2545 
Curs‹


2548 
	`XFªeExãnsi⁄Li°
(

2552 
	`XFªeF⁄t
(

2553 
Di•œy
* ,

2554 
XF⁄tSåu˘
*

2557 
	`XFªeF⁄tInfo
(

2559 
XF⁄tSåu˘
* ,

2563 
	`XFªeF⁄tNames
(

2567 
	`XFªeF⁄tP©h
(

2571 
	`XFªeGC
(

2572 
Di•œy
* ,

2573 
GC


2576 
	`XFªeModifõrm≠
(

2577 
XModifõrKeym≠
*

2580 
	`XFªePixm≠
(

2581 
Di•œy
* ,

2582 
Pixm≠


2585 
	`XGeomëry
(

2586 
Di•œy
* ,

2588 
_Xc⁄°
 * ,

2589 
_Xc⁄°
 * ,

2601 
	`XGëEº‹D©aba£Text
(

2602 
Di•œy
* ,

2603 
_Xc⁄°
 * ,

2604 
_Xc⁄°
 * ,

2605 
_Xc⁄°
 * ,

2610 
	`XGëEº‹Text
(

2611 
Di•œy
* ,

2617 
Boﬁ
 
	`XGëF⁄tPr›îty
(

2618 
XF⁄tSåu˘
* ,

2619 
Atom
 ,

2623 
Sètus
 
	`XGëGCVÆues
(

2624 
Di•œy
* ,

2625 
GC
 ,

2627 
XGCVÆues
*

2630 
Sètus
 
	`XGëGeomëry
(

2631 
Di•œy
* ,

2632 
DøwabÀ
 ,

2633 
Wödow
* ,

2642 
Sètus
 
	`XGëIc⁄Name
(

2643 
Di•œy
* ,

2644 
Wödow
 ,

2648 
	`XGëI≈utFocus
(

2649 
Di•œy
* ,

2650 
Wödow
* ,

2654 
	`XGëKeybﬂrdC⁄åﬁ
(

2655 
Di•œy
* ,

2656 
XKeybﬂrdSèã
*

2659 
	`XGëPoöãrC⁄åﬁ
(

2660 
Di•œy
* ,

2666 
	`XGëPoöãrM≠pög
(

2667 
Di•œy
* ,

2672 
	`XGëS¸ìnSavî
(

2673 
Di•œy
* ,

2680 
Sètus
 
	`XGëTønsõ¡F‹Höt
(

2681 
Di•œy
* ,

2682 
Wödow
 ,

2683 
Wödow
*

2686 
	`XGëWödowPr›îty
(

2687 
Di•œy
* ,

2688 
Wödow
 ,

2689 
Atom
 ,

2692 
Boﬁ
 ,

2693 
Atom
 ,

2694 
Atom
* ,

2701 
Sètus
 
	`XGëWödowAâribuãs
(

2702 
Di•œy
* ,

2703 
Wödow
 ,

2704 
XWödowAâribuãs
*

2707 
	`XGøbBuâ⁄
(

2708 
Di•œy
* ,

2711 
Wödow
 ,

2712 
Boﬁ
 ,

2716 
Wödow
 ,

2717 
Curs‹


2720 
	`XGøbKey
(

2721 
Di•œy
* ,

2724 
Wödow
 ,

2725 
Boﬁ
 ,

2730 
	`XGøbKeybﬂrd
(

2731 
Di•œy
* ,

2732 
Wödow
 ,

2733 
Boﬁ
 ,

2736 
Time


2739 
	`XGøbPoöãr
(

2740 
Di•œy
* ,

2741 
Wödow
 ,

2742 
Boﬁ
 ,

2746 
Wödow
 ,

2747 
Curs‹
 ,

2748 
Time


2751 
	`XGøbSîvî
(

2752 
Di•œy
*

2755 
	`XHeightMMOfS¸ìn
(

2756 
S¸ìn
*

2759 
	`XHeightOfS¸ìn
(

2760 
S¸ìn
*

2763 
	`XIfEvít
(

2764 
Di•œy
* ,

2765 
XEvít
* ,

2766 
	$Boﬁ
 (*) (

2767 
Di•œy
* ,

2768 
XEvít
* ,

2769 
XPoöãr


2771 
XPoöãr


2774 
	`XImageByãOrdî
(

2775 
Di•œy
*

2778 
	`XIn°ÆlCﬁ‹m≠
(

2779 
Di•œy
* ,

2780 
Cﬁ‹m≠


2783 
KeyCode
 
	`XKeysymToKeycode
(

2784 
Di•œy
* ,

2785 
KeySym


2788 
	`XKûlClõ¡
(

2789 
Di•œy
* ,

2790 
XID


2793 
Sètus
 
	`XLookupCﬁ‹
(

2794 
Di•œy
* ,

2795 
Cﬁ‹m≠
 ,

2796 
_Xc⁄°
 * ,

2797 
XCﬁ‹
* ,

2798 
XCﬁ‹
*

2801 
	`XLowîWödow
(

2802 
Di•œy
* ,

2803 
Wödow


2806 
	`XM≠Rai£d
(

2807 
Di•œy
* ,

2808 
Wödow


2811 
	`XM≠Subwödows
(

2812 
Di•œy
* ,

2813 
Wödow


2816 
	`XM≠Wödow
(

2817 
Di•œy
* ,

2818 
Wödow


2821 
	`XMaskEvít
(

2822 
Di•œy
* ,

2824 
XEvít
*

2827 
	`XMaxCm≠sOfS¸ìn
(

2828 
S¸ìn
*

2831 
	`XMöCm≠sOfS¸ìn
(

2832 
S¸ìn
*

2835 
	`XMoveResizeWödow
(

2836 
Di•œy
* ,

2837 
Wödow
 ,

2844 
	`XMoveWödow
(

2845 
Di•œy
* ,

2846 
Wödow
 ,

2851 
	`XNextEvít
(

2852 
Di•œy
* ,

2853 
XEvít
*

2856 
	`XNoOp
(

2857 
Di•œy
*

2860 
Sètus
 
	`XP¨£Cﬁ‹
(

2861 
Di•œy
* ,

2862 
Cﬁ‹m≠
 ,

2863 
_Xc⁄°
 * ,

2864 
XCﬁ‹
*

2867 
	`XP¨£Geomëry
(

2868 
_Xc⁄°
 * ,

2875 
	`XPìkEvít
(

2876 
Di•œy
* ,

2877 
XEvít
*

2880 
	`XPìkIfEvít
(

2881 
Di•œy
* ,

2882 
XEvít
* ,

2883 
	$Boﬁ
 (*) (

2884 
Di•œy
* ,

2885 
XEvít
* ,

2886 
XPoöãr


2888 
XPoöãr


2891 
	`XPídög
(

2892 
Di•œy
*

2895 
	`XPœ√sOfS¸ìn
(

2896 
S¸ìn
*

2899 
	`XPrŸocﬁRevisi⁄
(

2900 
Di•œy
*

2903 
	`XPrŸocﬁVîsi⁄
(

2904 
Di•œy
*

2908 
	`XPutBackEvít
(

2909 
Di•œy
* ,

2910 
XEvít
*

2913 
	`XPutImage
(

2914 
Di•œy
* ,

2915 
DøwabÀ
 ,

2916 
GC
 ,

2917 
XImage
* ,

2926 
	`XQLígth
(

2927 
Di•œy
*

2930 
Sètus
 
	`XQuîyBe°Curs‹
(

2931 
Di•œy
* ,

2932 
DøwabÀ
 ,

2939 
Sètus
 
	`XQuîyBe°Size
(

2940 
Di•œy
* ,

2942 
DøwabÀ
 ,

2949 
Sètus
 
	`XQuîyBe°Stù∂e
(

2950 
Di•œy
* ,

2951 
DøwabÀ
 ,

2958 
Sètus
 
	`XQuîyBe°Tûe
(

2959 
Di•œy
* ,

2960 
DøwabÀ
 ,

2967 
	`XQuîyCﬁ‹
(

2968 
Di•œy
* ,

2969 
Cﬁ‹m≠
 ,

2970 
XCﬁ‹
*

2973 
	`XQuîyCﬁ‹s
(

2974 
Di•œy
* ,

2975 
Cﬁ‹m≠
 ,

2976 
XCﬁ‹
* ,

2980 
Boﬁ
 
	`XQuîyExãnsi⁄
(

2981 
Di•œy
* ,

2982 
_Xc⁄°
 * ,

2988 
	`XQuîyKeym≠
(

2989 
Di•œy
* ,

2993 
Boﬁ
 
	`XQuîyPoöãr
(

2994 
Di•œy
* ,

2995 
Wödow
 ,

2996 
Wödow
* ,

2997 
Wödow
* ,

3005 
	`XQuîyTextExã¡s
(

3006 
Di•œy
* ,

3007 
XID
 ,

3008 
_Xc⁄°
 * ,

3013 
XCh¨Såu˘
*

3016 
	`XQuîyTextExã¡s16
(

3017 
Di•œy
* ,

3018 
XID
 ,

3019 
_Xc⁄°
 
XCh¨2b
* ,

3024 
XCh¨Såu˘
*

3027 
Sètus
 
	`XQuîyTªe
(

3028 
Di•œy
* ,

3029 
Wödow
 ,

3030 
Wödow
* ,

3031 
Wödow
* ,

3032 
Wödow
** ,

3036 
	`XRai£Wödow
(

3037 
Di•œy
* ,

3038 
Wödow


3041 
	`XRódBôm≠Fûe
(

3042 
Di•œy
* ,

3043 
DøwabÀ
 ,

3044 
_Xc⁄°
 * ,

3047 
Pixm≠
* ,

3052 
	`XRódBôm≠FûeD©a
(

3053 
_Xc⁄°
 * ,

3061 
	`XRebödKeysym
(

3062 
Di•œy
* ,

3063 
KeySym
 ,

3064 
KeySym
* ,

3066 
_Xc⁄°
 * ,

3070 
	`XRecﬁ‹Curs‹
(

3071 
Di•œy
* ,

3072 
Curs‹
 ,

3073 
XCﬁ‹
* ,

3074 
XCﬁ‹
*

3077 
	`XRe‰eshKeybﬂrdM≠pög
(

3078 
XM≠pögEvít
*

3081 
	`XRemoveFromSaveSë
(

3082 
Di•œy
* ,

3083 
Wödow


3086 
	`XRemoveHo°
(

3087 
Di•œy
* ,

3088 
XHo°Addªss
*

3091 
	`XRemoveHo°s
(

3092 
Di•œy
* ,

3093 
XHo°Addªss
* ,

3097 
	`XRï¨ítWödow
(

3098 
Di•œy
* ,

3099 
Wödow
 ,

3100 
Wödow
 ,

3105 
	`XRe£tS¸ìnSavî
(

3106 
Di•œy
*

3109 
	`XResizeWödow
(

3110 
Di•œy
* ,

3111 
Wödow
 ,

3116 
	`XRe°ackWödows
(

3117 
Di•œy
* ,

3118 
Wödow
* ,

3122 
	`XRŸ©eBuf„rs
(

3123 
Di•œy
* ,

3127 
	`XRŸ©eWödowPr›îtõs
(

3128 
Di•œy
* ,

3129 
Wödow
 ,

3130 
Atom
* ,

3135 
	`XS¸ìnCou¡
(

3136 
Di•œy
*

3139 
	`XSñe˘I≈ut
(

3140 
Di•œy
* ,

3141 
Wödow
 ,

3145 
Sètus
 
	`XSídEvít
(

3146 
Di•œy
* ,

3147 
Wödow
 ,

3148 
Boﬁ
 ,

3150 
XEvít
*

3153 
	`XSëAc˚ssC⁄åﬁ
(

3154 
Di•œy
* ,

3158 
	`XSëArcMode
(

3159 
Di•œy
* ,

3160 
GC
 ,

3164 
	`XSëBackground
(

3165 
Di•œy
* ,

3166 
GC
 ,

3170 
	`XSëClùMask
(

3171 
Di•œy
* ,

3172 
GC
 ,

3173 
Pixm≠


3176 
	`XSëClùOrigö
(

3177 
Di•œy
* ,

3178 
GC
 ,

3183 
	`XSëClùRe˘™gÀs
(

3184 
Di•œy
* ,

3185 
GC
 ,

3188 
XRe˘™gÀ
* ,

3193 
	`XSëClo£DownMode
(

3194 
Di•œy
* ,

3198 
	`XSëComm™d
(

3199 
Di•œy
* ,

3200 
Wödow
 ,

3205 
	`XSëDashes
(

3206 
Di•œy
* ,

3207 
GC
 ,

3209 
_Xc⁄°
 * ,

3213 
	`XSëFûlRuÀ
(

3214 
Di•œy
* ,

3215 
GC
 ,

3219 
	`XSëFûlStyÀ
(

3220 
Di•œy
* ,

3221 
GC
 ,

3225 
	`XSëF⁄t
(

3226 
Di•œy
* ,

3227 
GC
 ,

3228 
F⁄t


3231 
	`XSëF⁄tP©h
(

3232 
Di•œy
* ,

3237 
	`XSëF‹eground
(

3238 
Di•œy
* ,

3239 
GC
 ,

3243 
	`XSëFun˘i⁄
(

3244 
Di•œy
* ,

3245 
GC
 ,

3249 
	`XSëGøphicsExposuªs
(

3250 
Di•œy
* ,

3251 
GC
 ,

3252 
Boﬁ


3255 
	`XSëIc⁄Name
(

3256 
Di•œy
* ,

3257 
Wödow
 ,

3258 
_Xc⁄°
 *

3261 
	`XSëI≈utFocus
(

3262 
Di•œy
* ,

3263 
Wödow
 ,

3265 
Time


3268 
	`XSëLöeAâribuãs
(

3269 
Di•œy
* ,

3270 
GC
 ,

3277 
	`XSëModifõrM≠pög
(

3278 
Di•œy
* ,

3279 
XModifõrKeym≠
*

3282 
	`XSëPœ√Mask
(

3283 
Di•œy
* ,

3284 
GC
 ,

3288 
	`XSëPoöãrM≠pög
(

3289 
Di•œy
* ,

3290 
_Xc⁄°
 * ,

3294 
	`XSëS¸ìnSavî
(

3295 
Di•œy
* ,

3302 
	`XSëSñe˘i⁄Ow√r
(

3303 
Di•œy
* ,

3304 
Atom
 ,

3305 
Wödow
 ,

3306 
Time


3309 
	`XSëSèã
(

3310 
Di•œy
* ,

3311 
GC
 ,

3318 
	`XSëStù∂e
(

3319 
Di•œy
* ,

3320 
GC
 ,

3321 
Pixm≠


3324 
	`XSëSubwödowMode
(

3325 
Di•œy
* ,

3326 
GC
 ,

3330 
	`XSëTSOrigö
(

3331 
Di•œy
* ,

3332 
GC
 ,

3337 
	`XSëTûe
(

3338 
Di•œy
* ,

3339 
GC
 ,

3340 
Pixm≠


3343 
	`XSëWödowBackground
(

3344 
Di•œy
* ,

3345 
Wödow
 ,

3349 
	`XSëWödowBackgroundPixm≠
(

3350 
Di•œy
* ,

3351 
Wödow
 ,

3352 
Pixm≠


3355 
	`XSëWödowB‹dî
(

3356 
Di•œy
* ,

3357 
Wödow
 ,

3361 
	`XSëWödowB‹dîPixm≠
(

3362 
Di•œy
* ,

3363 
Wödow
 ,

3364 
Pixm≠


3367 
	`XSëWödowB‹dîWidth
(

3368 
Di•œy
* ,

3369 
Wödow
 ,

3373 
	`XSëWödowCﬁ‹m≠
(

3374 
Di•œy
* ,

3375 
Wödow
 ,

3376 
Cﬁ‹m≠


3379 
	`XSt‹eBuf„r
(

3380 
Di•œy
* ,

3381 
_Xc⁄°
 * ,

3386 
	`XSt‹eByãs
(

3387 
Di•œy
* ,

3388 
_Xc⁄°
 * ,

3392 
	`XSt‹eCﬁ‹
(

3393 
Di•œy
* ,

3394 
Cﬁ‹m≠
 ,

3395 
XCﬁ‹
*

3398 
	`XSt‹eCﬁ‹s
(

3399 
Di•œy
* ,

3400 
Cﬁ‹m≠
 ,

3401 
XCﬁ‹
* ,

3405 
	`XSt‹eName
(

3406 
Di•œy
* ,

3407 
Wödow
 ,

3408 
_Xc⁄°
 *

3411 
	`XSt‹eNamedCﬁ‹
(

3412 
Di•œy
* ,

3413 
Cﬁ‹m≠
 ,

3414 
_Xc⁄°
 * ,

3419 
	`XSync
(

3420 
Di•œy
* ,

3421 
Boﬁ


3424 
	`XTextExã¡s
(

3425 
XF⁄tSåu˘
* ,

3426 
_Xc⁄°
 * ,

3431 
XCh¨Såu˘
*

3434 
	`XTextExã¡s16
(

3435 
XF⁄tSåu˘
* ,

3436 
_Xc⁄°
 
XCh¨2b
* ,

3441 
XCh¨Såu˘
*

3444 
	`XTextWidth
(

3445 
XF⁄tSåu˘
* ,

3446 
_Xc⁄°
 * ,

3450 
	`XTextWidth16
(

3451 
XF⁄tSåu˘
* ,

3452 
_Xc⁄°
 
XCh¨2b
* ,

3456 
Boﬁ
 
	`XTøn¶©eCo‹dö©es
(

3457 
Di•œy
* ,

3458 
Wödow
 ,

3459 
Wödow
 ,

3464 
Wödow
*

3467 
	`XUndeföeCurs‹
(

3468 
Di•œy
* ,

3469 
Wödow


3472 
	`XUngøbBuâ⁄
(

3473 
Di•œy
* ,

3476 
Wödow


3479 
	`XUngøbKey
(

3480 
Di•œy
* ,

3483 
Wödow


3486 
	`XUngøbKeybﬂrd
(

3487 
Di•œy
* ,

3488 
Time


3491 
	`XUngøbPoöãr
(

3492 
Di•œy
* ,

3493 
Time


3496 
	`XUngøbSîvî
(

3497 
Di•œy
*

3500 
	`XUnö°ÆlCﬁ‹m≠
(

3501 
Di•œy
* ,

3502 
Cﬁ‹m≠


3505 
	`XU∆ﬂdF⁄t
(

3506 
Di•œy
* ,

3507 
F⁄t


3510 
	`XUnm≠Subwödows
(

3511 
Di•œy
* ,

3512 
Wödow


3515 
	`XUnm≠Wödow
(

3516 
Di•œy
* ,

3517 
Wödow


3520 
	`XVíd‹Rñó£
(

3521 
Di•œy
*

3524 
	`XW¨pPoöãr
(

3525 
Di•œy
* ,

3526 
Wödow
 ,

3527 
Wödow
 ,

3536 
	`XWidthMMOfS¸ìn
(

3537 
S¸ìn
*

3540 
	`XWidthOfS¸ìn
(

3541 
S¸ìn
*

3544 
	`XWödowEvít
(

3545 
Di•œy
* ,

3546 
Wödow
 ,

3548 
XEvít
*

3551 
	`XWrôeBôm≠Fûe
(

3552 
Di•œy
* ,

3553 
_Xc⁄°
 * ,

3554 
Pixm≠
 ,

3561 
Boﬁ
 
	`XSuµ‹tsLoˇÀ
 ();

3563 *
	`XSëLoˇÀModifõrs
(

3567 
XOM
 
	`XO≥nOM
(

3568 
Di•œy
* ,

3569 
_XrmHashBuckëRec
* ,

3570 
_Xc⁄°
 * ,

3571 
_Xc⁄°
 *

3574 
Sètus
 
	`XClo£OM
(

3575 
XOM


3578 *
	$XSëOMVÆues
(

3579 
XOM
 ,

3581 Ë
	`_X_SENTINEL
(0);

3583 *
	$XGëOMVÆues
(

3584 
XOM
 ,

3586 Ë
	`_X_SENTINEL
(0);

3588 
Di•œy
 *
	`XDi•œyOfOM
(

3589 
XOM


3592 *
	`XLoˇÀOfOM
(

3593 
XOM


3596 
XOC
 
	$XCª©eOC
(

3597 
XOM
 ,

3599 Ë
	`_X_SENTINEL
(0);

3601 
	`XDe°royOC
(

3602 
XOC


3605 
XOM
 
	`XOMOfOC
(

3606 
XOC


3609 *
	$XSëOCVÆues
(

3610 
XOC
 ,

3612 Ë
	`_X_SENTINEL
(0);

3614 *
	$XGëOCVÆues
(

3615 
XOC
 ,

3617 Ë
	`_X_SENTINEL
(0);

3619 
XF⁄tSë
 
	`XCª©eF⁄tSë
(

3620 
Di•œy
* ,

3621 
_Xc⁄°
 * ,

3627 
	`XFªeF⁄tSë
(

3628 
Di•œy
* ,

3629 
XF⁄tSë


3632 
	`XF⁄tsOfF⁄tSë
(

3633 
XF⁄tSë
 ,

3634 
XF⁄tSåu˘
*** ,

3638 *
	`XBa£F⁄tNameLi°OfF⁄tSë
(

3639 
XF⁄tSë


3642 *
	`XLoˇÀOfF⁄tSë
(

3643 
XF⁄tSë


3646 
Boﬁ
 
	`XC⁄ãxtDïídítDøwög
(

3647 
XF⁄tSë


3650 
Boﬁ
 
	`XDúe˘i⁄ÆDïídítDøwög
(

3651 
XF⁄tSë


3654 
Boﬁ
 
	`XC⁄ãxtuÆDøwög
(

3655 
XF⁄tSë


3658 
XF⁄tSëExã¡s
 *
	`XExã¡sOfF⁄tSë
(

3659 
XF⁄tSë


3662 
	`XmbTextEsˇ≥mít
(

3663 
XF⁄tSë
 ,

3664 
_Xc⁄°
 * ,

3668 
	`XwcTextEsˇ≥mít
(

3669 
XF⁄tSë
 ,

3670 
_Xc⁄°
 
wch¨_t
* ,

3674 
	`Xutf8TextEsˇ≥mít
(

3675 
XF⁄tSë
 ,

3676 
_Xc⁄°
 * ,

3680 
	`XmbTextExã¡s
(

3681 
XF⁄tSë
 ,

3682 
_Xc⁄°
 * ,

3684 
XRe˘™gÀ
* ,

3685 
XRe˘™gÀ
*

3688 
	`XwcTextExã¡s
(

3689 
XF⁄tSë
 ,

3690 
_Xc⁄°
 
wch¨_t
* ,

3692 
XRe˘™gÀ
* ,

3693 
XRe˘™gÀ
*

3696 
	`Xutf8TextExã¡s
(

3697 
XF⁄tSë
 ,

3698 
_Xc⁄°
 * ,

3700 
XRe˘™gÀ
* ,

3701 
XRe˘™gÀ
*

3704 
Sètus
 
	`XmbTextPîCh¨Exã¡s
(

3705 
XF⁄tSë
 ,

3706 
_Xc⁄°
 * ,

3708 
XRe˘™gÀ
* ,

3709 
XRe˘™gÀ
* ,

3712 
XRe˘™gÀ
* ,

3713 
XRe˘™gÀ
*

3716 
Sètus
 
	`XwcTextPîCh¨Exã¡s
(

3717 
XF⁄tSë
 ,

3718 
_Xc⁄°
 
wch¨_t
* ,

3720 
XRe˘™gÀ
* ,

3721 
XRe˘™gÀ
* ,

3724 
XRe˘™gÀ
* ,

3725 
XRe˘™gÀ
*

3728 
Sètus
 
	`Xutf8TextPîCh¨Exã¡s
(

3729 
XF⁄tSë
 ,

3730 
_Xc⁄°
 * ,

3732 
XRe˘™gÀ
* ,

3733 
XRe˘™gÀ
* ,

3736 
XRe˘™gÀ
* ,

3737 
XRe˘™gÀ
*

3740 
	`XmbDøwText
(

3741 
Di•œy
* ,

3742 
DøwabÀ
 ,

3743 
GC
 ,

3746 
XmbTextIãm
* ,

3750 
	`XwcDøwText
(

3751 
Di•œy
* ,

3752 
DøwabÀ
 ,

3753 
GC
 ,

3756 
XwcTextIãm
* ,

3760 
	`Xutf8DøwText
(

3761 
Di•œy
* ,

3762 
DøwabÀ
 ,

3763 
GC
 ,

3766 
XmbTextIãm
* ,

3770 
	`XmbDøwSåög
(

3771 
Di•œy
* ,

3772 
DøwabÀ
 ,

3773 
XF⁄tSë
 ,

3774 
GC
 ,

3777 
_Xc⁄°
 * ,

3781 
	`XwcDøwSåög
(

3782 
Di•œy
* ,

3783 
DøwabÀ
 ,

3784 
XF⁄tSë
 ,

3785 
GC
 ,

3788 
_Xc⁄°
 
wch¨_t
* ,

3792 
	`Xutf8DøwSåög
(

3793 
Di•œy
* ,

3794 
DøwabÀ
 ,

3795 
XF⁄tSë
 ,

3796 
GC
 ,

3799 
_Xc⁄°
 * ,

3803 
	`XmbDøwImageSåög
(

3804 
Di•œy
* ,

3805 
DøwabÀ
 ,

3806 
XF⁄tSë
 ,

3807 
GC
 ,

3810 
_Xc⁄°
 * ,

3814 
	`XwcDøwImageSåög
(

3815 
Di•œy
* ,

3816 
DøwabÀ
 ,

3817 
XF⁄tSë
 ,

3818 
GC
 ,

3821 
_Xc⁄°
 
wch¨_t
* ,

3825 
	`Xutf8DøwImageSåög
(

3826 
Di•œy
* ,

3827 
DøwabÀ
 ,

3828 
XF⁄tSë
 ,

3829 
GC
 ,

3832 
_Xc⁄°
 * ,

3836 
XIM
 
	`XO≥nIM
(

3837 
Di•œy
* ,

3838 
_XrmHashBuckëRec
* ,

3843 
Sètus
 
	`XClo£IM
(

3844 
XIM


3847 *
	$XGëIMVÆues
(

3848 
XIM
 , ...

3849 Ë
	`_X_SENTINEL
(0);

3851 *
	$XSëIMVÆues
(

3852 
XIM
 , ...

3853 Ë
	`_X_SENTINEL
(0);

3855 
Di•œy
 *
	`XDi•œyOfIM
(

3856 
XIM


3859 *
	`XLoˇÀOfIM
(

3860 
XIM


3863 
XIC
 
	$XCª©eIC
(

3864 
XIM
 , ...

3865 Ë
	`_X_SENTINEL
(0);

3867 
	`XDe°royIC
(

3868 
XIC


3871 
	`XSëICFocus
(

3872 
XIC


3875 
	`XUn£tICFocus
(

3876 
XIC


3879 
wch¨_t
 *
	`XwcRe£tIC
(

3880 
XIC


3883 *
	`XmbRe£tIC
(

3884 
XIC


3887 *
	`Xutf8Re£tIC
(

3888 
XIC


3891 *
	$XSëICVÆues
(

3892 
XIC
 , ...

3893 Ë
	`_X_SENTINEL
(0);

3895 *
	$XGëICVÆues
(

3896 
XIC
 , ...

3897 Ë
	`_X_SENTINEL
(0);

3899 
XIM
 
	`XIMOfIC
(

3900 
XIC


3903 
Boﬁ
 
	`XFûãrEvít
(

3904 
XEvít
* ,

3905 
Wödow


3908 
	`XmbLookupSåög
(

3909 
XIC
 ,

3910 
XKeyPªs£dEvít
* ,

3913 
KeySym
* ,

3914 
Sètus
*

3917 
	`XwcLookupSåög
(

3918 
XIC
 ,

3919 
XKeyPªs£dEvít
* ,

3920 
wch¨_t
* ,

3922 
KeySym
* ,

3923 
Sètus
*

3926 
	`Xutf8LookupSåög
(

3927 
XIC
 ,

3928 
XKeyPªs£dEvít
* ,

3931 
KeySym
* ,

3932 
Sètus
*

3935 
XVaNe°edLi°
 
	$XVaCª©eNe°edLi°
(

3937 Ë
	`_X_SENTINEL
(0);

3941 
Boﬁ
 
	`XRegi°îIMIn°™tüãCÆlback
(

3942 
Di•œy
* ,

3943 
_XrmHashBuckëRec
* ,

3946 
XIDProc
 ,

3947 
XPoöãr


3950 
Boﬁ
 
	`XUƒegi°îIMIn°™tüãCÆlback
(

3951 
Di•œy
* ,

3952 
_XrmHashBuckëRec
* ,

3955 
XIDProc
 ,

3956 
XPoöãr


3959 (*
	tXC⁄√˘i⁄W©chProc
)(

3960 
	tDi•œy
* ,

3961 
	tXPoöãr
 ,

3963 
	tBoﬁ
 ,

3964 
	tXPoöãr
*

3968 
Sètus
 
	`XI¡î«lC⁄√˘i⁄Numbîs
(

3969 
Di•œy
* ,

3974 
	`XPro˚ssI¡î«lC⁄√˘i⁄
(

3975 
Di•œy
* ,

3979 
Sètus
 
	`XAddC⁄√˘i⁄W©ch
(

3980 
Di•œy
* ,

3981 
XC⁄√˘i⁄W©chProc
 ,

3982 
XPoöãr


3985 
	`XRemoveC⁄√˘i⁄W©ch
(

3986 
Di•œy
* ,

3987 
XC⁄√˘i⁄W©chProc
 ,

3988 
XPoöãr


3991 
	`XSëAuth‹iz©i⁄
(

3998 
	`_Xmbtowc
(

3999 
wch¨_t
 * ,

4004 
	`_Xw˘omb
(

4006 
wch¨_t


4009 
Boﬁ
 
	`XGëEvítD©a
(

4010 
Di•œy
* ,

4011 
XGíîicEvítCookõ
*

4014 
	`XFªeEvítD©a
(

4015 
Di•œy
* ,

4016 
XGíîicEvítCookõ
*

4019 #ifde‡
__˛™g__


4020 #¥agm®
˛™g
 
dügno°ic
 
p›


4023 
_XFUNCPROTOEND


	@/usr/include/X11/Xos.h

33 #i‚de‡
_XOS_H_


34 
	#_XOS_H_


	)

36 
	~<X11/Xosdefs.h
>

42 
	~<sys/ty≥s.h
>

44 #i‡
deföed
(
__SCO__
Ë|| deföed(
__UNIXWARE__
)

45 
	~<°döt.h
>

62 
	~<°rög.h
>

63 #i‡
deföed
(
__SCO__
Ë|| deföed(
__UNIXWARE__
Ë|| deföed(
__sun
Ë|| deföed(
__CYGWIN__
Ë|| deföed(
_AIX
Ë|| deföed(
__APPLE__
)

64 
	~<°rögs.h
>

66 #i‚de‡
ödex


67 
	#ödex
(
s
,
c
Ë(
	`°rchr
((s),(c)))

	)

69 #i‚de‡
rödex


70 
	#rödex
(
s
,
c
Ë(
	`°ºchr
((s),(c)))

	)

77 #i‡
deföed
(
X_NOT_POSIX
)

78 
	~<f˙é.h
>

79 #i‡
deföed
(
USL
Ë|| deföed(
__i386__
Ë&& (deföed(
SYSV
Ë|| deföed(
SVR4
))

80 
	~<uni°d.h
>

82 #ifde‡
WIN32


83 
	~<X11/Xw32defs.h
>

85 
	~<sys/fûe.h
>

88 
	~<f˙é.h
>

89 
	~<uni°d.h
>

96 #i‡
deföed
(
_POSIX_SOURCE
Ë&& deföed(
SVR4
)

98 #unde‡
_POSIX_SOURCE


99 
	~<sys/time.h
>

100 
	#_POSIX_SOURCE


	)

101 #ñi‡
deföed
(
WIN32
)

102 
	~<time.h
>

103 #i‡!
deföed
(
_WINSOCKAPI_
Ë&& !deföed(
_WILLWINSOCK_
Ë&& !deföed(
_TIMEVAL_DEFINED
Ë&& !deföed(
_STRUCT_TIMEVAL
)

104 
	stimevÆ
 {

105 
	mtv_£c
;

106 
	mtv_u£c
;

108 
	#_TIMEVAL_DEFINED


	)

110 
	~<sys/timeb.h
>

111 
	#gëtimeofday
(
t
) \

113 
_timeb
 
_gtodtmp
; \

114 
	`_·ime
 (&
_gtodtmp
); \

115 (
t
)->
tv_£c
 = 
_gtodtmp
.
time
; \

116 (
t
)->
tv_u£c
 = 
_gtodtmp
.
mûlôm
 * 1000; \

117 }

	)

119 
	~<sys/time.h
>

120 
	~<time.h
>

124 #i‡
deföed
(
_XOPEN_XPG4
Ë|| deföed(
_XOPEN_UNIX
)

125 
	#X_GETTIMEOFDAY
(
t
Ë
	`gëtimeofday
—, (
timez⁄e
*)0)

	)

127 #i‡
deföed
(
SVR4
Ë|| deföed(
__SVR4
Ë|| deföed(
WIN32
)

128 
	#X_GETTIMEOFDAY
(
t
Ë
	`gëtimeofday
—)

	)

130 
	#X_GETTIMEOFDAY
(
t
Ë
	`gëtimeofday
—, (
timez⁄e
*)0)

	)

135 #ifde‡
__GNU__


136 
	#PATH_MAX
 4096

	)

137 
	#MAXPATHLEN
 4096

	)

138 
	#OPEN_MAX
 256

	)

142 #i‡
deföed
(
X_NOT_POSIX
Ë&& deföed(
SYSV
Ë&& !deföed(
SIGCHLD
)

143 
	#SIGCHLD
 
SIGCLD


	)

146 
	~<X11/X¨ch.h
>

	@/usr/include/X11/Xresource.h

49 #i‚de‡
_X11_XRESOURCE_H_


50 
	#_X11_XRESOURCE_H_


	)

52 #i‚de‡
_XP_PRINT_SERVER_


53 
	~<X11/Xlib.h
>

66 
_XFUNCPROTOBEGIN


74 *
X≥rmÆloc
(

84 
	tXrmQu¨k
, *
	tXrmQu¨kLi°
;

85 
	#NULLQUARK
 ((
XrmQu¨k
Ë0)

	)

87 *
	tXrmSåög
;

88 
	#NULLSTRING
 ((
XrmSåög
Ë0)

	)

91 
XrmQu¨k
 
XrmSåögToQu¨k
(

92 
_Xc⁄°
 *

95 
XrmQu¨k
 
XrmPîmSåögToQu¨k
(

96 
_Xc⁄°
 *

100 
XrmSåög
 
XrmQu¨kToSåög
(

101 
XrmQu¨k


104 
XrmQu¨k
 
XrmUniqueQu¨k
(

108 
	#XrmSåögsEquÆ
(
a1
, 
a2
Ë(
	`°rcmp
◊1,á2Ë=0)

	)

117 íum {
	mXrmBödTighéy
, 
	mXrmBödLoo£ly
} 
	tXrmBödög
, *
	tXrmBödögLi°
;

119 
XrmSåögToQu¨kLi°
(

120 
_Xc⁄°
 * ,

121 
XrmQu¨kLi°


124 
XrmSåögToBödögQu¨kLi°
(

125 
_Xc⁄°
 * ,

126 
XrmBödögLi°
 ,

127 
XrmQu¨kLi°


136 
XrmQu¨k
 
	tXrmName
;

137 
XrmQu¨kLi°
 
	tXrmNameLi°
;

138 
	#XrmNameToSåög
(
«me
Ë
	`XrmQu¨kToSåög
“ame)

	)

139 
	#XrmSåögToName
(
°rög
Ë
	`XrmSåögToQu¨k
(°rög)

	)

140 
	#XrmSåögToNameLi°
(
°r
, 
«me
Ë
	`XrmSåögToQu¨kLi°
(°r,Çame)

	)

142 
XrmQu¨k
 
	tXrmCœss
;

143 
XrmQu¨kLi°
 
	tXrmCœssLi°
;

144 
	#XrmCœssToSåög
(
c_˛ass
Ë
	`XrmQu¨kToSåög
(c_˛ass)

	)

145 
	#XrmSåögToCœss
(
c_˛ass
Ë
	`XrmSåögToQu¨k
(c_˛ass)

	)

146 
	#XrmSåögToCœssLi°
(
°r
,
c_˛ass
Ë
	`XrmSåögToQu¨kLi°
(°r, c_˛ass)

	)

156 
XrmQu¨k
 
	tXrmRïª£¡©i⁄
;

157 
	#XrmSåögToRïª£¡©i⁄
(
°rög
Ë
	`XrmSåögToQu¨k
(°rög)

	)

158 
	#XrmRïª£¡©i⁄ToSåög
(
ty≥
Ë
	`XrmQu¨kToSåög
—y≥)

	)

161 
	msize
;

162 
XPoöãr
 
	maddr
;

163 } 
	tXrmVÆue
, *
	tXrmVÆuePå
;

172 
_XrmHashBuckëRec
 *
	tXrmHashBuckë
;

173 
XrmHashBuckë
 *
	tXrmHashTabÀ
;

174 
XrmHashTabÀ
 
	tXrmSórchLi°
[];

175 
_XrmHashBuckëRec
 *
	tXrmD©aba£
;

178 
XrmDe°royD©aba£
(

179 
XrmD©aba£


182 
XrmQPutResour˚
(

183 
XrmD©aba£
* ,

184 
XrmBödögLi°
 ,

185 
XrmQu¨kLi°
 ,

186 
XrmRïª£¡©i⁄
 ,

187 
XrmVÆue
*

190 
XrmPutResour˚
(

191 
XrmD©aba£
* ,

192 
_Xc⁄°
 * ,

193 
_Xc⁄°
 * ,

194 
XrmVÆue
*

197 
XrmQPutSåögResour˚
(

198 
XrmD©aba£
* ,

199 
XrmBödögLi°
 ,

200 
XrmQu¨kLi°
 ,

201 
_Xc⁄°
 *

204 
XrmPutSåögResour˚
(

205 
XrmD©aba£
* ,

206 
_Xc⁄°
 * ,

207 
_Xc⁄°
 *

210 
XrmPutLöeResour˚
(

211 
XrmD©aba£
* ,

212 
_Xc⁄°
 *

215 
Boﬁ
 
XrmQGëResour˚
(

216 
XrmD©aba£
 ,

217 
XrmNameLi°
 ,

218 
XrmCœssLi°
 ,

219 
XrmRïª£¡©i⁄
* ,

220 
XrmVÆue
*

223 
Boﬁ
 
XrmGëResour˚
(

224 
XrmD©aba£
 ,

225 
_Xc⁄°
 * ,

226 
_Xc⁄°
 * ,

228 
XrmVÆue
*

231 
Boﬁ
 
XrmQGëSórchLi°
(

232 
XrmD©aba£
 ,

233 
XrmNameLi°
 ,

234 
XrmCœssLi°
 ,

235 
XrmSórchLi°
 ,

239 
Boﬁ
 
XrmQGëSórchResour˚
(

240 
XrmSórchLi°
 ,

241 
XrmName
 ,

242 
XrmCœss
 ,

243 
XrmRïª£¡©i⁄
* ,

244 
XrmVÆue
*

253 #i‚de‡
_XP_PRINT_SERVER_


255 
XrmSëD©aba£
(

256 
Di•œy
* ,

257 
XrmD©aba£


260 
XrmD©aba£
 
XrmGëD©aba£
(

261 
Di•œy
*

266 
XrmD©aba£
 
XrmGëFûeD©aba£
(

267 
_Xc⁄°
 *

270 
Sètus
 
XrmComböeFûeD©aba£
(

271 
_Xc⁄°
 * ,

272 
XrmD©aba£
* ,

273 
Boﬁ


276 
XrmD©aba£
 
XrmGëSåögD©aba£
(

277 
_Xc⁄°
 *

280 
XrmPutFûeD©aba£
(

281 
XrmD©aba£
 ,

282 
_Xc⁄°
 *

285 
XrmMîgeD©aba£s
(

286 
XrmD©aba£
 ,

287 
XrmD©aba£
*

290 
XrmComböeD©aba£
(

291 
XrmD©aba£
 ,

292 
XrmD©aba£
* ,

293 
Boﬁ


296 
	#XrmEnumAŒLevñs
 0

	)

297 
	#XrmEnumO√Levñ
 1

	)

299 
Boﬁ
 
XrmEnumî©eD©aba£
(

300 
XrmD©aba£
 ,

301 
XrmNameLi°
 ,

302 
XrmCœssLi°
 ,

304 
	$Boﬁ
 (*)(

305 
XrmD©aba£
* ,

306 
XrmBödögLi°
 ,

307 
XrmQu¨kLi°
 ,

308 
XrmRïª£¡©i⁄
* ,

309 
XrmVÆue
* ,

310 
XPoöãr


312 
XPoöãr


315 c⁄° *
	`XrmLoˇÀOfD©aba£
(

316 
XrmD©aba£


327 
Xrm›ti⁄NoArg
,

328 
Xrm›ti⁄IsArg
,

329 
Xrm›ti⁄StickyArg
,

330 
Xrm›ti⁄SïArg
,

331 
Xrm›ti⁄ResArg
,

332 
Xrm›ti⁄SkùArg
,

333 
Xrm›ti⁄SkùLöe
,

334 
Xrm›ti⁄SkùNArgs


336 } 
	tXrmO±i⁄Köd
;

339 *
›ti⁄
;

340 *
•ecifõr
;

341 
XrmO±i⁄Köd
 
¨gKöd
;

342 
XPoöãr
 
vÆue
;

343 } 
	tXrmO±i⁄DescRec
, *
	tXrmO±i⁄DescLi°
;

346 
	`XrmP¨£Comm™d
(

347 
XrmD©aba£
* ,

348 
XrmO±i⁄DescLi°
 ,

350 
_Xc⁄°
 * ,

355 
_XFUNCPROTOEND


	@/usr/include/X11/Xutil.h

49 #i‚de‡
_X11_XUTIL_H_


50 
	#_X11_XUTIL_H_


	)

53 
	~<X11/Xlib.h
>

54 
	~<X11/keysym.h
>

59 #ifde‡
__˛™g__


60 #¥agm®
˛™g
 
dügno°ic
 
push


61 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wpadded"

68 
	#NoVÆue
 0x0000

	)

69 
	#XVÆue
 0x0001

	)

70 
	#YVÆue
 0x0002

	)

71 
	#WidthVÆue
 0x0004

	)

72 
	#HeightVÆue
 0x0008

	)

73 
	#AŒVÆues
 0x000F

	)

74 
	#XNeg©ive
 0x0010

	)

75 
	#YNeg©ive
 0x0020

	)

82 
	mÊags
;

83 
	mx
, 
	my
;

84 
	mwidth
, 
	mheight
;

85 
	mmö_width
, 
	mmö_height
;

86 
	mmax_width
, 
	mmax_height
;

87 
	mwidth_öc
, 
	mheight_öc
;

89 
	mx
;

90 
	my
;

91 } 
	mmö_a•e˘
, 
	mmax_a•e˘
;

92 
	mba£_width
, 
	mba£_height
;

93 
	mwö_gøvôy
;

94 } 
	tXSizeHöts
;

102 
	#USPosôi⁄
 (1L << 0Ë

	)

103 
	#USSize
 (1L << 1Ë

	)

105 
	#PPosôi⁄
 (1L << 2Ë

	)

106 
	#PSize
 (1L << 3Ë

	)

107 
	#PMöSize
 (1L << 4Ë

	)

108 
	#PMaxSize
 (1L << 5Ë

	)

109 
	#PResizeInc
 (1L << 6Ë

	)

110 
	#PA•e˘
 (1L << 7Ë

	)

111 
	#PBa£Size
 (1L << 8Ë

	)

112 
	#PWöGøvôy
 (1L << 9Ë

	)

115 
	#PAŒHöts
 (
PPosôi⁄
|
PSize
|
PMöSize
|
PMaxSize
|
PResizeInc
|
PA•e˘
)

	)

120 
	mÊags
;

121 
Boﬁ
 
	möput
;

123 
	möôül_°©e
;

124 
Pixm≠
 
	mic⁄_pixm≠
;

125 
Wödow
 
	mic⁄_wödow
;

126 
	mic⁄_x
, 
	mic⁄_y
;

127 
Pixm≠
 
	mic⁄_mask
;

128 
XID
 
	mwödow_group
;

130 } 
	tXWMHöts
;

134 
	#I≈utHöt
 (1L << 0)

	)

135 
	#SèãHöt
 (1L << 1)

	)

136 
	#Ic⁄Pixm≠Höt
 (1L << 2)

	)

137 
	#Ic⁄WödowHöt
 (1L << 3)

	)

138 
	#Ic⁄Posôi⁄Höt
 (1L << 4)

	)

139 
	#Ic⁄MaskHöt
 (1L << 5)

	)

140 
	#WödowGroupHöt
 (1L << 6)

	)

141 
	#AŒHöts
 (
I≈utHöt
|
SèãHöt
|
Ic⁄Pixm≠Höt
|
Ic⁄WödowHöt
| \

142 
Ic⁄Posôi⁄Höt
|
Ic⁄MaskHöt
|
WödowGroupHöt
)

	)

143 
	#XUrgícyHöt
 (1L << 8)

	)

146 
	#WôhdøwnSèã
 0

	)

147 
	#N‹mÆSèã
 1

	)

148 
	#Ic⁄icSèã
 3

	)

153 
	#D⁄tC¨eSèã
 0

	)

154 
	#ZoomSèã
 2

	)

155 
	#I«˘iveSèã
 4

	)

164 *
	mvÆue
;

165 
Atom
 
	mícodög
;

166 
	mf‹m©
;

167 
	mnôems
;

168 } 
	tXTextPr›îty
;

170 
	#XNoMem‹y
 -1

	)

171 
	#XLoˇÀNŸSuµ‹ãd
 -2

	)

172 
	#XC⁄vîãrNŸFound
 -3

	)

175 
	mXSåögStyÀ
,

176 
	mXCompoundTextStyÀ
,

177 
	mXTextStyÀ
,

178 
	mXStdICCTextStyÀ
,

180 
	mXUTF8SåögStyÀ


181 } 
	tXICCEncodögStyÀ
;

184 
	mmö_width
, 
	mmö_height
;

185 
	mmax_width
, 
	mmax_height
;

186 
	mwidth_öc
, 
	mheight_öc
;

187 } 
	tXIc⁄Size
;

190 *
	mªs_«me
;

191 *
	mªs_˛ass
;

192 } 
	tXCœssHöt
;

194 #ifde‡
XUTIL_DEFINE_FUNCTIONS


195 
XDe°royImage
(

196 
XImage
 *
ximage
);

197 
XGëPixñ
(

198 
XImage
 *
ximage
,

199 
x
, 
y
);

200 
XPutPixñ
(

201 
XImage
 *
ximage
,

202 
x
, 
y
,

203 
pixñ
);

204 
XImage
 *
XSubImage
(

205 
XImage
 *
ximage
,

206 
x
, 
y
,

207 
width
, 
height
);

208 
XAddPixñ
(

209 
XImage
 *
ximage
,

210 
vÆue
);

216 
	#XDe°royImage
(
ximage
) \

217 ((*((
ximage
)->
f
.
de°roy_image
))((ximage)))

	)

218 
	#XGëPixñ
(
ximage
, 
x
, 
y
) \

219 ((*((
ximage
)->
f
.
gë_pixñ
))((ximage), (
x
), (
y
)))

	)

220 
	#XPutPixñ
(
ximage
, 
x
, 
y
, 
pixñ
) \

221 ((*((
ximage
)->
f
.
put_pixñ
))((ximage), (
x
), (
y
), (
pixñ
)))

	)

222 
	#XSubImage
(
ximage
, 
x
, 
y
, 
width
, 
height
) \

223 ((*((
ximage
)->
f
.
sub_image
))((ximage), (
x
), (
y
), (
width
), (
height
)))

	)

224 
	#XAddPixñ
(
ximage
, 
vÆue
) \

225 ((*((
ximage
)->
f
.
add_pixñ
))((ximage), (
vÆue
)))

	)

231 
	s_XCompo£Sètus
 {

232 
XPoöãr
 
	mcompo£_±r
;

233 
	mch¨s_m©ched
;

234 } 
	tXCompo£Sètus
;

239 
	#IsKey∑dKey
(
keysym
) \

240 (((
KeySym
)(
keysym
Ë>
XK_KP_S∑˚
Ë&& ((KeySym)(keysymË<
XK_KP_EquÆ
))

	)

242 
	#IsPriv©eKey∑dKey
(
keysym
) \

243 (((
KeySym
)(
keysym
Ë>0x11000000Ë&& ((KeySym)(keysymË<0x1100FFFF))

	)

245 
	#IsCurs‹Key
(
keysym
) \

246 (((
KeySym
)(
keysym
Ë>
XK_Home
Ë&& ((KeySym)(keysymË< 
XK_Sñe˘
))

	)

248 
	#IsPFKey
(
keysym
) \

249 (((
KeySym
)(
keysym
Ë>
XK_KP_F1
Ë&& ((KeySym)(keysymË<
XK_KP_F4
))

	)

251 
	#IsFun˘i⁄Key
(
keysym
) \

252 (((
KeySym
)(
keysym
Ë>
XK_F1
Ë&& ((KeySym)(keysymË<
XK_F35
))

	)

254 
	#IsMiscFun˘i⁄Key
(
keysym
) \

255 (((
KeySym
)(
keysym
Ë>
XK_Sñe˘
Ë&& ((KeySym)(keysymË<
XK_Bªak
))

	)

257 #ifde‡
XK_XKB_KEYS


258 
	#IsModifõrKey
(
keysym
) \

259 ((((
KeySym
)(
keysym
Ë>
XK_Shi·_L
Ë&& ((KeySym)(keysymË<
XK_Hy≥r_R
)) \

260 || (((
KeySym
)(
keysym
Ë>
XK_ISO_Lock
) && \

261 ((
KeySym
)(
keysym
Ë<
XK_ISO_Levñ5_Lock
)) \

262 || ((
KeySym
)(
keysym
Ë=
XK_Mode_swôch
) \

263 || ((
KeySym
)(
keysym
Ë=
XK_Num_Lock
))

	)

265 
	#IsModifõrKey
(
keysym
) \

266 ((((
KeySym
)(
keysym
Ë>
XK_Shi·_L
Ë&& ((KeySym)(keysymË<
XK_Hy≥r_R
)) \

267 || ((
KeySym
)(
keysym
Ë=
XK_Mode_swôch
) \

268 || ((
KeySym
)(
keysym
Ë=
XK_Num_Lock
))

	)

273 
_XRegi⁄
 *
	tRegi⁄
;

277 
	#Re˘™gÀOut
 0

	)

278 
	#Re˘™gÀIn
 1

	)

279 
	#Re˘™gÀP¨t
 2

	)

288 
VisuÆ
 *
	mvisuÆ
;

289 
VisuÆID
 
	mvisuÆid
;

290 
	ms¸ìn
;

291 
	mdïth
;

292 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

293 
	mc_˛ass
;

295 
	m˛ass
;

297 
	mªd_mask
;

298 
	mgªí_mask
;

299 
	mblue_mask
;

300 
	mcﬁ‹m≠_size
;

301 
	mbôs_≥r_rgb
;

302 } 
	tXVisuÆInfo
;

304 
	#VisuÆNoMask
 0x0

	)

305 
	#VisuÆIDMask
 0x1

	)

306 
	#VisuÆS¸ìnMask
 0x2

	)

307 
	#VisuÆDïthMask
 0x4

	)

308 
	#VisuÆCœssMask
 0x8

	)

309 
	#VisuÆRedMaskMask
 0x10

	)

310 
	#VisuÆGªíMaskMask
 0x20

	)

311 
	#VisuÆBlueMaskMask
 0x40

	)

312 
	#VisuÆCﬁ‹m≠SizeMask
 0x80

	)

313 
	#VisuÆBôsPîRGBMask
 0x100

	)

314 
	#VisuÆAŒMask
 0x1FF

	)

321 
Cﬁ‹m≠
 
	mcﬁ‹m≠
;

322 
	mªd_max
;

323 
	mªd_mu…
;

324 
	mgªí_max
;

325 
	mgªí_mu…
;

326 
	mblue_max
;

327 
	mblue_mu…
;

328 
	mba£_pixñ
;

329 
VisuÆID
 
	mvisuÆid
;

330 
XID
 
	mkûlid
;

331 } 
	tXSènd¨dCﬁ‹m≠
;

333 
	#Rñó£ByFªeögCﬁ‹m≠
 ((
XID
Ë1LË

	)

339 
	#Bôm≠Suc˚ss
 0

	)

340 
	#Bôm≠O≥nFaûed
 1

	)

341 
	#Bôm≠FûeInvÆid
 2

	)

342 
	#Bôm≠NoMem‹y
 3

	)

353 
	#XCSUCCESS
 0

	)

354 
	#XCNOMEM
 1

	)

355 
	#XCNOENT
 2

	)

357 
	tXC⁄ãxt
;

359 
	#XUniqueC⁄ãxt
(Ë((
XC⁄ãxt
Ë
	`XrmUniqueQu¨k
())

	)

360 
	#XSåögToC⁄ãxt
(
°rög
Ë((
XC⁄ãxt
Ë
	`XrmSåögToQu¨k
(°rög))

	)

362 
_XFUNCPROTOBEGIN


366 
XCœssHöt
 *
XAŒocCœssHöt
 (

370 
XIc⁄Size
 *
XAŒocIc⁄Size
 (

374 
XSizeHöts
 *
XAŒocSizeHöts
 (

378 
XSènd¨dCﬁ‹m≠
 *
XAŒocSènd¨dCﬁ‹m≠
 (

382 
XWMHöts
 *
XAŒocWMHöts
 (

386 
XClùBox
(

387 
Regi⁄
 ,

388 
XRe˘™gÀ
*

391 
Regi⁄
 
XCª©eRegi⁄
(

395 c⁄° *
XDeÁu…Såög
 ();

397 
XDñëeC⁄ãxt
(

398 
Di•œy
* ,

399 
XID
 ,

400 
XC⁄ãxt


403 
XDe°royRegi⁄
(

404 
Regi⁄


407 
XEm±yRegi⁄
(

408 
Regi⁄


411 
XEquÆRegi⁄
(

412 
Regi⁄
 ,

413 
Regi⁄


416 
XFödC⁄ãxt
(

417 
Di•œy
* ,

418 
XID
 ,

419 
XC⁄ãxt
 ,

420 
XPoöãr
*

423 
Sètus
 
XGëCœssHöt
(

424 
Di•œy
* ,

425 
Wödow
 ,

426 
XCœssHöt
*

429 
Sètus
 
XGëIc⁄Sizes
(

430 
Di•œy
* ,

431 
Wödow
 ,

432 
XIc⁄Size
** ,

436 
Sètus
 
XGëN‹mÆHöts
(

437 
Di•œy
* ,

438 
Wödow
 ,

439 
XSizeHöts
*

442 
Sètus
 
XGëRGBCﬁ‹m≠s
(

443 
Di•œy
* ,

444 
Wödow
 ,

445 
XSènd¨dCﬁ‹m≠
** ,

447 
Atom


450 
Sètus
 
XGëSizeHöts
(

451 
Di•œy
* ,

452 
Wödow
 ,

453 
XSizeHöts
* ,

454 
Atom


457 
Sètus
 
XGëSènd¨dCﬁ‹m≠
(

458 
Di•œy
* ,

459 
Wödow
 ,

460 
XSènd¨dCﬁ‹m≠
* ,

461 
Atom


464 
Sètus
 
XGëTextPr›îty
(

465 
Di•œy
* ,

466 
Wödow
 ,

467 
XTextPr›îty
* ,

468 
Atom


471 
XVisuÆInfo
 *
XGëVisuÆInfo
(

472 
Di•œy
* ,

474 
XVisuÆInfo
* ,

478 
Sètus
 
XGëWMClõ¡Machöe
(

479 
Di•œy
* ,

480 
Wödow
 ,

481 
XTextPr›îty
*

484 
XWMHöts
 *
XGëWMHöts
(

485 
Di•œy
* ,

486 
Wödow


489 
Sètus
 
XGëWMIc⁄Name
(

490 
Di•œy
* ,

491 
Wödow
 ,

492 
XTextPr›îty
*

495 
Sètus
 
XGëWMName
(

496 
Di•œy
* ,

497 
Wödow
 ,

498 
XTextPr›îty
*

501 
Sètus
 
XGëWMN‹mÆHöts
(

502 
Di•œy
* ,

503 
Wödow
 ,

504 
XSizeHöts
* ,

508 
Sètus
 
XGëWMSizeHöts
(

509 
Di•œy
* ,

510 
Wödow
 ,

511 
XSizeHöts
* ,

513 
Atom


516 
Sètus
 
XGëZoomHöts
(

517 
Di•œy
* ,

518 
Wödow
 ,

519 
XSizeHöts
*

522 
XI¡î£˘Regi⁄
(

523 
Regi⁄
 ,

524 
Regi⁄
 ,

525 
Regi⁄


528 
XC⁄vîtCa£
(

529 
KeySym
 ,

530 
KeySym
* ,

531 
KeySym
*

534 
XLookupSåög
(

535 
XKeyEvít
* ,

538 
KeySym
* ,

539 
XCompo£Sètus
*

542 
Sètus
 
XM©chVisuÆInfo
(

543 
Di•œy
* ,

547 
XVisuÆInfo
*

550 
XOff£tRegi⁄
(

551 
Regi⁄
 ,

556 
Boﬁ
 
XPoötInRegi⁄
(

557 
Regi⁄
 ,

562 
Regi⁄
 
XPﬁyg⁄Regi⁄
(

563 
XPoöt
* ,

568 
XRe˘InRegi⁄
(

569 
Regi⁄
 ,

576 
XSaveC⁄ãxt
(

577 
Di•œy
* ,

578 
XID
 ,

579 
XC⁄ãxt
 ,

580 
_Xc⁄°
 *

583 
XSëCœssHöt
(

584 
Di•œy
* ,

585 
Wödow
 ,

586 
XCœssHöt
*

589 
XSëIc⁄Sizes
(

590 
Di•œy
* ,

591 
Wödow
 ,

592 
XIc⁄Size
* ,

596 
XSëN‹mÆHöts
(

597 
Di•œy
* ,

598 
Wödow
 ,

599 
XSizeHöts
*

602 
XSëRGBCﬁ‹m≠s
(

603 
Di•œy
* ,

604 
Wödow
 ,

605 
XSènd¨dCﬁ‹m≠
* ,

607 
Atom


610 
XSëSizeHöts
(

611 
Di•œy
* ,

612 
Wödow
 ,

613 
XSizeHöts
* ,

614 
Atom


617 
XSëSènd¨dPr›îtõs
(

618 
Di•œy
* ,

619 
Wödow
 ,

620 
_Xc⁄°
 * ,

621 
_Xc⁄°
 * ,

622 
Pixm≠
 ,

625 
XSizeHöts
*

628 
XSëTextPr›îty
(

629 
Di•œy
* ,

630 
Wödow
 ,

631 
XTextPr›îty
* ,

632 
Atom


635 
XSëWMClõ¡Machöe
(

636 
Di•œy
* ,

637 
Wödow
 ,

638 
XTextPr›îty
*

641 
XSëWMHöts
(

642 
Di•œy
* ,

643 
Wödow
 ,

644 
XWMHöts
*

647 
XSëWMIc⁄Name
(

648 
Di•œy
* ,

649 
Wödow
 ,

650 
XTextPr›îty
*

653 
XSëWMName
(

654 
Di•œy
* ,

655 
Wödow
 ,

656 
XTextPr›îty
*

659 
XSëWMN‹mÆHöts
(

660 
Di•œy
* ,

661 
Wödow
 ,

662 
XSizeHöts
*

665 
XSëWMPr›îtõs
(

666 
Di•œy
* ,

667 
Wödow
 ,

668 
XTextPr›îty
* ,

669 
XTextPr›îty
* ,

672 
XSizeHöts
* ,

673 
XWMHöts
* ,

674 
XCœssHöt
*

677 
XmbSëWMPr›îtõs
(

678 
Di•œy
* ,

679 
Wödow
 ,

680 
_Xc⁄°
 * ,

681 
_Xc⁄°
 * ,

684 
XSizeHöts
* ,

685 
XWMHöts
* ,

686 
XCœssHöt
*

689 
Xutf8SëWMPr›îtõs
(

690 
Di•œy
* ,

691 
Wödow
 ,

692 
_Xc⁄°
 * ,

693 
_Xc⁄°
 * ,

696 
XSizeHöts
* ,

697 
XWMHöts
* ,

698 
XCœssHöt
*

701 
XSëWMSizeHöts
(

702 
Di•œy
* ,

703 
Wödow
 ,

704 
XSizeHöts
* ,

705 
Atom


708 
XSëRegi⁄
(

709 
Di•œy
* ,

710 
GC
 ,

711 
Regi⁄


714 
XSëSènd¨dCﬁ‹m≠
(

715 
Di•œy
* ,

716 
Wödow
 ,

717 
XSènd¨dCﬁ‹m≠
* ,

718 
Atom


721 
XSëZoomHöts
(

722 
Di•œy
* ,

723 
Wödow
 ,

724 
XSizeHöts
*

727 
XShrökRegi⁄
(

728 
Regi⁄
 ,

733 
Sètus
 
XSåögLi°ToTextPr›îty
(

736 
XTextPr›îty
*

739 
XSubåa˘Regi⁄
(

740 
Regi⁄
 ,

741 
Regi⁄
 ,

742 
Regi⁄


745 
XmbTextLi°ToTextPr›îty
(

746 
Di•œy
* 
di•œy
,

747 ** 
li°
,

748 
cou¡
,

749 
XICCEncodögStyÀ
 
°yÀ
,

750 
XTextPr›îty
* 
ãxt_¥›_ªtu∫


753 
XwcTextLi°ToTextPr›îty
(

754 
Di•œy
* 
di•œy
,

755 
wch¨_t
** 
li°
,

756 
cou¡
,

757 
XICCEncodögStyÀ
 
°yÀ
,

758 
XTextPr›îty
* 
ãxt_¥›_ªtu∫


761 
Xutf8TextLi°ToTextPr›îty
(

762 
Di•œy
* 
di•œy
,

763 ** 
li°
,

764 
cou¡
,

765 
XICCEncodögStyÀ
 
°yÀ
,

766 
XTextPr›îty
* 
ãxt_¥›_ªtu∫


769 
XwcFªeSåögLi°
(

770 
wch¨_t
** 
li°


773 
Sètus
 
XTextPr›îtyToSåögLi°
(

774 
XTextPr›îty
* ,

779 
XmbTextPr›îtyToTextLi°
(

780 
Di•œy
* 
di•œy
,

781 c⁄° 
XTextPr›îty
* 
ãxt_¥›
,

782 *** 
li°_ªtu∫
,

783 * 
cou¡_ªtu∫


786 
XwcTextPr›îtyToTextLi°
(

787 
Di•œy
* 
di•œy
,

788 c⁄° 
XTextPr›îty
* 
ãxt_¥›
,

789 
wch¨_t
*** 
li°_ªtu∫
,

790 * 
cou¡_ªtu∫


793 
Xutf8TextPr›îtyToTextLi°
(

794 
Di•œy
* 
di•œy
,

795 c⁄° 
XTextPr›îty
* 
ãxt_¥›
,

796 *** 
li°_ªtu∫
,

797 * 
cou¡_ªtu∫


800 
XUni⁄Re˘WôhRegi⁄
(

801 
XRe˘™gÀ
* ,

802 
Regi⁄
 ,

803 
Regi⁄


806 
XUni⁄Regi⁄
(

807 
Regi⁄
 ,

808 
Regi⁄
 ,

809 
Regi⁄


812 
XWMGeomëry
(

813 
Di•œy
* ,

815 
_Xc⁄°
 * ,

816 
_Xc⁄°
 * ,

818 
XSizeHöts
* ,

826 
XX‹Regi⁄
(

827 
Regi⁄
 ,

828 
Regi⁄
 ,

829 
Regi⁄


832 #ifde‡
__˛™g__


833 #¥agm®
˛™g
 
dügno°ic
 
p›


836 
	g_XFUNCPROTOEND


	@/usr/include/X11/extensions/shape.h

27 #i‚de‡
_SHAPE_H_


28 
	#_SHAPE_H_


	)

30 
	~<X11/Xfun˝rŸo.h
>

31 
	~<X11/exãnsi⁄s/sh≠ec⁄°.h
>

33 #i‚de‡
_SHAPE_SERVER_


34 
	~<X11/Xutû.h
>

37 
	mty≥
;

38 
	m£rül
;

39 
Boﬁ
 
	m£nd_evít
;

40 
Di•œy
 *
	mdi•œy
;

41 
Wödow
 
	mwödow
;

42 
	mköd
;

43 
	mx
, 
	my
;

44 
	mwidth
, 
	mheight
;

45 
Time
 
	mtime
;

46 
Boﬁ
 
	msh≠ed
;

47 } 
	tXSh≠eEvít
;

49 
_XFUNCPROTOBEGIN


51 
Boﬁ
 
XSh≠eQuîyExãnsi⁄
 (

52 
Di•œy
* ,

57 
Sètus
 
XSh≠eQuîyVîsi⁄
 (

58 
Di•œy
* ,

63 
XSh≠eComböeRegi⁄
 (

64 
Di•œy
* ,

65 
Wödow
 ,

69 
Regi⁄
 ,

73 
XSh≠eComböeRe˘™gÀs
 (

74 
Di•œy
* ,

75 
Wödow
 ,

79 
XRe˘™gÀ
* ,

85 
XSh≠eComböeMask
 (

86 
Di•œy
* ,

87 
Wödow
 ,

91 
Pixm≠
 ,

95 
XSh≠eComböeSh≠e
 (

96 
Di•œy
* ,

97 
Wödow
 ,

101 
Wödow
 ,

106 
XSh≠eOff£tSh≠e
 (

107 
Di•œy
* ,

108 
Wödow
 ,

114 
Sètus
 
XSh≠eQuîyExã¡s
 (

115 
Di•œy
* ,

116 
Wödow
 ,

117 
Boﬁ
* ,

122 
Boﬁ
* ,

129 
XSh≠eSñe˘I≈ut
 (

130 
Di•œy
* ,

131 
Wödow
 ,

135 
XSh≠eI≈utSñe˘ed
 (

136 
Di•œy
* ,

137 
Wödow


140 
XRe˘™gÀ
 *
XSh≠eGëRe˘™gÀs
 (

141 
Di•œy
* ,

142 
Wödow
 ,

148 
	g_XFUNCPROTOEND


	@/usr/include/X11/xpm.h

45 #i‚de‡
XPM_h


46 
	#XPM_h


	)

60 
	#XpmF‹m©
 3

	)

61 
	#XpmVîsi⁄
 4

	)

62 
	#XpmRevisi⁄
 11

	)

63 
	#XpmIn˛udeVîsi⁄
 ((
XpmF‹m©
 * 100 + 
XpmVîsi⁄
Ë* 100 + 
XpmRevisi⁄
)

	)

65 #i‚de‡
XPM_NUMBERS


67 #ifde‡
FOR_MSW


68 
	#SYSV


	)

69 
	~<mÆloc.h
>

70 
	~"simx.h
"

71 
	#NEED_STRCASECMP


	)

73 #ifde‡
AMIGA


74 
	~"amigax.h
"

76 
	~<X11/Xlib.h
>

77 
	~<X11/Xutû.h
>

82 #i‡! 
deföed
(
_XtI¡rösic_h
Ë&& ! deföed(
PIXEL_ALREADY_TYPEDEFED
)

83 
	tPixñ
;

84 
	#PIXEL_ALREADY_TYPEDEFED


	)

93 
	#XpmCﬁ‹Eº‹
 1

	)

94 
	#XpmSuc˚ss
 0

	)

95 
	#XpmO≥nFaûed
 -1

	)

96 
	#XpmFûeInvÆid
 -2

	)

97 
	#XpmNoMem‹y
 -3

	)

98 
	#XpmCﬁ‹Faûed
 -4

	)

101 *
	m«me
;

102 *
	mvÆue
;

103 
Pixñ
 
	mpixñ
;

104 } 
	tXpmCﬁ‹Symbﬁ
;

107 *
	m«me
;

108 
	m∆öes
;

109 **
	mlöes
;

110 } 
	tXpmExãnsi⁄
;

113 *
	m°rög
;

114 *
	msymbﬁic
;

115 *
	mm_cﬁ‹
;

116 *
	mg4_cﬁ‹
;

117 *
	mg_cﬁ‹
;

118 *
	mc_cﬁ‹
;

119 } 
	tXpmCﬁ‹
;

122 
	mwidth
;

123 
	mheight
;

124 
	m˝p
;

125 
	mncﬁ‹s
;

126 
XpmCﬁ‹
 *
	mcﬁ‹TabÀ
;

127 *
	md©a
;

128 } 
	tXpmImage
;

131 
	mvÆuemask
;

132 *
	mhöts_cmt
;

133 *
	mcﬁ‹s_cmt
;

134 *
	mpixñs_cmt
;

135 
	mx_hŸ•Ÿ
;

136 
	my_hŸ•Ÿ
;

137 
	m√xãnsi⁄s
;

138 
XpmExãnsi⁄
 *
	mexãnsi⁄s
;

139 } 
	tXpmInfo
;

141 (*
	tXpmAŒocCﬁ‹Func
)(

142 
	tDi•œy
* ,

143 
	tCﬁ‹m≠
 ,

145 
	tXCﬁ‹
* ,

149 (*
	tXpmFªeCﬁ‹sFunc
)(

150 
	tDi•œy
* ,

151 
	tCﬁ‹m≠
 ,

152 
	tPixñ
* ,

158 
vÆuemask
;

161 
VisuÆ
 *
visuÆ
;

162 
Cﬁ‹m≠
 
cﬁ‹m≠
;

163 
dïth
;

164 
width
;

166 
height
;

168 
x_hŸ•Ÿ
;

170 
y_hŸ•Ÿ
;

172 
˝p
;

174 
Pixñ
 *
pixñs
;

175 
≈ixñs
;

176 
XpmCﬁ‹Symbﬁ
 *
cﬁ‹symbﬁs
;

177 
numsymbﬁs
;

178 *
rgb_‚ame
;

179 
√xãnsi⁄s
;

180 
XpmExãnsi⁄
 *
exãnsi⁄s
;

182 
ncﬁ‹s
;

183 
XpmCﬁ‹
 *
cﬁ‹TabÀ
;

185 *
höts_cmt
;

186 *
cﬁ‹s_cmt
;

187 *
pixñs_cmt
;

189 
mask_pixñ
;

193 
Boﬁ
 
exa˘Cﬁ‹s
;

194 
˛o£√ss
;

195 
ªd_˛o£√ss
;

196 
gªí_˛o£√ss
;

197 
blue_˛o£√ss
;

198 
cﬁ‹_key
;

200 
Pixñ
 *
Æloc_pixñs
;

202 
«Œoc_pixñs
;

205 
Boﬁ
 
Æloc_˛o£_cﬁ‹s
;

208 
bôm≠_f‹m©
;

212 
XpmAŒocCﬁ‹Func
 
Æloc_cﬁ‹
;

213 
XpmFªeCﬁ‹sFunc
 
‰ì_cﬁ‹s
;

214 *
cﬁ‹_˛osuª
;

217 } 
	tXpmAâribuãs
;

220 
	#XpmVisuÆ
 (1L<<0)

	)

221 
	#XpmCﬁ‹m≠
 (1L<<1)

	)

222 
	#XpmDïth
 (1L<<2)

	)

223 
	#XpmSize
 (1L<<3Ë

	)

224 
	#XpmHŸ•Ÿ
 (1L<<4Ë

	)

225 
	#XpmCh¨sPîPixñ
 (1L<<5)

	)

226 
	#XpmCﬁ‹Symbﬁs
 (1L<<6)

	)

227 
	#XpmRgbFûíame
 (1L<<7)

	)

229 
	#XpmInfos
 (1L<<8)

	)

230 
	#XpmRëu∫Infos
 
XpmInfos


	)

232 
	#XpmRëu∫Pixñs
 (1L<<9)

	)

233 
	#XpmExãnsi⁄s
 (1L<<10)

	)

234 
	#XpmRëu∫Exãnsi⁄s
 
XpmExãnsi⁄s


	)

236 
	#XpmExa˘Cﬁ‹s
 (1L<<11)

	)

237 
	#XpmClo£√ss
 (1L<<12)

	)

238 
	#XpmRGBClo£√ss
 (1L<<13)

	)

239 
	#XpmCﬁ‹Key
 (1L<<14)

	)

241 
	#XpmCﬁ‹TabÀ
 (1L<<15)

	)

242 
	#XpmRëu∫Cﬁ‹TabÀ
 
XpmCﬁ‹TabÀ


	)

244 
	#XpmRëu∫AŒocPixñs
 (1L<<16)

	)

245 
	#XpmAŒocClo£Cﬁ‹s
 (1L<<17)

	)

246 
	#XpmBôm≠F‹m©
 (1L<<18)

	)

248 
	#XpmAŒocCﬁ‹
 (1L<<19)

	)

249 
	#XpmFªeCﬁ‹s
 (1L<<20)

	)

250 
	#XpmCﬁ‹Closuª
 (1L<<21)

	)

254 
	#XpmCommíts
 
XpmInfos


	)

255 
	#XpmRëu∫Commíts
 
XpmCommíts


	)

258 #i‚de‡
FOR_MSW


259 
	#XpmUndefPixñ
 0x80000000

	)

262 
	#XpmUndefPixñ
 0x8000

	)

269 
	#XPM_MONO
 2

	)

270 
	#XPM_GREY4
 3

	)

271 
	#XPM_GRAY4
 3

	)

272 
	#XPM_GREY
 4

	)

273 
	#XPM_GRAY
 4

	)

274 
	#XPM_COLOR
 5

	)

278 
	#FUNC
(
f
, 
t
, 
p
Ëà‡
	)
p

279 
	#LFUNC
(
f
, 
t
, 
p
Ëà‡
	)
p

286 
_XFUNCPROTOBEGIN


291 #i‡!
	`deföed
(
FOR_MSW
Ë&& !deföed(
AMIGA
)

292 
	`FUNC
(
XpmCª©ePixm≠FromD©a
, , (
Di•œy
 *
di•œy
,

293 
DøwabÀ
 
d
,

294 **
d©a
,

295 
Pixm≠
 *
pixm≠_ªtu∫
,

296 
Pixm≠
 *
sh≠emask_ªtu∫
,

297 
XpmAâribuãs
 *
©åibuãs
));

299 
	`FUNC
(
XpmCª©eD©aFromPixm≠
, , (
Di•œy
 *
di•œy
,

300 ***
d©a_ªtu∫
,

301 
Pixm≠
 
pixm≠
,

302 
Pixm≠
 
sh≠emask
,

303 
XpmAâribuãs
 *
©åibuãs
));

305 
	`FUNC
(
XpmRódFûeToPixm≠
, , (
Di•œy
 *
di•œy
,

306 
DøwabÀ
 
d
,

307 c⁄° *
fûíame
,

308 
Pixm≠
 *
pixm≠_ªtu∫
,

309 
Pixm≠
 *
sh≠emask_ªtu∫
,

310 
XpmAâribuãs
 *
©åibuãs
));

312 
	`FUNC
(
XpmWrôeFûeFromPixm≠
, , (
Di•œy
 *
di•œy
,

313 c⁄° *
fûíame
,

314 
Pixm≠
 
pixm≠
,

315 
Pixm≠
 
sh≠emask
,

316 
XpmAâribuãs
 *
©åibuãs
));

319 
	`FUNC
(
XpmCª©eImageFromD©a
, , (
Di•œy
 *
di•œy
,

320 **
d©a
,

321 
XImage
 **
image_ªtu∫
,

322 
XImage
 **
sh≠emask_ªtu∫
,

323 
XpmAâribuãs
 *
©åibuãs
));

325 
	`FUNC
(
XpmCª©eD©aFromImage
, , (
Di•œy
 *
di•œy
,

326 ***
d©a_ªtu∫
,

327 
XImage
 *
image
,

328 
XImage
 *
sh≠eimage
,

329 
XpmAâribuãs
 *
©åibuãs
));

331 
	`FUNC
(
XpmRódFûeToImage
, , (
Di•œy
 *
di•œy
,

332 c⁄° *
fûíame
,

333 
XImage
 **
image_ªtu∫
,

334 
XImage
 **
sh≠eimage_ªtu∫
,

335 
XpmAâribuãs
 *
©åibuãs
));

337 
	`FUNC
(
XpmWrôeFûeFromImage
, , (
Di•œy
 *
di•œy
,

338 c⁄° *
fûíame
,

339 
XImage
 *
image
,

340 
XImage
 *
sh≠eimage
,

341 
XpmAâribuãs
 *
©åibuãs
));

343 
	`FUNC
(
XpmCª©eImageFromBuf„r
, , (
Di•œy
 *
di•œy
,

344 *
buf„r
,

345 
XImage
 **
image_ªtu∫
,

346 
XImage
 **
sh≠emask_ªtu∫
,

347 
XpmAâribuãs
 *
©åibuãs
));

348 #i‡!
	`deföed
(
FOR_MSW
Ë&& !deföed(
AMIGA
)

349 
	`FUNC
(
XpmCª©ePixm≠FromBuf„r
, , (
Di•œy
 *
di•œy
,

350 
DøwabÀ
 
d
,

351 *
buf„r
,

352 
Pixm≠
 *
pixm≠_ªtu∫
,

353 
Pixm≠
 *
sh≠emask_ªtu∫
,

354 
XpmAâribuãs
 *
©åibuãs
));

356 
	`FUNC
(
XpmCª©eBuf„rFromImage
, , (
Di•œy
 *
di•œy
,

357 **
buf„r_ªtu∫
,

358 
XImage
 *
image
,

359 
XImage
 *
sh≠eimage
,

360 
XpmAâribuãs
 *
©åibuãs
));

362 
	`FUNC
(
XpmCª©eBuf„rFromPixm≠
, , (
Di•œy
 *
di•œy
,

363 **
buf„r_ªtu∫
,

364 
Pixm≠
 
pixm≠
,

365 
Pixm≠
 
sh≠emask
,

366 
XpmAâribuãs
 *
©åibuãs
));

368 
	`FUNC
(
XpmRódFûeToBuf„r
, , (c⁄° *
fûíame
, **
buf„r_ªtu∫
));

369 
	`FUNC
(
XpmWrôeFûeFromBuf„r
, , (c⁄° *
fûíame
, *
buf„r
));

371 
	`FUNC
(
XpmRódFûeToD©a
, , (c⁄° *
fûíame
, ***
d©a_ªtu∫
));

372 
	`FUNC
(
XpmWrôeFûeFromD©a
, , (c⁄° *
fûíame
, **
d©a
));

374 
	`FUNC
(
XpmAâribuãsSize
, , ());

375 
	`FUNC
(
XpmFªeAâribuãs
, , (
XpmAâribuãs
 *
©åibuãs
));

376 
	`FUNC
(
XpmFªeExãnsi⁄s
, , (
XpmExãnsi⁄
 *
exãnsi⁄s
,

377 
√xãnsi⁄s
));

379 
	`FUNC
(
XpmFªeXpmImage
, , (
XpmImage
 *
image
));

380 
	`FUNC
(
XpmFªeXpmInfo
, , (
XpmInfo
 *
öfo
));

381 
	`FUNC
(
XpmGëEº‹Såög
, *, (
îrcode
));

382 
	`FUNC
(
XpmLibøryVîsi⁄
, , ());

385 
	`FUNC
(
XpmRódFûeToXpmImage
, , (c⁄° *
fûíame
,

386 
XpmImage
 *
image
,

387 
XpmInfo
 *
öfo
));

389 
	`FUNC
(
XpmWrôeFûeFromXpmImage
, , (c⁄° *
fûíame
,

390 
XpmImage
 *
image
,

391 
XpmInfo
 *
öfo
));

392 #i‡!
	`deföed
(
FOR_MSW
Ë&& !deföed(
AMIGA
)

393 
	`FUNC
(
XpmCª©ePixm≠FromXpmImage
, , (
Di•œy
 *
di•œy
,

394 
DøwabÀ
 
d
,

395 
XpmImage
 *
image
,

396 
Pixm≠
 *
pixm≠_ªtu∫
,

397 
Pixm≠
 *
sh≠emask_ªtu∫
,

398 
XpmAâribuãs
 *
©åibuãs
));

400 
	`FUNC
(
XpmCª©eImageFromXpmImage
, , (
Di•œy
 *
di•œy
,

401 
XpmImage
 *
image
,

402 
XImage
 **
image_ªtu∫
,

403 
XImage
 **
sh≠eimage_ªtu∫
,

404 
XpmAâribuãs
 *
©åibuãs
));

406 
	`FUNC
(
XpmCª©eXpmImageFromImage
, , (
Di•œy
 *
di•œy
,

407 
XImage
 *
image
,

408 
XImage
 *
sh≠eimage
,

409 
XpmImage
 *
xpmimage
,

410 
XpmAâribuãs
 *
©åibuãs
));

411 #i‡!
	`deföed
(
FOR_MSW
Ë&& !deföed(
AMIGA
)

412 
	`FUNC
(
XpmCª©eXpmImageFromPixm≠
, , (
Di•œy
 *
di•œy
,

413 
Pixm≠
 
pixm≠
,

414 
Pixm≠
 
sh≠emask
,

415 
XpmImage
 *
xpmimage
,

416 
XpmAâribuãs
 *
©åibuãs
));

418 
	`FUNC
(
XpmCª©eD©aFromXpmImage
, , (***
d©a_ªtu∫
,

419 
XpmImage
 *
image
,

420 
XpmInfo
 *
öfo
));

422 
	`FUNC
(
XpmCª©eXpmImageFromD©a
, , (**
d©a
,

423 
XpmImage
 *
image
,

424 
XpmInfo
 *
öfo
));

426 
	`FUNC
(
XpmCª©eXpmImageFromBuf„r
, , (*
buf„r
,

427 
XpmImage
 *
image
,

428 
XpmInfo
 *
öfo
));

430 
	`FUNC
(
XpmCª©eBuf„rFromXpmImage
, , (**
buf„r_ªtu∫
,

431 
XpmImage
 *
image
,

432 
XpmInfo
 *
öfo
));

434 
	`FUNC
(
XpmGëP¨£Eº‹
, , (*
fûíame
,

435 *
löíum_ªtu∫
,

436 *
ch¨num_ªtu∫
));

438 
	`FUNC
(
XpmFªe
, , (*
±r
));

440 
_XFUNCPROTOEND


445 
	#XpmPixm≠Cﬁ‹Eº‹
 
XpmCﬁ‹Eº‹


	)

446 
	#XpmPixm≠Suc˚ss
 
XpmSuc˚ss


	)

447 
	#XpmPixm≠O≥nFaûed
 
XpmO≥nFaûed


	)

448 
	#XpmPixm≠FûeInvÆid
 
XpmFûeInvÆid


	)

449 
	#XpmPixm≠NoMem‹y
 
XpmNoMem‹y


	)

450 
	#XpmPixm≠Cﬁ‹Faûed
 
XpmCﬁ‹Faûed


	)

452 
	#XpmRódPixm≠Fûe
(
dpy
, 
d
, 
fûe
, 
pix
, 
mask
, 
©t
) \

453 
	`XpmRódFûeToPixm≠
(
dpy
, 
d
, 
fûe
, 
pix
, 
mask
, 
©t
)

	)

454 
	#XpmWrôePixm≠Fûe
(
dpy
, 
fûe
, 
pix
, 
mask
, 
©t
) \

455 
	`XpmWrôeFûeFromPixm≠
(
dpy
, 
fûe
, 
pix
, 
mask
, 
©t
)

	)

458 
	#Pixm≠Cﬁ‹Eº‹
 
XpmCﬁ‹Eº‹


	)

459 
	#Pixm≠Suc˚ss
 
XpmSuc˚ss


	)

460 
	#Pixm≠O≥nFaûed
 
XpmO≥nFaûed


	)

461 
	#Pixm≠FûeInvÆid
 
XpmFûeInvÆid


	)

462 
	#Pixm≠NoMem‹y
 
XpmNoMem‹y


	)

463 
	#Pixm≠Cﬁ‹Faûed
 
XpmCﬁ‹Faûed


	)

465 
	#Cﬁ‹Symbﬁ
 
XpmCﬁ‹Symbﬁ


	)

467 
	#XRódPixm≠Fûe
(
dpy
, 
d
, 
fûe
, 
pix
, 
mask
, 
©t
) \

468 
	`XpmRódFûeToPixm≠
(
dpy
, 
d
, 
fûe
, 
pix
, 
mask
, 
©t
)

	)

469 
	#XWrôePixm≠Fûe
(
dpy
, 
fûe
, 
pix
, 
mask
, 
©t
) \

470 
	`XpmWrôeFûeFromPixm≠
(
dpy
, 
fûe
, 
pix
, 
mask
, 
©t
)

	)

471 
	#XCª©ePixm≠FromD©a
(
dpy
, 
d
, 
d©a
, 
pix
, 
mask
, 
©t
) \

472 
	`XpmCª©ePixm≠FromD©a
(
dpy
, 
d
, 
d©a
, 
pix
, 
mask
, 
©t
)

	)

473 
	#XCª©eD©aFromPixm≠
(
dpy
, 
d©a
, 
pix
, 
mask
, 
©t
) \

474 
	`XpmCª©eD©aFromPixm≠
(
dpy
, 
d©a
, 
pix
, 
mask
, 
©t
)

	)

	@/usr/include/locale.h

22 #i‚def 
_LOCALE_H


23 
	#_LOCALE_H
 1

	)

25 
	~<„©uªs.h
>

27 
	#__√ed_NULL


	)

28 
	~<°ddef.h
>

29 
	~<bôs/loˇÀ.h
>

31 
	g__BEGIN_DECLS


35 
	#LC_CTYPE
 
__LC_CTYPE


	)

36 
	#LC_NUMERIC
 
__LC_NUMERIC


	)

37 
	#LC_TIME
 
__LC_TIME


	)

38 
	#LC_COLLATE
 
__LC_COLLATE


	)

39 
	#LC_MONETARY
 
__LC_MONETARY


	)

40 
	#LC_MESSAGES
 
__LC_MESSAGES


	)

41 
	#LC_ALL
 
__LC_ALL


	)

42 
	#LC_PAPER
 
__LC_PAPER


	)

43 
	#LC_NAME
 
__LC_NAME


	)

44 
	#LC_ADDRESS
 
__LC_ADDRESS


	)

45 
	#LC_TELEPHONE
 
__LC_TELEPHONE


	)

46 
	#LC_MEASUREMENT
 
__LC_MEASUREMENT


	)

47 
	#LC_IDENTIFICATION
 
__LC_IDENTIFICATION


	)

51 
	slc⁄v


55 *
	mdecimÆ_poöt
;

56 *
	mthoußnds_£p
;

62 *
	mgroupög
;

68 *
	möt_cuº_symbﬁ
;

69 *
	mcuºícy_symbﬁ
;

70 *
	mm⁄_decimÆ_poöt
;

71 *
	mm⁄_thoußnds_£p
;

72 *
	mm⁄_groupög
;

73 *
	mposôive_sign
;

74 *
	m√g©ive_sign
;

75 
	möt_‰ac_digôs
;

76 
	m‰ac_digôs
;

78 
	mp_cs_¥e˚des
;

80 
	mp_£p_by_•a˚
;

82 
	mn_cs_¥e˚des
;

84 
	mn_£p_by_•a˚
;

91 
	mp_sign_po¢
;

92 
	mn_sign_po¢
;

93 #ifde‡
__USE_ISOC99


95 
	möt_p_cs_¥e˚des
;

97 
	möt_p_£p_by_•a˚
;

99 
	möt_n_cs_¥e˚des
;

101 
	möt_n_£p_by_•a˚
;

108 
	möt_p_sign_po¢
;

109 
	möt_n_sign_po¢
;

111 
	m__öt_p_cs_¥e˚des
;

112 
	m__öt_p_£p_by_•a˚
;

113 
	m__öt_n_cs_¥e˚des
;

114 
	m__öt_n_£p_by_•a˚
;

115 
	m__öt_p_sign_po¢
;

116 
	m__öt_n_sign_po¢
;

122 *
	$£éoˇÀ
 (
__ˇãg‹y
, c⁄° *
__loˇÀ
Ë
__THROW
;

125 
lc⁄v
 *
	$loˇÀc⁄v
 (Ë
__THROW
;

128 #ifdef 
__USE_XOPEN2K8


135 
	~<bôs/ty≥s/loˇÀ_t.h
>

141 
loˇÀ_t
 
	$√wloˇÀ
 (
__ˇãg‹y_mask
, c⁄° *
__loˇÀ
,

142 
loˇÀ_t
 
__ba£
Ë
__THROW
;

148 
	#LC_CTYPE_MASK
 (1 << 
__LC_CTYPE
)

	)

149 
	#LC_NUMERIC_MASK
 (1 << 
__LC_NUMERIC
)

	)

150 
	#LC_TIME_MASK
 (1 << 
__LC_TIME
)

	)

151 
	#LC_COLLATE_MASK
 (1 << 
__LC_COLLATE
)

	)

152 
	#LC_MONETARY_MASK
 (1 << 
__LC_MONETARY
)

	)

153 
	#LC_MESSAGES_MASK
 (1 << 
__LC_MESSAGES
)

	)

154 
	#LC_PAPER_MASK
 (1 << 
__LC_PAPER
)

	)

155 
	#LC_NAME_MASK
 (1 << 
__LC_NAME
)

	)

156 
	#LC_ADDRESS_MASK
 (1 << 
__LC_ADDRESS
)

	)

157 
	#LC_TELEPHONE_MASK
 (1 << 
__LC_TELEPHONE
)

	)

158 
	#LC_MEASUREMENT_MASK
 (1 << 
__LC_MEASUREMENT
)

	)

159 
	#LC_IDENTIFICATION_MASK
 (1 << 
__LC_IDENTIFICATION
)

	)

160 
	#LC_ALL_MASK
 (
LC_CTYPE_MASK
 \

161 | 
LC_NUMERIC_MASK
 \

162 | 
LC_TIME_MASK
 \

163 | 
LC_COLLATE_MASK
 \

164 | 
LC_MONETARY_MASK
 \

165 | 
LC_MESSAGES_MASK
 \

166 | 
LC_PAPER_MASK
 \

167 | 
LC_NAME_MASK
 \

168 | 
LC_ADDRESS_MASK
 \

169 | 
LC_TELEPHONE_MASK
 \

170 | 
LC_MEASUREMENT_MASK
 \

171 | 
LC_IDENTIFICATION_MASK
 \

172 )

	)

176 
loˇÀ_t
 
	$du∂oˇÀ
 (
loˇÀ_t
 
__d©a£t
Ë
__THROW
;

180 
	$‰ìloˇÀ
 (
loˇÀ_t
 
__d©a£t
Ë
__THROW
;

187 
loˇÀ_t
 
	$u£loˇÀ
 (
loˇÀ_t
 
__d©a£t
Ë
__THROW
;

191 
	#LC_GLOBAL_LOCALE
 ((
loˇÀ_t
Ë-1L)

	)

195 
__END_DECLS


	@/usr/include/math.h

23 #i‚def 
_MATH_H


24 
	#_MATH_H
 1

	)

26 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

27 
	~<bôs/libc-hódî-°¨t.h
>

29 #i‡
deföed
 
log
 && deföed 
__GNUC__


30 #w¨nög 
A
 
ma¸o
 
ˇŒed
 
log
 
was
 
Æªady
 
deföed
 
whí
 <
m©h
.
h
> wa†
ö˛uded
.

31 #w¨nög 
This
 
wûl
 
ˇu£
 
compû©i⁄
 
¥obÀms
.

34 
	g__BEGIN_DECLS


37 
	~<bôs/ty≥s.h
>

40 
	~<bôs/m©h-ve˘‹.h
>

43 
	~<bôs/Êﬂä.h
>

47 #i‡
__GNUC_PREREQ
 (3, 3)

48 
	#HUGE_VAL
 (
	`__buûtö_huge_vÆ
 ())

	)

55 
	#HUGE_VAL
 1e10000

	)

57 #ifde‡
__USE_ISOC99


58 #i‡
__GNUC_PREREQ
 (3, 3)

59 
	#HUGE_VALF
 (
	`__buûtö_huge_vÆf
 ())

	)

60 
	#HUGE_VALL
 (
	`__buûtö_huge_vÆl
 ())

	)

62 
	#HUGE_VALF
 1e10000f

	)

63 
	#HUGE_VALL
 1e10000L

	)

66 #i‡
__HAVE_FLOAT16
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

67 
	#HUGE_VAL_F16
 (
	`__buûtö_huge_vÆf16
 ())

	)

69 #i‡
__HAVE_FLOAT32
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

70 
	#HUGE_VAL_F32
 (
	`__buûtö_huge_vÆf32
 ())

	)

72 #i‡
__HAVE_FLOAT64
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

73 
	#HUGE_VAL_F64
 (
	`__buûtö_huge_vÆf64
 ())

	)

75 #i‡
__HAVE_FLOAT128
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

76 
	#HUGE_VAL_F128
 (
	`__buûtö_huge_vÆf128
 ())

	)

78 #i‡
__HAVE_FLOAT32X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

79 
	#HUGE_VAL_F32X
 (
	`__buûtö_huge_vÆf32x
 ())

	)

81 #i‡
__HAVE_FLOAT64X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

82 
	#HUGE_VAL_F64X
 (
	`__buûtö_huge_vÆf64x
 ())

	)

84 #i‡
__HAVE_FLOAT128X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

85 
	#HUGE_VAL_F128X
 (
	`__buûtö_huge_vÆf128x
 ())

	)

88 #ifde‡
__USE_ISOC99


90 #i‡
__GNUC_PREREQ
 (3, 3)

91 
	#INFINITY
 (
	`__buûtö_öff
 ())

	)

93 
	#INFINITY
 
HUGE_VALF


	)

97 #i‡
__GNUC_PREREQ
 (3, 3)

98 
	#NAN
 (
	`__buûtö_«nf
 (""))

	)

103 
	#NAN
 (0.0‡/ 0.0f)

	)

107 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

109 #i‡
__GNUC_PREREQ
 (3, 3)

110 
	#SNANF
 (
	`__buûtö_«nsf
 (""))

	)

111 
	#SNAN
 (
	`__buûtö_«ns
 (""))

	)

112 
	#SNANL
 (
	`__buûtö_«n¶
 (""))

	)

115 #i‡(
__HAVE_FLOAT16
 \

116 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
) \

117 && (
deföed
 
	g__USE_GNU
 || !
	$__GLIBC_USE
 (
ISOC2X
)))

118 
	#SNANF16
 (
	`__buûtö_«nsf16
 (""))

	)

120 #i‡(
__HAVE_FLOAT32
 \

121 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
) \

122 && (
deföed
 
__USE_GNU
 || !
	$__GLIBC_USE
 (
ISOC2X
)))

123 
	#SNANF32
 (
	`__buûtö_«nsf32
 (""))

	)

125 #i‡(
__HAVE_FLOAT64
 \

126 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
) \

127 && (
deföed
 
__USE_GNU
 || !
	$__GLIBC_USE
 (
ISOC2X
)))

128 
	#SNANF64
 (
	`__buûtö_«nsf64
 (""))

	)

130 #i‡(
__HAVE_FLOAT128
 \

131 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
) \

132 && (
deföed
 
__USE_GNU
 || !
	$__GLIBC_USE
 (
ISOC2X
)))

133 
	#SNANF128
 (
	`__buûtö_«nsf128
 (""))

	)

135 #i‡(
__HAVE_FLOAT32X
 \

136 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
) \

137 && (
deföed
 
__USE_GNU
 || !
	$__GLIBC_USE
 (
ISOC2X
)))

138 
	#SNANF32X
 (
	`__buûtö_«nsf32x
 (""))

	)

140 #i‡(
__HAVE_FLOAT64X
 \

141 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
) \

142 && (
deföed
 
__USE_GNU
 || !
	$__GLIBC_USE
 (
ISOC2X
)))

143 
	#SNANF64X
 (
	`__buûtö_«nsf64x
 (""))

	)

145 #i‡(
__HAVE_FLOAT128X
 \

146 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
) \

147 && (
deföed
 
__USE_GNU
 || !
	$__GLIBC_USE
 (
ISOC2X
)))

148 
	#SNANF128X
 (
	`__buûtö_«nsf128x
 (""))

	)

152 
	~<bôs/Êt-evÆ-mëhod.h
>

154 #ifde‡
__USE_ISOC99


162 #i‡
__GLIBC_FLT_EVAL_METHOD
 == 0 || __GLIBC_FLT_EVAL_METHOD == 16

163 
	tÊﬂt_t
;

164 
	tdoubÀ_t
;

165 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 1

166 
	tÊﬂt_t
;

167 
	tdoubÀ_t
;

168 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 2

169 
	tÊﬂt_t
;

170 
	tdoubÀ_t
;

171 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 32

172 
_Flﬂt32
 
	tÊﬂt_t
;

173 
	tdoubÀ_t
;

174 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 33

175 
_Flﬂt32x
 
	tÊﬂt_t
;

176 
_Flﬂt32x
 
	tdoubÀ_t
;

177 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 64

178 
_Flﬂt64
 
	tÊﬂt_t
;

179 
_Flﬂt64
 
	tdoubÀ_t
;

180 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 65

181 
_Flﬂt64x
 
	tÊﬂt_t
;

182 
_Flﬂt64x
 
	tdoubÀ_t
;

183 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 128

184 
_Flﬂt128
 
	tÊﬂt_t
;

185 
_Flﬂt128
 
	tdoubÀ_t
;

186 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 129

187 
_Flﬂt128x
 
	tÊﬂt_t
;

188 
_Flﬂt128x
 
	tdoubÀ_t
;

204 
	~<bôs/Â-logb.h
>

205 #ifde‡
__USE_ISOC99


206 #i‡
__FP_LOGB0_IS_MIN


207 
	#FP_ILOGB0
 (-2147483647 - 1)

	)

209 
	#FP_ILOGB0
 (-2147483647)

	)

211 #i‡
__FP_LOGBNAN_IS_MIN


212 
	#FP_ILOGBNAN
 (-2147483647 - 1)

	)

214 
	#FP_ILOGBNAN
 2147483647

	)

217 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

218 #i‡
__WORDSIZE
 == 32

219 
	#__FP_LONG_MAX
 0x7fffffffL

	)

221 
	#__FP_LONG_MAX
 0x7fffffffffffffffL

	)

223 #i‡
__FP_LOGB0_IS_MIN


224 
	#FP_LLOGB0
 (-
__FP_LONG_MAX
 - 1)

	)

226 
	#FP_LLOGB0
 (-
__FP_LONG_MAX
)

	)

228 #i‡
__FP_LOGBNAN_IS_MIN


229 
	#FP_LLOGBNAN
 (-
__FP_LONG_MAX
 - 1)

	)

231 
	#FP_LLOGBNAN
 
__FP_LONG_MAX


	)

247 
	~<bôs/Â-Á°.h
>

249 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

253 
FP_INT_UPWARD
 =

254 
	#FP_INT_UPWARD
 0

	)

255 
FP_INT_UPWARD
,

256 
FP_INT_DOWNWARD
 =

257 
	#FP_INT_DOWNWARD
 1

	)

258 
FP_INT_DOWNWARD
,

259 
FP_INT_TOWARDZERO
 =

260 
	#FP_INT_TOWARDZERO
 2

	)

261 
FP_INT_TOWARDZERO
,

262 
FP_INT_TONEARESTFROMZERO
 =

263 
	#FP_INT_TONEARESTFROMZERO
 3

	)

264 
FP_INT_TONEARESTFROMZERO
,

265 
FP_INT_TONEAREST
 =

266 
	#FP_INT_TONEAREST
 4

	)

267 
FP_INT_TONEAREST
,

276 
	#__SIMD_DECL
(
fun˘i⁄
Ë
	`__CONCAT
 (
__DECL_SIMD_
, fun˘i⁄)

	)

278 
	#__MATHCALL_VEC
(
fun˘i⁄
, 
suffix
, 
¨gs
) \

279 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

280 
	`__MATHCALL
 (
fun˘i⁄
, 
suffix
, 
¨gs
)

	)

282 
	#__MATHDECL_VEC
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

283 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

284 
	`__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
)

	)

286 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

287 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

288 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

289 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

290 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

291 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

292 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

293 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

294 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

295 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

296 
	#__MATHDECL_1_IMPL
(
ty≥
, 
fun˘i⁄
, 
suffix
, 
¨gs
) \

297 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

298 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
, 
suffix
, 
¨gs
) \

299 
	`__MATHDECL_1_IMPL
(
ty≥
, 
fun˘i⁄
, 
suffix
, 
¨gs
)

	)

302 
	#__MATHDECL_ALIAS
(
ty≥
, 
fun˘i⁄
, 
suffix
, 
¨gs
, 
Æüs
) \

303 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
, 
suffix
, 
¨gs
)

	)

305 
	#__MATHREDIR
(
ty≥
, 
fun˘i⁄
, 
suffix
, 
¨gs
, 
to
) \

306 
ty≥
 
	`__REDIRECT_NTH
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
), 
¨gs
, 
to
)

	)

308 
	#_MdoubÀ_
 

	)

309 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

310 
	#__MATH_DECLARING_DOUBLE
 1

	)

311 
	#__MATH_DECLARING_FLOATN
 0

	)

312 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

313 
	~<bôs/m©hˇŒs.h
>

314 #unde‡
_MdoubÀ_


315 #unde‡
__MATH_PRECNAME


316 #unde‡
__MATH_DECLARING_DOUBLE


317 #unde‡
__MATH_DECLARING_FLOATN


319 #ifde‡
__USE_ISOC99


325 
	#_MdoubÀ_
 

	)

326 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

327 
	#__MATH_DECLARING_DOUBLE
 0

	)

328 
	#__MATH_DECLARING_FLOATN
 0

	)

329 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

330 
	~<bôs/m©hˇŒs.h
>

331 #unde‡
_MdoubÀ_


332 #unde‡
__MATH_PRECNAME


333 #unde‡
__MATH_DECLARING_DOUBLE


334 #unde‡
__MATH_DECLARING_FLOATN


336 #i‡!(
deföed
 
__NO_LONG_DOUBLE_MATH
 && deföed 
_LIBC
) \

337 || 
deföed
 
__LDBL_COMPAT
 \

338 || 
deföed
 
_LIBC_TEST


339 #ifde‡
__LDBL_COMPAT


341 #ifde‡
__USE_ISOC99


342 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

343 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

344 #ifde‡
__REDIRECT_NTH


345 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

346 
__∆dbl_√xâow¨df
)

347 
	`__©åibuã__
 ((
__c⁄°__
));

348 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

349 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

350 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

351 (
__x
, 
__y
),

352 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

356 #unde‡
__MATHDECL_1


357 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

358 
	`__MATHREDIR
(
ty≥
, 
fun˘i⁄
, 
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

360 #ñi‡
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

361 #ifde‡
__REDIRECT_NTH


362 #ifde‡
__USE_ISOC99


363 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

364 
__√xâow¨df_to_õì128
)

365 
	`__©åibuã__
 ((
__c⁄°__
));

366 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

367 
__√xâow¨d_to_õì128
)

368 
	`__©åibuã__
 ((
__c⁄°__
));

370 
	#__dªmõì128
 
__ªmaödîõì128


	)

371 
	#__gammaõì128
 
__lgammaõì128


	)

376 #unde‡
__MATHDECL_1


377 #unde‡
__MATHDECL_ALIAS


379 
	#__REDIRTO
(
fun˘i⁄
, 
suffix
) \

380 
__
 ## 
fun˘i⁄
 ## 
õì128
 ## 
suffix


	)

381 
	#__REDIRTO_ALT
(
fun˘i⁄
, 
suffix
) \

382 
__
 ## 
fun˘i⁄
 ## 
f128
 ## 
suffix


	)

384 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
, 
suffix
, 
¨gs
) \

385 
	`__MATHREDIR
 (
ty≥
, 
fun˘i⁄
, 
suffix
, 
¨gs
, 
	`__REDIRTO
 (fun˘i⁄, suffix))

	)

386 
	#__MATHDECL_ALIAS
(
ty≥
, 
fun˘i⁄
, 
suffix
, 
¨gs
, 
Æüs
) \

387 
	`__MATHREDIR
 (
ty≥
, 
fun˘i⁄
, 
suffix
, 
¨gs
, 
	`__REDIRTO_ALT
 (
Æüs
, suffix))

	)

393 
	#_MdoubÀ_
 

	)

394 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

395 
	#__MATH_DECLARING_DOUBLE
 0

	)

396 
	#__MATH_DECLARING_FLOATN
 0

	)

397 
	#__MATH_DECLARE_LDOUBLE
 1

	)

398 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

399 
	~<bôs/m©hˇŒs.h
>

401 #unde‡
_MdoubÀ_


402 #unde‡
__MATH_PRECNAME


403 #unde‡
__MATH_DECLARING_DOUBLE


404 #unde‡
__MATH_DECLARING_FLOATN


406 #i‡
deföed
 
__LDBL_COMPAT
 \

407 || 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

408 #unde‡
__REDIRTO


409 #unde‡
__REDIRTO_ALT


410 #unde‡
__MATHDECL_1


411 #unde‡
__MATHDECL_ALIAS


412 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
, 
suffix
, 
¨gs
) \

413 
	`__MATHDECL_1_IMPL
(
ty≥
, 
fun˘i⁄
, 
suffix
, 
¨gs
)

	)

414 
	#__MATHDECL_ALIAS
(
ty≥
, 
fun˘i⁄
, 
suffix
, 
¨gs
, 
Æüs
) \

415 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
, 
suffix
, 
¨gs
)

	)

424 #i‡
__HAVE_DISTINCT_FLOAT16
 || (
__HAVE_FLOAT16
 && !
deföed
 
_LIBC
)

425 
	#_MdoubÀ_
 
_Flﬂt16


	)

426 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f16
##
	)
r

427 
	#__MATH_DECLARING_DOUBLE
 0

	)

428 
	#__MATH_DECLARING_FLOATN
 1

	)

429 #i‡
__HAVE_DISTINCT_FLOAT16


430 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

432 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

433 
	~<bôs/m©hˇŒs.h
>

435 #unde‡
_MdoubÀ_


436 #unde‡
__MATH_PRECNAME


437 #unde‡
__MATH_DECLARING_DOUBLE


438 #unde‡
__MATH_DECLARING_FLOATN


441 #i‡
__HAVE_DISTINCT_FLOAT32
 || (
__HAVE_FLOAT32
 && !
deföed
 
_LIBC
)

442 
	#_MdoubÀ_
 
_Flﬂt32


	)

443 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f32
##
	)
r

444 
	#__MATH_DECLARING_DOUBLE
 0

	)

445 
	#__MATH_DECLARING_FLOATN
 1

	)

446 #i‡
__HAVE_DISTINCT_FLOAT32


447 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

449 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

450 
	~<bôs/m©hˇŒs.h
>

452 #unde‡
_MdoubÀ_


453 #unde‡
__MATH_PRECNAME


454 #unde‡
__MATH_DECLARING_DOUBLE


455 #unde‡
__MATH_DECLARING_FLOATN


458 #i‡
__HAVE_DISTINCT_FLOAT64
 || (
__HAVE_FLOAT64
 && !
deföed
 
_LIBC
)

459 
	#_MdoubÀ_
 
_Flﬂt64


	)

460 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f64
##
	)
r

461 
	#__MATH_DECLARING_DOUBLE
 0

	)

462 
	#__MATH_DECLARING_FLOATN
 1

	)

463 #i‡
__HAVE_DISTINCT_FLOAT64


464 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

466 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

467 
	~<bôs/m©hˇŒs.h
>

469 #unde‡
_MdoubÀ_


470 #unde‡
__MATH_PRECNAME


471 #unde‡
__MATH_DECLARING_DOUBLE


472 #unde‡
__MATH_DECLARING_FLOATN


475 #i‡
__HAVE_DISTINCT_FLOAT128
 || (
__HAVE_FLOAT128
 && !
deföed
 
_LIBC
)

476 
	#_MdoubÀ_
 
_Flﬂt128


	)

477 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f128
##
	)
r

478 
	#__MATH_DECLARING_DOUBLE
 0

	)

479 
	#__MATH_DECLARING_FLOATN
 1

	)

480 #i‡
__HAVE_DISTINCT_FLOAT128


481 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

483 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

484 
	~<bôs/m©hˇŒs.h
>

486 #unde‡
_MdoubÀ_


487 #unde‡
__MATH_PRECNAME


488 #unde‡
__MATH_DECLARING_DOUBLE


489 #unde‡
__MATH_DECLARING_FLOATN


492 #i‡
__HAVE_DISTINCT_FLOAT32X
 || (
__HAVE_FLOAT32X
 && !
deföed
 
_LIBC
)

493 
	#_MdoubÀ_
 
_Flﬂt32x


	)

494 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f32x
##
	)
r

495 
	#__MATH_DECLARING_DOUBLE
 0

	)

496 
	#__MATH_DECLARING_FLOATN
 1

	)

497 #i‡
__HAVE_DISTINCT_FLOAT32X


498 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

500 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

501 
	~<bôs/m©hˇŒs.h
>

503 #unde‡
_MdoubÀ_


504 #unde‡
__MATH_PRECNAME


505 #unde‡
__MATH_DECLARING_DOUBLE


506 #unde‡
__MATH_DECLARING_FLOATN


509 #i‡
__HAVE_DISTINCT_FLOAT64X
 || (
__HAVE_FLOAT64X
 && !
deföed
 
_LIBC
)

510 
	#_MdoubÀ_
 
_Flﬂt64x


	)

511 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f64x
##
	)
r

512 
	#__MATH_DECLARING_DOUBLE
 0

	)

513 
	#__MATH_DECLARING_FLOATN
 1

	)

514 #i‡
__HAVE_DISTINCT_FLOAT64X


515 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

517 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

518 
	~<bôs/m©hˇŒs.h
>

520 #unde‡
_MdoubÀ_


521 #unde‡
__MATH_PRECNAME


522 #unde‡
__MATH_DECLARING_DOUBLE


523 #unde‡
__MATH_DECLARING_FLOATN


526 #i‡
__HAVE_DISTINCT_FLOAT128X
 || (
__HAVE_FLOAT128X
 && !
deföed
 
_LIBC
)

527 
	#_MdoubÀ_
 
_Flﬂt128x


	)

528 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f128x
##
	)
r

529 
	#__MATH_DECLARING_DOUBLE
 0

	)

530 
	#__MATH_DECLARING_FLOATN
 1

	)

531 #i‡
__HAVE_DISTINCT_FLOAT128X


532 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

534 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

535 
	~<bôs/m©hˇŒs.h
>

537 #unde‡
_MdoubÀ_


538 #unde‡
__MATH_PRECNAME


539 #unde‡
__MATH_DECLARING_DOUBLE


540 #unde‡
__MATH_DECLARING_FLOATN


543 #unde‡
__MATHDECL_1_IMPL


544 #unde‡
__MATHDECL_1


545 #unde‡
__MATHDECL_ALIAS


546 #unde‡
__MATHDECL


547 #unde‡
__MATHCALL


550 
	#__MATHCALL_NARROW_ARGS_1
 (
_M¨g_
 
__x
)

	)

551 
	#__MATHCALL_NARROW_ARGS_2
 (
_M¨g_
 
__x
, _M¨g_ 
__y
)

	)

552 
	#__MATHCALL_NARROW_ARGS_3
 (
_M¨g_
 
__x
, _M¨g_ 
__y
, _M¨g_ 
__z
)

	)

553 
	#__MATHCALL_NARROW_NORMAL
(
func
, 
«rgs
) \

554 
_Mªt_
 
func
 
__MATHCALL_NARROW_ARGS_
 ## 
«rgs
 
__THROW


	)

555 
	#__MATHCALL_NARROW_REDIR
(
func
, 
ªdú
, 
«rgs
) \

556 
_Mªt_
 
	`__REDIRECT_NTH
 (
func
, 
__MATHCALL_NARROW_ARGS_
 ## 
«rgs
, \

557 
ªdú
)

	)

558 
	#__MATHCALL_NARROW
(
func
, 
ªdú
, 
«rgs
) \

559 
	`__MATHCALL_NARROW_NORMAL
 (
func
, 
«rgs
)

	)

561 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

563 
	#_Mªt_
 

	)

564 
	#_M¨g_
 

	)

565 
	#__MATHCALL_NAME
(
«me
Ë
f
 ## 
	)
name

566 
	~<bôs/m©hˇŒs-«ºow.h
>

567 #unde‡
_Mªt_


568 #unde‡
_M¨g_


569 #unde‡
__MATHCALL_NAME


571 
	#_Mªt_
 

	)

572 
	#_M¨g_
 

	)

573 
	#__MATHCALL_NAME
(
«me
Ë
f
 ##Çamê## 
l


	)

574 #ifde‡
__LDBL_COMPAT


575 
	#__MATHCALL_REDIR_NAME
(
«me
Ë
f
 ## 
	)
name

576 #unde‡
__MATHCALL_NARROW


577 
	#__MATHCALL_NARROW
(
func
, 
ªdú
, 
«rgs
) \

578 
	`__MATHCALL_NARROW_REDIR
 (
func
, 
ªdú
, 
«rgs
)

	)

579 #ñi‡
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

580 
	#__MATHCALL_REDIR_NAME
(
«me
Ë
__
 ## 
f32
 ##Çamê## 
õì128


	)

581 #unde‡
__MATHCALL_NARROW


582 
	#__MATHCALL_NARROW
(
func
, 
ªdú
, 
«rgs
) \

583 
	`__MATHCALL_NARROW_REDIR
 (
func
, 
ªdú
, 
«rgs
)

	)

585 
	~<bôs/m©hˇŒs-«ºow.h
>

586 #unde‡
_Mªt_


587 #unde‡
_M¨g_


588 #unde‡
__MATHCALL_NAME


589 #i‡
deföed
 
__LDBL_COMPAT
 \

590 || 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

591 #unde‡
__MATHCALL_REDIR_NAME


592 #unde‡
__MATHCALL_NARROW


593 
	#__MATHCALL_NARROW
(
func
, 
ªdú
, 
«rgs
) \

594 
	`__MATHCALL_NARROW_NORMAL
 (
func
, 
«rgs
)

	)

597 
	#_Mªt_
 

	)

598 
	#_M¨g_
 

	)

599 
	#__MATHCALL_NAME
(
«me
Ë
d
 ##Çamê## 
l


	)

600 #ifde‡
__LDBL_COMPAT


601 
	#__MATHCALL_REDIR_NAME
(
«me
Ë
__∆dbl_d
 ##Çamê## 
l


	)

602 #unde‡
__MATHCALL_NARROW


603 
	#__MATHCALL_NARROW
(
func
, 
ªdú
, 
«rgs
) \

604 
	`__MATHCALL_NARROW_REDIR
 (
func
, 
ªdú
, 
«rgs
)

	)

605 #ñi‡
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

606 
	#__MATHCALL_REDIR_NAME
(
«me
Ë
__
 ## 
f64
 ##Çamê## 
õì128


	)

607 #unde‡
__MATHCALL_NARROW


608 
	#__MATHCALL_NARROW
(
func
, 
ªdú
, 
«rgs
) \

609 
	`__MATHCALL_NARROW_REDIR
 (
func
, 
ªdú
, 
«rgs
)

	)

611 
	~<bôs/m©hˇŒs-«ºow.h
>

612 #unde‡
_Mªt_


613 #unde‡
_M¨g_


614 #unde‡
__MATHCALL_NAME


615 #i‡
deföed
 
__LDBL_COMPAT
 \

616 || 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

617 #unde‡
__MATHCALL_REDIR_NAME


618 #unde‡
__MATHCALL_NARROW


619 
	#__MATHCALL_NARROW
(
func
, 
ªdú
, 
«rgs
) \

620 
	`__MATHCALL_NARROW_NORMAL
 (
func
, 
«rgs
)

	)

625 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

627 #i‡
__HAVE_FLOAT16
 && 
__HAVE_FLOAT32


628 
	#_Mªt_
 
_Flﬂt16


	)

629 
	#_M¨g_
 
_Flﬂt32


	)

630 
	#__MATHCALL_NAME
(
«me
Ë
f16
 ##Çamê## 
f32


	)

631 
	~<bôs/m©hˇŒs-«ºow.h
>

632 #unde‡
_Mªt_


633 #unde‡
_M¨g_


634 #unde‡
__MATHCALL_NAME


637 #i‡
__HAVE_FLOAT16
 && 
__HAVE_FLOAT32X


638 
	#_Mªt_
 
_Flﬂt16


	)

639 
	#_M¨g_
 
_Flﬂt32x


	)

640 
	#__MATHCALL_NAME
(
«me
Ë
f16
 ##Çamê## 
f32x


	)

641 
	~<bôs/m©hˇŒs-«ºow.h
>

642 #unde‡
_Mªt_


643 #unde‡
_M¨g_


644 #unde‡
__MATHCALL_NAME


647 #i‡
__HAVE_FLOAT16
 && 
__HAVE_FLOAT64


648 
	#_Mªt_
 
_Flﬂt16


	)

649 
	#_M¨g_
 
_Flﬂt64


	)

650 
	#__MATHCALL_NAME
(
«me
Ë
f16
 ##Çamê## 
f64


	)

651 
	~<bôs/m©hˇŒs-«ºow.h
>

652 #unde‡
_Mªt_


653 #unde‡
_M¨g_


654 #unde‡
__MATHCALL_NAME


657 #i‡
__HAVE_FLOAT16
 && 
__HAVE_FLOAT64X


658 
	#_Mªt_
 
_Flﬂt16


	)

659 
	#_M¨g_
 
_Flﬂt64x


	)

660 
	#__MATHCALL_NAME
(
«me
Ë
f16
 ##Çamê## 
f64x


	)

661 
	~<bôs/m©hˇŒs-«ºow.h
>

662 #unde‡
_Mªt_


663 #unde‡
_M¨g_


664 #unde‡
__MATHCALL_NAME


667 #i‡
__HAVE_FLOAT16
 && 
__HAVE_FLOAT128


668 
	#_Mªt_
 
_Flﬂt16


	)

669 
	#_M¨g_
 
_Flﬂt128


	)

670 
	#__MATHCALL_NAME
(
«me
Ë
f16
 ##Çamê## 
f128


	)

671 
	~<bôs/m©hˇŒs-«ºow.h
>

672 #unde‡
_Mªt_


673 #unde‡
_M¨g_


674 #unde‡
__MATHCALL_NAME


677 #i‡
__HAVE_FLOAT16
 && 
__HAVE_FLOAT128X


678 
	#_Mªt_
 
_Flﬂt16


	)

679 
	#_M¨g_
 
_Flﬂt128x


	)

680 
	#__MATHCALL_NAME
(
«me
Ë
f16
 ##Çamê## 
f128x


	)

681 
	~<bôs/m©hˇŒs-«ºow.h
>

682 #unde‡
_Mªt_


683 #unde‡
_M¨g_


684 #unde‡
__MATHCALL_NAME


687 #i‡
__HAVE_FLOAT32
 && 
__HAVE_FLOAT32X


688 
	#_Mªt_
 
_Flﬂt32


	)

689 
	#_M¨g_
 
_Flﬂt32x


	)

690 
	#__MATHCALL_NAME
(
«me
Ë
f32
 ##Çamê## 
f32x


	)

691 
	~<bôs/m©hˇŒs-«ºow.h
>

692 #unde‡
_Mªt_


693 #unde‡
_M¨g_


694 #unde‡
__MATHCALL_NAME


697 #i‡
__HAVE_FLOAT32
 && 
__HAVE_FLOAT64


698 
	#_Mªt_
 
_Flﬂt32


	)

699 
	#_M¨g_
 
_Flﬂt64


	)

700 
	#__MATHCALL_NAME
(
«me
Ë
f32
 ##Çamê## 
f64


	)

701 
	~<bôs/m©hˇŒs-«ºow.h
>

702 #unde‡
_Mªt_


703 #unde‡
_M¨g_


704 #unde‡
__MATHCALL_NAME


707 #i‡
__HAVE_FLOAT32
 && 
__HAVE_FLOAT64X


708 
	#_Mªt_
 
_Flﬂt32


	)

709 
	#_M¨g_
 
_Flﬂt64x


	)

710 
	#__MATHCALL_NAME
(
«me
Ë
f32
 ##Çamê## 
f64x


	)

711 
	~<bôs/m©hˇŒs-«ºow.h
>

712 #unde‡
_Mªt_


713 #unde‡
_M¨g_


714 #unde‡
__MATHCALL_NAME


717 #i‡
__HAVE_FLOAT32
 && 
__HAVE_FLOAT128


718 
	#_Mªt_
 
_Flﬂt32


	)

719 
	#_M¨g_
 
_Flﬂt128


	)

720 
	#__MATHCALL_NAME
(
«me
Ë
f32
 ##Çamê## 
f128


	)

721 
	~<bôs/m©hˇŒs-«ºow.h
>

722 #unde‡
_Mªt_


723 #unde‡
_M¨g_


724 #unde‡
__MATHCALL_NAME


727 #i‡
__HAVE_FLOAT32
 && 
__HAVE_FLOAT128X


728 
	#_Mªt_
 
_Flﬂt32


	)

729 
	#_M¨g_
 
_Flﬂt128x


	)

730 
	#__MATHCALL_NAME
(
«me
Ë
f32
 ##Çamê## 
f128x


	)

731 
	~<bôs/m©hˇŒs-«ºow.h
>

732 #unde‡
_Mªt_


733 #unde‡
_M¨g_


734 #unde‡
__MATHCALL_NAME


737 #i‡
__HAVE_FLOAT32X
 && 
__HAVE_FLOAT64


738 
	#_Mªt_
 
_Flﬂt32x


	)

739 
	#_M¨g_
 
_Flﬂt64


	)

740 
	#__MATHCALL_NAME
(
«me
Ë
f32x
 ##Çamê## 
f64


	)

741 
	~<bôs/m©hˇŒs-«ºow.h
>

742 #unde‡
_Mªt_


743 #unde‡
_M¨g_


744 #unde‡
__MATHCALL_NAME


747 #i‡
__HAVE_FLOAT32X
 && 
__HAVE_FLOAT64X


748 
	#_Mªt_
 
_Flﬂt32x


	)

749 
	#_M¨g_
 
_Flﬂt64x


	)

750 
	#__MATHCALL_NAME
(
«me
Ë
f32x
 ##Çamê## 
f64x


	)

751 
	~<bôs/m©hˇŒs-«ºow.h
>

752 #unde‡
_Mªt_


753 #unde‡
_M¨g_


754 #unde‡
__MATHCALL_NAME


757 #i‡
__HAVE_FLOAT32X
 && 
__HAVE_FLOAT128


758 
	#_Mªt_
 
_Flﬂt32x


	)

759 
	#_M¨g_
 
_Flﬂt128


	)

760 
	#__MATHCALL_NAME
(
«me
Ë
f32x
 ##Çamê## 
f128


	)

761 
	~<bôs/m©hˇŒs-«ºow.h
>

762 #unde‡
_Mªt_


763 #unde‡
_M¨g_


764 #unde‡
__MATHCALL_NAME


767 #i‡
__HAVE_FLOAT32X
 && 
__HAVE_FLOAT128X


768 
	#_Mªt_
 
_Flﬂt32x


	)

769 
	#_M¨g_
 
_Flﬂt128x


	)

770 
	#__MATHCALL_NAME
(
«me
Ë
f32x
 ##Çamê## 
f128x


	)

771 
	~<bôs/m©hˇŒs-«ºow.h
>

772 #unde‡
_Mªt_


773 #unde‡
_M¨g_


774 #unde‡
__MATHCALL_NAME


777 #i‡
__HAVE_FLOAT64
 && 
__HAVE_FLOAT64X


778 
	#_Mªt_
 
_Flﬂt64


	)

779 
	#_M¨g_
 
_Flﬂt64x


	)

780 
	#__MATHCALL_NAME
(
«me
Ë
f64
 ##Çamê## 
f64x


	)

781 
	~<bôs/m©hˇŒs-«ºow.h
>

782 #unde‡
_Mªt_


783 #unde‡
_M¨g_


784 #unde‡
__MATHCALL_NAME


787 #i‡
__HAVE_FLOAT64
 && 
__HAVE_FLOAT128


788 
	#_Mªt_
 
_Flﬂt64


	)

789 
	#_M¨g_
 
_Flﬂt128


	)

790 
	#__MATHCALL_NAME
(
«me
Ë
f64
 ##Çamê## 
f128


	)

791 
	~<bôs/m©hˇŒs-«ºow.h
>

792 #unde‡
_Mªt_


793 #unde‡
_M¨g_


794 #unde‡
__MATHCALL_NAME


797 #i‡
__HAVE_FLOAT64
 && 
__HAVE_FLOAT128X


798 
	#_Mªt_
 
_Flﬂt64


	)

799 
	#_M¨g_
 
_Flﬂt128x


	)

800 
	#__MATHCALL_NAME
(
«me
Ë
f64
 ##Çamê## 
f128x


	)

801 
	~<bôs/m©hˇŒs-«ºow.h
>

802 #unde‡
_Mªt_


803 #unde‡
_M¨g_


804 #unde‡
__MATHCALL_NAME


807 #i‡
__HAVE_FLOAT64X
 && 
__HAVE_FLOAT128


808 
	#_Mªt_
 
_Flﬂt64x


	)

809 
	#_M¨g_
 
_Flﬂt128


	)

810 
	#__MATHCALL_NAME
(
«me
Ë
f64x
 ##Çamê## 
f128


	)

811 
	~<bôs/m©hˇŒs-«ºow.h
>

812 #unde‡
_Mªt_


813 #unde‡
_M¨g_


814 #unde‡
__MATHCALL_NAME


817 #i‡
__HAVE_FLOAT64X
 && 
__HAVE_FLOAT128X


818 
	#_Mªt_
 
_Flﬂt64x


	)

819 
	#_M¨g_
 
_Flﬂt128x


	)

820 
	#__MATHCALL_NAME
(
«me
Ë
f64x
 ##Çamê## 
f128x


	)

821 
	~<bôs/m©hˇŒs-«ºow.h
>

822 #unde‡
_Mªt_


823 #unde‡
_M¨g_


824 #unde‡
__MATHCALL_NAME


827 #i‡
__HAVE_FLOAT128
 && 
__HAVE_FLOAT128X


828 
	#_Mªt_
 
_Flﬂt128


	)

829 
	#_M¨g_
 
_Flﬂt128x


	)

830 
	#__MATHCALL_NAME
(
«me
Ë
f128
 ##Çamê## 
f128x


	)

831 
	~<bôs/m©hˇŒs-«ºow.h
>

832 #unde‡
_Mªt_


833 #unde‡
_M¨g_


834 #unde‡
__MATHCALL_NAME


839 #unde‡
__MATHCALL_NARROW_ARGS_1


840 #unde‡
__MATHCALL_NARROW_ARGS_2


841 #unde‡
__MATHCALL_NARROW_ARGS_3


842 #unde‡
__MATHCALL_NARROW_NORMAL


843 #unde‡
__MATHCALL_NARROW_REDIR


844 #unde‡
__MATHCALL_NARROW


846 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


848 
signgam
;

851 #i‡(
__HAVE_DISTINCT_FLOAT16
 \

852 || 
__HAVE_DISTINCT_FLOAT32
 \

853 || 
__HAVE_DISTINCT_FLOAT64
 \

854 || 
__HAVE_DISTINCT_FLOAT32X
 \

855 || 
__HAVE_DISTINCT_FLOAT64X
 \

856 || 
__HAVE_DISTINCT_FLOAT128X
)

869 #ifde‡
__NO_LONG_DOUBLE_MATH


870 #i‡
__HAVE_DISTINCT_FLOAT128


873 
	#__MATH_TG
(
TG_ARG
, 
FUNC
, 
ARGS
) \

874 ( (
TG_ARG
Ë= (Ë? 
FUNC
 ## 
f
 
ARGS
 : FUNC ARGS)

	)

875 #ñi‡
__HAVE_DISTINCT_FLOAT128


876 #i‡
__HAVE_GENERIC_SELECTION


877 #i‡
__HAVE_FLOATN_NOT_TYPEDEF
 && 
__HAVE_FLOAT32


878 
	#__MATH_TG_F32
(
FUNC
, 
ARGS
Ë
_Flﬂt32
: FUNC ## 
f
 ARGS,

	)

880 
	#__MATH_TG_F32
(
FUNC
, 
ARGS
)

	)

882 #i‡
__HAVE_FLOATN_NOT_TYPEDEF
 && 
__HAVE_FLOAT64X


883 #i‡
__HAVE_FLOAT64X_LONG_DOUBLE


884 
	#__MATH_TG_F64X
(
FUNC
, 
ARGS
Ë
_Flﬂt64x
: FUNC ## 
l
 ARGS,

	)

886 
	#__MATH_TG_F64X
(
FUNC
, 
ARGS
Ë
_Flﬂt64x
: FUNC ## 
f128
 ARGS,

	)

889 
	#__MATH_TG_F64X
(
FUNC
, 
ARGS
)

	)

891 
	#__MATH_TG
(
TG_ARG
, 
FUNC
, 
ARGS
) \

892 
	`_Gíîic
 ((
TG_ARG
), \

893 : 
FUNC
 ## 
f
 
ARGS
, \

894 
	`__MATH_TG_F32
 (
FUNC
, 
ARGS
) \

895 : 
FUNC
 
ARGS
, \

896 : 
FUNC
 ## 
l
 
ARGS
, \

897 
	`__MATH_TG_F64X
 (
FUNC
, 
ARGS
) \

898 
_Flﬂt128
: 
FUNC
 ## 
f128
 
ARGS
)

	)

900 #i‡
__HAVE_FLOATN_NOT_TYPEDEF


903 
	#__MATH_TG
(
TG_ARG
, 
FUNC
, 
ARGS
) \

904 
__buûtö_choo£_ex¥
 \

905 (
	`__buûtö_ty≥s_com∑tibÀ_p
 (
	`__ty≥of
 (
TG_ARG
), ), \

906 
FUNC
 ## 
f
 
ARGS
, \

907 
__buûtö_choo£_ex¥
 \

908 (
	`__buûtö_ty≥s_com∑tibÀ_p
 (
	`__ty≥of
 (
TG_ARG
), ), \

909 
FUNC
 
ARGS
, \

910 
__buûtö_choo£_ex¥
 \

911 (
	`__buûtö_ty≥s_com∑tibÀ_p
 (
	`__ty≥of
 (
TG_ARG
), ), \

912 
FUNC
 ## 
l
 
ARGS
, \

913 
FUNC
 ## 
f128
 
ARGS
)))

	)

916 
	#__MATH_TG
(
TG_ARG
, 
FUNC
, 
ARGS
) \

917 ( (
TG_ARG
) ==  () \

918 ? 
FUNC
 ## 
f
 
ARGS
 \

919 :  (
TG_ARG
) ==  () \

920 ? 
FUNC
 
ARGS
 \

921 : 
FUNC
 ## 
l
 
ARGS
)

	)

925 #ifde‡
__USE_ISOC99


930 
FP_NAN
 =

931 
	#FP_NAN
 0

	)

932 
FP_NAN
,

933 
FP_INFINITE
 =

934 
	#FP_INFINITE
 1

	)

935 
FP_INFINITE
,

936 
FP_ZERO
 =

937 
	#FP_ZERO
 2

	)

938 
FP_ZERO
,

939 
FP_SUBNORMAL
 =

940 
	#FP_SUBNORMAL
 3

	)

941 
FP_SUBNORMAL
,

942 
FP_NORMAL
 =

943 
	#FP_NORMAL
 4

	)

944 
FP_NORMAL


952 #i‡((
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__
) \

953 || 
	`__glibc_˛™g_¥îeq
 (2,8)) \

954 && (!
deföed
 
__OPTIMIZE_SIZE__
 || deföed 
__˝lu•lus
)

961 
	#Â˛assify
(
x
Ë
	`__buûtö_Â˛assify
 (
FP_NAN
, 
FP_INFINITE
, \

962 
FP_NORMAL
, 
FP_SUBNORMAL
, 
FP_ZERO
, 
x
)

	)

964 
	#Â˛assify
(
x
Ë
	`__MATH_TG
 ((x), 
__Â˛assify
, (x))

	)

968 #i‡
	`__GNUC_PREREQ
 (6,0Ë|| 
	`__glibc_˛™g_¥îeq
 (3,3)

969 
	#signbô
(
x
Ë
	`__buûtö_signbô
 (x)

	)

970 #ñi‡
deföed
 
__˝lu•lus


978 
	#signbô
(
x
Ë
	`__buûtö_signbôl
 (x)

	)

979 #ñi‡
	`__GNUC_PREREQ
 (4,0)

980 
	#signbô
(
x
Ë
	`__MATH_TG
 ((x), 
__buûtö_signbô
, (x))

	)

982 
	#signbô
(
x
Ë
	`__MATH_TG
 ((x), 
__signbô
, (x))

	)

986 #i‡(
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__
) \

987 || 
	$__glibc_˛™g_¥îeq
 (2,8)

988 
	#isföôe
(
x
Ë
	`__buûtö_isföôe
 (x)

	)

990 
	#isföôe
(
x
Ë
	`__MATH_TG
 ((x), 
__föôe
, (x))

	)

994 #i‡(
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__
) \

995 || 
	$__glibc_˛™g_¥îeq
 (2,8)

996 
	#i¢‹mÆ
(
x
Ë
	`__buûtö_i¢‹mÆ
 (x)

	)

998 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

1003 #i‡(
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__
) \

1004 || 
	$__glibc_˛™g_¥îeq
 (2,8)

1005 
	#i¢™
(
x
Ë
	`__buûtö_i¢™
 (x)

	)

1007 
	#i¢™
(
x
Ë
	`__MATH_TG
 ((x), 
__i¢™
, (x))

	)

1011 #i‡
__HAVE_DISTINCT_FLOAT128
 && !
	`__GNUC_PREREQ
 (7,0) \

1012 && !
deföed
 
__SUPPORT_SNAN__
 && !deföed 
__˝lu•lus


1018 
	#isöf
(
x
) \

1019 (
	`__buûtö_ty≥s_com∑tibÀ_p
 (
	`__ty≥of
 (
x
), 
_Flﬂt128
) \

1020 ? 
	`__isöff128
 (
x
Ë: 
	`__buûtö_isöf_sign
 (x))

	)

1021 #ñi‡(
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__
) \

1022 || 
	$__glibc_˛™g_¥îeq
 (3,7)

1023 
	#isöf
(
x
Ë
	`__buûtö_isöf_sign
 (x)

	)

1025 
	#isöf
(
x
Ë
	`__MATH_TG
 ((x), 
__isöf
, (x))

	)

1029 
	#MATH_ERRNO
 1

	)

1030 
	#MATH_ERREXCEPT
 2

	)

1037 #ifde‡
__FAST_MATH__


1038 
	#m©h_îrh™dlög
 0

	)

1039 #ñi‡
deföed
 
__NO_MATH_ERRNO__


1040 
	#m©h_îrh™dlög
 (
MATH_ERREXCEPT
)

	)

1042 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

1047 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

1048 
	~<bôs/isˇn⁄iˇl.h
>

1051 #i‚de‡
__˝lu•lus


1052 
	#issig«lög
(
x
Ë
	`__MATH_TG
 ((x), 
__issig«lög
, (x))

	)

1061 
ölöe
 
	`issig«lög
 (
__vÆ
Ë{  
	`__issig«lögf
 (__val); }

1062 
ölöe
 
	`issig«lög
 (
__vÆ
Ë{  
	`__issig«lög
 (__val); }

1063 
ölöe
 

1064 
	`issig«lög
 (
__vÆ
)

1066 #ifde‡
__NO_LONG_DOUBLE_MATH


1067  
	`__issig«lög
 (
__vÆ
);

1069  
	`__issig«lögl
 (
__vÆ
);

1072 #i‡
__HAVE_FLOAT128_UNLIKE_LDBL


1075 
ölöe
 
	`issig«lög
 (
_Flﬂt128
 
__vÆ
Ë{  
	`__issig«lögf128
 (__val); }

1077 
	}
}

1081 
	#issubn‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_SUBNORMAL
)

	)

1084 #i‚de‡
__˝lu•lus


1085 #ifde‡
__SUPPORT_SNAN__


1086 
	#iszîo
(
x
Ë(
	`Â˛assify
 (xË=
FP_ZERO
)

	)

1088 
	#iszîo
(
x
Ë(((
	`__ty≥of
 (x)Ë(x)Ë=0)

	)

1092 #ifde‡
__SUPPORT_SNAN__


1093 
ölöe
 

1094 
iszîo
 (
__vÆ
)

1096  
__Â˛assifyf
 (
__vÆ
Ë=
FP_ZERO
;

1098 
ölöe
 

1099 
iszîo
 (
__vÆ
)

1101  
__Â˛assify
 (
__vÆ
Ë=
FP_ZERO
;

1103 
ölöe
 

1104 
iszîo
 (
__vÆ
)

1106 #ifde‡
__NO_LONG_DOUBLE_MATH


1107  
__Â˛assify
 (
__vÆ
Ë=
FP_ZERO
;

1109  
__Â˛assifyl
 (
__vÆ
Ë=
FP_ZERO
;

1112 #i‡
__HAVE_FLOAT128_UNLIKE_LDBL


1115 
ölöe
 

1116 
iszîo
 (
_Flﬂt128
 
__vÆ
)

1118  
__Â˛assifyf128
 (
__vÆ
Ë=
FP_ZERO
;

1122 
ãm∂©e
 <
˛ass
 
__T
> 
ölöe
 
boﬁ


1123 
iszîo
 (
__T
 
__vÆ
)

1125  
__vÆ
 == 0;

1132 #ifde‡
__USE_XOPEN


1134 
	#MAXFLOAT
 3.40282347e+38F

	)

1139 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


1140 
	#M_E
 2.7182818284590452354

	)

1141 
	#M_LOG2E
 1.4426950408889634074

	)

1142 
	#M_LOG10E
 0.43429448190325182765

	)

1143 
	#M_LN2
 0.69314718055994530942

	)

1144 
	#M_LN10
 2.30258509299404568402

	)

1145 
	#M_PI
 3.14159265358979323846

	)

1146 
	#M_PI_2
 1.57079632679489661923

	)

1147 
	#M_PI_4
 0.78539816339744830962

	)

1148 
	#M_1_PI
 0.31830988618379067154

	)

1149 
	#M_2_PI
 0.63661977236758134308

	)

1150 
	#M_2_SQRTPI
 1.12837916709551257390

	)

1151 
	#M_SQRT2
 1.41421356237309504880

	)

1152 
	#M_SQRT1_2
 0.70710678118654752440

	)

1158 #ifde‡
__USE_GNU


1159 
	#M_El
 2.718281828459045235360287471352662498L

	)

1160 
	#M_LOG2El
 1.442695040888963407359924681001892137L

	)

1161 
	#M_LOG10El
 0.434294481903251827651128918916605082L

	)

1162 
	#M_LN2l
 0.693147180559945309417232121458176568L

	)

1163 
	#M_LN10l
 2.302585092994045684017991454684364208L

	)

1164 
	#M_PIl
 3.141592653589793238462643383279502884L

	)

1165 
	#M_PI_2l
 1.570796326794896619231321691639751442L

	)

1166 
	#M_PI_4l
 0.785398163397448309615660845819875721L

	)

1167 
	#M_1_PIl
 0.318309886183790671537767526745028724L

	)

1168 
	#M_2_PIl
 0.636619772367581343075535053490057448L

	)

1169 
	#M_2_SQRTPIl
 1.128379167095512573896158903121545172L

	)

1170 
	#M_SQRT2l
 1.414213562373095048801688724209698079L

	)

1171 
	#M_SQRT1_2l
 0.707106781186547524400844362104849039L

	)

1174 #i‡
__HAVE_FLOAT16
 && 
deföed
 
__USE_GNU


1175 
	#M_Ef16
 
	`__f16
 (2.718281828459045235360287471352662498Ë

	)

1176 
	#M_LOG2Ef16
 
	`__f16
 (1.442695040888963407359924681001892137Ë

	)

1177 
	#M_LOG10Ef16
 
	`__f16
 (0.434294481903251827651128918916605082Ë

	)

1178 
	#M_LN2f16
 
	`__f16
 (0.693147180559945309417232121458176568Ë

	)

1179 
	#M_LN10f16
 
	`__f16
 (2.302585092994045684017991454684364208Ë

	)

1180 
	#M_PIf16
 
	`__f16
 (3.141592653589793238462643383279502884Ë

	)

1181 
	#M_PI_2f16
 
	`__f16
 (1.570796326794896619231321691639751442Ë

	)

1182 
	#M_PI_4f16
 
	`__f16
 (0.785398163397448309615660845819875721Ë

	)

1183 
	#M_1_PIf16
 
	`__f16
 (0.318309886183790671537767526745028724Ë

	)

1184 
	#M_2_PIf16
 
	`__f16
 (0.636619772367581343075535053490057448Ë

	)

1185 
	#M_2_SQRTPIf16
 
	`__f16
 (1.128379167095512573896158903121545172Ë

	)

1186 
	#M_SQRT2f16
 
	`__f16
 (1.414213562373095048801688724209698079Ë

	)

1187 
	#M_SQRT1_2f16
 
	`__f16
 (0.707106781186547524400844362104849039Ë

	)

1190 #i‡
__HAVE_FLOAT32
 && 
deföed
 
__USE_GNU


1191 
	#M_Ef32
 
	`__f32
 (2.718281828459045235360287471352662498Ë

	)

1192 
	#M_LOG2Ef32
 
	`__f32
 (1.442695040888963407359924681001892137Ë

	)

1193 
	#M_LOG10Ef32
 
	`__f32
 (0.434294481903251827651128918916605082Ë

	)

1194 
	#M_LN2f32
 
	`__f32
 (0.693147180559945309417232121458176568Ë

	)

1195 
	#M_LN10f32
 
	`__f32
 (2.302585092994045684017991454684364208Ë

	)

1196 
	#M_PIf32
 
	`__f32
 (3.141592653589793238462643383279502884Ë

	)

1197 
	#M_PI_2f32
 
	`__f32
 (1.570796326794896619231321691639751442Ë

	)

1198 
	#M_PI_4f32
 
	`__f32
 (0.785398163397448309615660845819875721Ë

	)

1199 
	#M_1_PIf32
 
	`__f32
 (0.318309886183790671537767526745028724Ë

	)

1200 
	#M_2_PIf32
 
	`__f32
 (0.636619772367581343075535053490057448Ë

	)

1201 
	#M_2_SQRTPIf32
 
	`__f32
 (1.128379167095512573896158903121545172Ë

	)

1202 
	#M_SQRT2f32
 
	`__f32
 (1.414213562373095048801688724209698079Ë

	)

1203 
	#M_SQRT1_2f32
 
	`__f32
 (0.707106781186547524400844362104849039Ë

	)

1206 #i‡
__HAVE_FLOAT64
 && 
deföed
 
__USE_GNU


1207 
	#M_Ef64
 
	`__f64
 (2.718281828459045235360287471352662498Ë

	)

1208 
	#M_LOG2Ef64
 
	`__f64
 (1.442695040888963407359924681001892137Ë

	)

1209 
	#M_LOG10Ef64
 
	`__f64
 (0.434294481903251827651128918916605082Ë

	)

1210 
	#M_LN2f64
 
	`__f64
 (0.693147180559945309417232121458176568Ë

	)

1211 
	#M_LN10f64
 
	`__f64
 (2.302585092994045684017991454684364208Ë

	)

1212 
	#M_PIf64
 
	`__f64
 (3.141592653589793238462643383279502884Ë

	)

1213 
	#M_PI_2f64
 
	`__f64
 (1.570796326794896619231321691639751442Ë

	)

1214 
	#M_PI_4f64
 
	`__f64
 (0.785398163397448309615660845819875721Ë

	)

1215 
	#M_1_PIf64
 
	`__f64
 (0.318309886183790671537767526745028724Ë

	)

1216 
	#M_2_PIf64
 
	`__f64
 (0.636619772367581343075535053490057448Ë

	)

1217 
	#M_2_SQRTPIf64
 
	`__f64
 (1.128379167095512573896158903121545172Ë

	)

1218 
	#M_SQRT2f64
 
	`__f64
 (1.414213562373095048801688724209698079Ë

	)

1219 
	#M_SQRT1_2f64
 
	`__f64
 (0.707106781186547524400844362104849039Ë

	)

1222 #i‡
__HAVE_FLOAT128
 && 
deföed
 
__USE_GNU


1223 
	#M_Ef128
 
	`__f128
 (2.718281828459045235360287471352662498Ë

	)

1224 
	#M_LOG2Ef128
 
	`__f128
 (1.442695040888963407359924681001892137Ë

	)

1225 
	#M_LOG10Ef128
 
	`__f128
 (0.434294481903251827651128918916605082Ë

	)

1226 
	#M_LN2f128
 
	`__f128
 (0.693147180559945309417232121458176568Ë

	)

1227 
	#M_LN10f128
 
	`__f128
 (2.302585092994045684017991454684364208Ë

	)

1228 
	#M_PIf128
 
	`__f128
 (3.141592653589793238462643383279502884Ë

	)

1229 
	#M_PI_2f128
 
	`__f128
 (1.570796326794896619231321691639751442Ë

	)

1230 
	#M_PI_4f128
 
	`__f128
 (0.785398163397448309615660845819875721Ë

	)

1231 
	#M_1_PIf128
 
	`__f128
 (0.318309886183790671537767526745028724Ë

	)

1232 
	#M_2_PIf128
 
	`__f128
 (0.636619772367581343075535053490057448Ë

	)

1233 
	#M_2_SQRTPIf128
 
	`__f128
 (1.128379167095512573896158903121545172Ë

	)

1234 
	#M_SQRT2f128
 
	`__f128
 (1.414213562373095048801688724209698079Ë

	)

1235 
	#M_SQRT1_2f128
 
	`__f128
 (0.707106781186547524400844362104849039Ë

	)

1238 #i‡
__HAVE_FLOAT32X
 && 
deföed
 
__USE_GNU


1239 
	#M_Ef32x
 
	`__f32x
 (2.718281828459045235360287471352662498Ë

	)

1240 
	#M_LOG2Ef32x
 
	`__f32x
 (1.442695040888963407359924681001892137Ë

	)

1241 
	#M_LOG10Ef32x
 
	`__f32x
 (0.434294481903251827651128918916605082Ë

	)

1242 
	#M_LN2f32x
 
	`__f32x
 (0.693147180559945309417232121458176568Ë

	)

1243 
	#M_LN10f32x
 
	`__f32x
 (2.302585092994045684017991454684364208Ë

	)

1244 
	#M_PIf32x
 
	`__f32x
 (3.141592653589793238462643383279502884Ë

	)

1245 
	#M_PI_2f32x
 
	`__f32x
 (1.570796326794896619231321691639751442Ë

	)

1246 
	#M_PI_4f32x
 
	`__f32x
 (0.785398163397448309615660845819875721Ë

	)

1247 
	#M_1_PIf32x
 
	`__f32x
 (0.318309886183790671537767526745028724Ë

	)

1248 
	#M_2_PIf32x
 
	`__f32x
 (0.636619772367581343075535053490057448Ë

	)

1249 
	#M_2_SQRTPIf32x
 
	`__f32x
 (1.128379167095512573896158903121545172Ë

	)

1250 
	#M_SQRT2f32x
 
	`__f32x
 (1.414213562373095048801688724209698079Ë

	)

1251 
	#M_SQRT1_2f32x
 
	`__f32x
 (0.707106781186547524400844362104849039Ë

	)

1254 #i‡
__HAVE_FLOAT64X
 && 
deföed
 
__USE_GNU


1255 
	#M_Ef64x
 
	`__f64x
 (2.718281828459045235360287471352662498Ë

	)

1256 
	#M_LOG2Ef64x
 
	`__f64x
 (1.442695040888963407359924681001892137Ë

	)

1257 
	#M_LOG10Ef64x
 
	`__f64x
 (0.434294481903251827651128918916605082Ë

	)

1258 
	#M_LN2f64x
 
	`__f64x
 (0.693147180559945309417232121458176568Ë

	)

1259 
	#M_LN10f64x
 
	`__f64x
 (2.302585092994045684017991454684364208Ë

	)

1260 
	#M_PIf64x
 
	`__f64x
 (3.141592653589793238462643383279502884Ë

	)

1261 
	#M_PI_2f64x
 
	`__f64x
 (1.570796326794896619231321691639751442Ë

	)

1262 
	#M_PI_4f64x
 
	`__f64x
 (0.785398163397448309615660845819875721Ë

	)

1263 
	#M_1_PIf64x
 
	`__f64x
 (0.318309886183790671537767526745028724Ë

	)

1264 
	#M_2_PIf64x
 
	`__f64x
 (0.636619772367581343075535053490057448Ë

	)

1265 
	#M_2_SQRTPIf64x
 
	`__f64x
 (1.128379167095512573896158903121545172Ë

	)

1266 
	#M_SQRT2f64x
 
	`__f64x
 (1.414213562373095048801688724209698079Ë

	)

1267 
	#M_SQRT1_2f64x
 
	`__f64x
 (0.707106781186547524400844362104849039Ë

	)

1270 #i‡
__HAVE_FLOAT128X
 && 
deföed
 
__USE_GNU


1274 #ifde‡
__USE_ISOC99


1275 #i‡
__GNUC_PREREQ
 (3, 1)

1282 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

1283 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

1284 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

1285 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

1286 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

1287 
	#isun‹dîed
(
x
, 
y
Ë
	`__buûtö_isun‹dîed
(x, y)

	)

1289 
	#isgª©î
(
x
, 
y
) \

1290 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__x
 = (x); __ty≥of__ (
y
Ë
__y
 = (y); \

1291 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; }))

	)

1292 
	#isgª©îequÆ
(
x
, 
y
) \

1293 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__x
 = (x); __ty≥of__ (
y
Ë
__y
 = (y); \

1294 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

1295 
	#i¶ess
(
x
, 
y
) \

1296 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__x
 = (x); __ty≥of__ (
y
Ë
__y
 = (y); \

1297 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

1298 
	#i¶es£quÆ
(
x
, 
y
) \

1299 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__x
 = (x); __ty≥of__ (
y
Ë
__y
 = (y); \

1300 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

1301 
	#i¶essgª©î
(
x
, 
y
) \

1302 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__x
 = (x); __ty≥of__ (
y
Ë
__y
 = (y); \

1303 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x !__y; }))

	)

1305 
	#isun‹dîed
(
x
, 
y
) \

1306 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__u
 = (x); __ty≥of__ (
y
Ë
__v
 = (y); \

1307 
__u
 !
__v
 && (__u !__u || __v !__v); }))

	)

1311 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

1314 #i‡
__FLT_EVAL_METHOD__
 == 2 || __FLT_EVAL_METHOD__ > 64

1315 
	#__MATH_EVAL_FMT2
(
x
, 
y
Ë((xË+ (yË+ 0.0L)

	)

1316 #ñi‡
__FLT_EVAL_METHOD__
 == 1 || __FLT_EVAL_METHOD__ > 32

1317 
	#__MATH_EVAL_FMT2
(
x
, 
y
Ë((xË+ (yË+ 0.0)

	)

1318 #ñi‡
__FLT_EVAL_METHOD__
 == 0 || __FLT_EVAL_METHOD__ == 32

1319 
	#__MATH_EVAL_FMT2
(
x
, 
y
Ë((xË+ (yË+ 0.0f)

	)

1321 
	#__MATH_EVAL_FMT2
(
x
, 
y
Ë((xË+ (y))

	)

1326 #i‡!
deföed
 
__˝lu•lus
 || (__˝lu•lu†< 201103L && !deföed 
__GNUC__
)

1327 
	#i£qsig
(
x
, 
y
) \

1328 
	`__MATH_TG
 (
	`__MATH_EVAL_FMT2
 (
x
, 
y
), 
__i£qsig
, ((x), (y)))

	)

1341 
ãm∂©e
<
ty≥«me
> 
__i£qsig_ty≥
;

1343 
ãm∂©e
<> 
__i£qsig_ty≥
<>

1345 
__ˇŒ
 (
__x
, 
__y
Ë
throw
 ()

1347  
__i£qsigf
 (
__x
, 
__y
);

1351 
ãm∂©e
<> 
__i£qsig_ty≥
<>

1353 
__ˇŒ
 (
__x
, 
__y
Ë
throw
 ()

1355  
__i£qsig
 (
__x
, 
__y
);

1359 
ãm∂©e
<> 
__i£qsig_ty≥
<>

1361 
__ˇŒ
 (
__x
, 
__y
Ë
throw
 ()

1363 #i‚de‡
__NO_LONG_DOUBLE_MATH


1364  
__i£qsigl
 (
__x
, 
__y
);

1366  
__i£qsig
 (
__x
, 
__y
);

1371 #i‡
__HAVE_FLOAT128_UNLIKE_LDBL


1374 
ãm∂©e
<> 
__i£qsig_ty≥
<
_Flﬂt128
>

1376 
__ˇŒ
 (
_Flﬂt128
 
__x
, _Flﬂt128 
__y
Ë
throw
 ()

1378  
__i£qsigf128
 (
__x
, 
__y
);

1383 
ãm∂©e
<
ty≥«me
 
_T1
,Åy≥«mê
_T2
>

1384 
ölöe
 

1385 
i£qsig
 (
_T1
 
__x
, 
_T2
 
__y
Ë
throw
 ()

1387 #i‡
__˝lu•lus
 >= 201103L

1388 
de˛ty≥
 (
	t__MATH_EVAL_FMT2
 (
	t__x
, 
	t__y
)Ë
	t_T3
;

1390 
__ty≥of
 (
	t__MATH_EVAL_FMT2
 (
	t__x
, 
	t__y
)Ë
	t_T3
;

1392  
__i£qsig_ty≥
<
_T3
>::
__ˇŒ
 (
__x
, 
__y
);

1400 
__END_DECLS


	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


24 
	#_STDIO_H
 1

	)

26 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

27 
	~<bôs/libc-hódî-°¨t.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	#__√ed___va_li°


	)

36 
	~<°d¨g.h
>

38 
	~<bôs/ty≥s.h
>

39 
	~<bôs/ty≥s/__Âos_t.h
>

40 
	~<bôs/ty≥s/__Âos64_t.h
>

41 
	~<bôs/ty≥s/__FILE.h
>

42 
	~<bôs/ty≥s/FILE.h
>

43 
	~<bôs/ty≥s/°ru˘_FILE.h
>

45 #ifde‡
__USE_GNU


46 
	~<bôs/ty≥s/cookõ_io_fun˘i⁄s_t.h
>

49 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


50 #ifde‡
__GNUC__


51 #i‚de‡
_VA_LIST_DEFINED


52 
__gnuc_va_li°
 
	tva_li°
;

53 
	#_VA_LIST_DEFINED


	)

56 
	~<°d¨g.h
>

60 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__off_t_deföed


62 #i‚de‡
__USE_FILE_OFFSET64


63 
__off_t
 
	toff_t
;

65 
__off64_t
 
	toff_t
;

67 
	#__off_t_deföed


	)

69 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


70 
__off64_t
 
	toff64_t
;

71 
	#__off64_t_deföed


	)

75 #ifde‡
__USE_XOPEN2K8


76 #i‚de‡
__ssize_t_deföed


77 
__ssize_t
 
	tssize_t
;

78 
	#__ssize_t_deföed


	)

83 #i‚de‡
__USE_FILE_OFFSET64


84 
__Âos_t
 
	tÂos_t
;

86 
__Âos64_t
 
	tÂos_t
;

88 #ifde‡
__USE_LARGEFILE64


89 
__Âos64_t
 
	tÂos64_t
;

93 
	#_IOFBF
 0

	)

94 
	#_IOLBF
 1

	)

95 
	#_IONBF
 2

	)

99 
	#BUFSIZ
 8192

	)

104 
	#EOF
 (-1)

	)

109 
	#SEEK_SET
 0

	)

110 
	#SEEK_CUR
 1

	)

111 
	#SEEK_END
 2

	)

112 #ifde‡
__USE_GNU


113 
	#SEEK_DATA
 3

	)

114 
	#SEEK_HOLE
 4

	)

118 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


120 
	#P_tmpdú
 "/tmp"

	)

133 
	~<bôs/°dio_lim.h
>

137 
FILE
 *
°dö
;

138 
FILE
 *
°dout
;

139 
FILE
 *
°dîr
;

141 
	#°dö
 
°dö


	)

142 
	#°dout
 
°dout


	)

143 
	#°dîr
 
°dîr


	)

146 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

148 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

150 #ifde‡
__USE_ATFILE


152 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

153 c⁄° *
__√w
Ë
__THROW
;

156 #ifde‡
__USE_GNU


158 
	#RENAME_NOREPLACE
 (1 << 0)

	)

159 
	#RENAME_EXCHANGE
 (1 << 1)

	)

160 
	#RENAME_WHITEOUT
 (1 << 2)

	)

164 
	$ª«mót2
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

165 c⁄° *
__√w
, 
__Êags
Ë
__THROW
;

172 
	`f˛o£
 (
FILE
 *
__°ªam
);

174 #unde‡
__©å_dóŒoc_f˛o£


175 
	#__©å_dóŒoc_f˛o£
 
	`__©å_dóŒoc
 (
f˛o£
, 1)

	)

181 #i‚de‡
__USE_FILE_OFFSET64


182 
FILE
 *
	$tmpfûe
 ()

183 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

185 #ifde‡
__REDIRECT


186 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
)

187 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

189 
	#tmpfûe
 
tmpfûe64


	)

193 #ifde‡
__USE_LARGEFILE64


194 
FILE
 *
	$tmpfûe64
 ()

195 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

199 *
	$tm≤am
 ([
L_tm≤am
]Ë
__THROW
 
__wur
;

201 #ifde‡
__USE_MISC


204 *
	$tm≤am_r
 (
__s
[
L_tm≤am
]Ë
__THROW
 
__wur
;

208 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


216 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

217 
__THROW
 
__©åibuã_mÆloc__
 
__wur
 
__©å_dóŒoc_‰ì
;

224 
	`fÊush
 (
FILE
 *
__°ªam
);

226 #ifde‡
__USE_MISC


233 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

236 #ifde‡
__USE_GNU


243 
	`f˛o£Æl
 ();

247 #i‚de‡
__USE_FILE_OFFSET64


252 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

253 c⁄° *
__ª°ri˘
 
__modes
)

254 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

259 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

260 c⁄° *
__ª°ri˘
 
__modes
,

261 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

263 #ifde‡
__REDIRECT


264 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

265 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

266 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

267 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

268 c⁄° *
__ª°ri˘
 
__modes
,

269 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

270 
__wur
;

272 
	#f›í
 
f›í64


	)

273 
	#‰e›í
 
‰e›í64


	)

276 #ifde‡
__USE_LARGEFILE64


277 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

278 c⁄° *
__ª°ri˘
 
__modes
)

279 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

280 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

281 c⁄° *
__ª°ri˘
 
__modes
,

282 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

285 #ifdef 
__USE_POSIX


287 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW


288 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

291 #ifdef 
__USE_GNU


294 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

295 c⁄° *
__ª°ri˘
 
__modes
,

296 
cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW


297 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

300 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

302 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

303 
__THROW
 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

308 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW


309 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

311 #ifde‡
_WCHAR_H


315 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW


316 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
;

322 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

326 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

327 
__modes
, 
size_t
 
__n
Ë
__THROW
;

329 #ifdef 
__USE_MISC


332 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

333 
size_t
 
__size
Ë
__THROW
;

336 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

344 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

345 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

350 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

352 
	$•rötf
 (*
__ª°ri˘
 
__s
,

353 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

359 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

360 
__gnuc_va_li°
 
__¨g
);

365 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
);

367 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

368 
__gnuc_va_li°
 
__¨g
Ë
__THROWNL
;

370 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


372 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

373 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

374 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

376 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

377 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

378 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

381 #i‡
	`__GLIBC_USE
 (
LIB_EXT2
)

384 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

385 
__gnuc_va_li°
 
__¨g
)

386 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

387 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

388 c⁄° *
__ª°ri˘
 
__fmt
, ...)

389 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

390 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

391 c⁄° *
__ª°ri˘
 
__fmt
, ...)

392 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

395 #ifde‡
__USE_XOPEN2K8


397 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

398 
__gnuc_va_li°
 
__¨g
)

399 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

400 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

401 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

409 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

410 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

415 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

417 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

418 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

424 
	~<bôs/Êﬂä.h
>

425 #i‡!
	`__GLIBC_USE
 (
DEPRECATED_SCANF
Ë&& !
deföed
 
__LDBL_COMPAT
 \

426 && 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 0

427 #ifde‡
__REDIRECT


428 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

429 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

430 
__isoc99_fsˇnf
Ë
__wur
;

431 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

432 
__isoc99_sˇnf
Ë
__wur
;

433 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

434 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

435 
__isoc99_ssˇnf
);

437 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

438 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

439 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

440 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

441 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

442 
	#fsˇnf
 
__isoc99_fsˇnf


	)

443 
	#sˇnf
 
__isoc99_sˇnf


	)

444 
	#ssˇnf
 
__isoc99_ssˇnf


	)

448 #ifdef 
__USE_ISOC99


453 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

454 
__gnuc_va_li°
 
__¨g
)

455 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

461 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

462 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

465 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

466 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

467 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

470 #i‡!
	`__GLIBC_USE
 (
DEPRECATED_SCANF
)

471 #i‡
deföed
 
__REDIRECT
 && !deföed 
__LDBL_COMPAT
 \

472 && 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 0

473 
	`__REDIRECT
 (
vfsˇnf
,

474 (
FILE
 *
__ª°ri˘
 
__s
,

475 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
),

476 
__isoc99_vfsˇnf
)

477 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

478 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

479 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

480 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

481 
	`__REDIRECT_NTH
 (
vssˇnf
,

482 (c⁄° *
__ª°ri˘
 
__s
,

483 c⁄° *
__ª°ri˘
 
__f‹m©
,

484 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

485 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

486 #ñi‡!
deföed
 
__REDIRECT


487 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

488 c⁄° *
__ª°ri˘
 
__f‹m©
,

489 
__gnuc_va_li°
 
__¨g
Ë
__wur
;

490 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

491 
__gnuc_va_li°
 
__¨g
Ë
__wur
;

492 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

493 c⁄° *
__ª°ri˘
 
__f‹m©
,

494 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

495 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

496 
	#vsˇnf
 
__isoc99_vsˇnf


	)

497 
	#vssˇnf
 
__isoc99_vssˇnf


	)

507 
	`fgëc
 (
FILE
 *
__°ªam
);

508 
	`gëc
 (
FILE
 *
__°ªam
);

514 
	`gëch¨
 ();

516 #ifde‡
__USE_POSIX199506


521 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

522 
	`gëch¨_u∆ocked
 ();

525 #ifde‡
__USE_MISC


532 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

543 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

544 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

550 
	`putch¨
 (
__c
);

552 #ifde‡
__USE_MISC


559 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

562 #ifde‡
__USE_POSIX199506


567 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

568 
	`putch¨_u∆ocked
 (
__c
);

572 #i‡
deföed
 
__USE_MISC
 \

573 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

575 
	`gëw
 (
FILE
 *
__°ªam
);

578 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

586 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

587 
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 2));

589 #i‡
	`__GLIBC_USE
 (
DEPRECATED_GETS
)

599 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

602 #ifde‡
__USE_GNU


609 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

610 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur


611 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 2));

615 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

626 
__ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

627 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

628 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

629 
__ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

630 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

631 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

639 
__ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

640 
size_t
 *
__ª°ri˘
 
__n
,

641 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

649 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

655 
	`puts
 (c⁄° *
__s
);

662 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

669 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

670 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

675 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

676 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

678 #ifde‡
__USE_GNU


685 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

686 
FILE
 *
__ª°ri˘
 
__°ªam
);

689 #ifde‡
__USE_MISC


696 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

697 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

698 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

699 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

707 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

712 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

717 
	`ªwöd
 (
FILE
 *
__°ªam
);

724 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


725 #i‚de‡
__USE_FILE_OFFSET64


730 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

735 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

737 #ifde‡
__REDIRECT


738 
	`__REDIRECT
 (
f£eko
,

739 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

740 
f£eko64
);

741 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

743 
	#f£eko
 
f£eko64


	)

744 
	#·ñlo
 
·ñlo64


	)

749 #i‚de‡
__USE_FILE_OFFSET64


754 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

759 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

761 #ifde‡
__REDIRECT


762 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

763 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

764 
	`__REDIRECT
 (
f£ços
,

765 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

767 
	#fgëpos
 
fgëpos64


	)

768 
	#f£ços
 
f£ços64


	)

772 #ifde‡
__USE_LARGEFILE64


773 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

774 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

775 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

776 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

780 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

782 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

784 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

786 #ifde‡
__USE_MISC


788 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

789 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

790 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

798 
	`≥º‹
 (c⁄° *
__s
);

801 #ifdef 
__USE_POSIX


803 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

806 #ifde‡
__USE_MISC


808 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

812 #ifde‡
__USE_POSIX2


817 
	`p˛o£
 (
FILE
 *
__°ªam
);

823 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
)

824 
__©åibuã_mÆloc__
 
	$__©å_dóŒoc
 (
p˛o£
, 1Ë
__wur
;

829 #ifdef 
__USE_POSIX


831 *
	$˘îmid
 (*
__s
Ë
__THROW


832 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1));

836 #i‡(
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
Ë|| deföed 
__USE_GNU


838 *
	$cu£rid
 (*
__s
)

839 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1));

843 #ifdef 
__USE_GNU


844 
ob°ack
;

847 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

848 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

849 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

850 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

851 c⁄° *
__ª°ri˘
 
__f‹m©
,

852 
__gnuc_va_li°
 
__¨gs
)

853 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

857 #ifde‡
__USE_POSIX199506


861 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

865 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

868 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

871 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


874 
	~<bôs/gë›t_posix.h
>

879 
	`__uÊow
 (
FILE
 *);

880 
	`__ovîÊow
 (
FILE
 *, );

884 #ifde‡
__USE_EXTERN_INLINES


885 
	~<bôs/°dio.h
>

887 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


888 
	~<bôs/°dio2.h
>

891 
	~<bôs/Êﬂä.h
>

892 #i‡
deföed
 
__LDBL_COMPAT
 || 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

893 
	~<bôs/°dio-ldbl.h
>

896 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

25 
	~<bôs/libc-hódî-°¨t.h
>

28 
	#__√ed_size_t


	)

29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

31 
	~<°ddef.h
>

33 
	g__BEGIN_DECLS


35 
	#_STDLIB_H
 1

	)

37 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


39 
	~<bôs/waôÊags.h
>

40 
	~<bôs/waô°©us.h
>

43 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (°©us)

	)

44 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (°©us)

	)

45 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (°©us)

	)

46 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (°©us)

	)

47 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (°©us)

	)

48 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (°©us)

	)

49 #ifde‡
__WIFCONTINUED


50 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (°©us)

	)

55 
	~<bôs/Êﬂä.h
>

60 
	mquŸ
;

61 
	mªm
;

62 } 
	tdiv_t
;

65 #i‚de‡
__ldiv_t_deföed


68 
	mquŸ
;

69 
	mªm
;

70 } 
	tldiv_t
;

71 
	#__ldiv_t_deföed
 1

	)

74 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


76 
__exãnsi⁄__
 struct

78 
	mquŸ
;

79 
	mªm
;

80 } 
	tŒdiv_t
;

81 
	#__Œdiv_t_deföed
 1

	)

86 
	#RAND_MAX
 2147483647

	)

91 
	#EXIT_FAILURE
 1

	)

92 
	#EXIT_SUCCESS
 0

	)

96 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

97 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

101 
	$©of
 (c⁄° *
__≈å
)

102 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

104 
	$©oi
 (c⁄° *
__≈å
)

105 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

107 
	$©ﬁ
 (c⁄° *
__≈å
)

108 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

110 #ifde‡
__USE_ISOC99


112 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

113 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

117 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

118 **
__ª°ri˘
 
__íd±r
)

119 
__THROW
 
	`__n⁄nuŒ
 ((1));

121 #ifdef 
__USE_ISOC99


123 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

124 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

126 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

127 **
__ª°ri˘
 
__íd±r
)

128 
__THROW
 
	`__n⁄nuŒ
 ((1));

133 #i‡
__HAVE_FLOAT16
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

134 
_Flﬂt16
 
	$°πof16
 (c⁄° *
__ª°ri˘
 
__≈å
,

135 **
__ª°ri˘
 
__íd±r
)

136 
__THROW
 
	`__n⁄nuŒ
 ((1));

139 #i‡
__HAVE_FLOAT32
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

140 
_Flﬂt32
 
	$°πof32
 (c⁄° *
__ª°ri˘
 
__≈å
,

141 **
__ª°ri˘
 
__íd±r
)

142 
__THROW
 
	`__n⁄nuŒ
 ((1));

145 #i‡
__HAVE_FLOAT64
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

146 
_Flﬂt64
 
	$°πof64
 (c⁄° *
__ª°ri˘
 
__≈å
,

147 **
__ª°ri˘
 
__íd±r
)

148 
__THROW
 
	`__n⁄nuŒ
 ((1));

151 #i‡
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

152 
_Flﬂt128
 
	$°πof128
 (c⁄° *
__ª°ri˘
 
__≈å
,

153 **
__ª°ri˘
 
__íd±r
)

154 
__THROW
 
	`__n⁄nuŒ
 ((1));

157 #i‡
__HAVE_FLOAT32X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

158 
_Flﬂt32x
 
	$°πof32x
 (c⁄° *
__ª°ri˘
 
__≈å
,

159 **
__ª°ri˘
 
__íd±r
)

160 
__THROW
 
	`__n⁄nuŒ
 ((1));

163 #i‡
__HAVE_FLOAT64X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

164 
_Flﬂt64x
 
	$°πof64x
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

169 #i‡
__HAVE_FLOAT128X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

170 
_Flﬂt128x
 
	$°πof128x
 (c⁄° *
__ª°ri˘
 
__≈å
,

171 **
__ª°ri˘
 
__íd±r
)

172 
__THROW
 
	`__n⁄nuŒ
 ((1));

176 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1));

180 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

181 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

182 
__THROW
 
	`__n⁄nuŒ
 ((1));

184 #ifde‡
__USE_MISC


186 
__exãnsi⁄__


187 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

191 
__exãnsi⁄__


192 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

193 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

194 
__THROW
 
	`__n⁄nuŒ
 ((1));

197 #ifde‡
__USE_ISOC99


199 
__exãnsi⁄__


200 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

204 
__exãnsi⁄__


205 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

206 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

207 
__THROW
 
	`__n⁄nuŒ
 ((1));

211 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

212 
	$°r‰omd
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

213 
__f
)

214 
__THROW
 
	`__n⁄nuŒ
 ((3));

216 
	$°r‰omf
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

217 
__f
)

218 
__THROW
 
	`__n⁄nuŒ
 ((3));

220 
	$°r‰oml
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

221 
__f
)

222 
__THROW
 
	`__n⁄nuŒ
 ((3));

225 #i‡
__HAVE_FLOAT16
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

226 
	$°r‰omf16
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

227 
_Flﬂt16
 
__f
)

228 
__THROW
 
	`__n⁄nuŒ
 ((3));

231 #i‡
__HAVE_FLOAT32
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

232 
	$°r‰omf32
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

233 
_Flﬂt32
 
__f
)

234 
__THROW
 
	`__n⁄nuŒ
 ((3));

237 #i‡
__HAVE_FLOAT64
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

238 
	$°r‰omf64
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

239 
_Flﬂt64
 
__f
)

240 
__THROW
 
	`__n⁄nuŒ
 ((3));

243 #i‡
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

244 
	$°r‰omf128
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

245 
_Flﬂt128
 
__f
)

246 
__THROW
 
	`__n⁄nuŒ
 ((3));

249 #i‡
__HAVE_FLOAT32X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

250 
	$°r‰omf32x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

251 
_Flﬂt32x
 
__f
)

252 
__THROW
 
	`__n⁄nuŒ
 ((3));

255 #i‡
__HAVE_FLOAT64X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

256 
	$°r‰omf64x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

257 
_Flﬂt64x
 
__f
)

258 
__THROW
 
	`__n⁄nuŒ
 ((3));

261 #i‡
__HAVE_FLOAT128X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

262 
	$°r‰omf128x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

263 
_Flﬂt128x
 
__f
)

264 
__THROW
 
	`__n⁄nuŒ
 ((3));

268 #ifde‡
__USE_GNU


272 
	~<bôs/ty≥s/loˇÀ_t.h
>

274 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

275 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

276 
loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

278 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

279 **
__ª°ri˘
 
__íd±r
,

280 
__ba£
, 
loˇÀ_t
 
__loc
)

281 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

283 
__exãnsi⁄__


284 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

285 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

286 
loˇÀ_t
 
__loc
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

289 
__exãnsi⁄__


290 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

291 **
__ª°ri˘
 
__íd±r
,

292 
__ba£
, 
loˇÀ_t
 
__loc
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

295 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

296 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

299 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

300 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

301 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

303 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

304 **
__ª°ri˘
 
__íd±r
,

305 
loˇÀ_t
 
__loc
)

306 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

308 #i‡
__HAVE_FLOAT16


309 
_Flﬂt16
 
	$°πof16_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

310 **
__ª°ri˘
 
__íd±r
,

311 
loˇÀ_t
 
__loc
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

315 #i‡
__HAVE_FLOAT32


316 
_Flﬂt32
 
	$°πof32_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

317 **
__ª°ri˘
 
__íd±r
,

318 
loˇÀ_t
 
__loc
)

319 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

322 #i‡
__HAVE_FLOAT64


323 
_Flﬂt64
 
	$°πof64_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

324 **
__ª°ri˘
 
__íd±r
,

325 
loˇÀ_t
 
__loc
)

326 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

329 #i‡
__HAVE_FLOAT128


330 
_Flﬂt128
 
	$°πof128_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 **
__ª°ri˘
 
__íd±r
,

332 
loˇÀ_t
 
__loc
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

336 #i‡
__HAVE_FLOAT32X


337 
_Flﬂt32x
 
	$°πof32x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

338 **
__ª°ri˘
 
__íd±r
,

339 
loˇÀ_t
 
__loc
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

343 #i‡
__HAVE_FLOAT64X


344 
_Flﬂt64x
 
	$°πof64x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

345 **
__ª°ri˘
 
__íd±r
,

346 
loˇÀ_t
 
__loc
)

347 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

350 #i‡
__HAVE_FLOAT128X


351 
_Flﬂt128x
 
	$°πof128x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

352 **
__ª°ri˘
 
__íd±r
,

353 
loˇÀ_t
 
__loc
)

354 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

359 #ifde‡
__USE_EXTERN_INLINES


360 
__exã∫_ölöe
 

361 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

363  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

364 
	}
}

365 
__exã∫_ölöe
 

366 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

368  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

369 
	}
}

371 #ifde‡
__USE_ISOC99


372 
__exãnsi⁄__
 
__exã∫_ölöe
 

373 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

375  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

376 
	}
}

381 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


385 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

388 
	$a64l
 (c⁄° *
__s
)

389 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

393 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


394 
	~<sys/ty≥s.h
>

401 
	$øndom
 (Ë
__THROW
;

404 
	$§™dom
 (
__£ed
Ë
__THROW
;

410 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

411 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

415 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

418 #ifde‡
__USE_MISC


423 
	søndom_d©a


425 
öt32_t
 *
Âå
;

426 
öt32_t
 *
Ωå
;

427 
öt32_t
 *
°©e
;

428 
ønd_ty≥
;

429 
ønd_deg
;

430 
ønd_£p
;

431 
öt32_t
 *
íd_±r
;

434 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

435 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

437 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

438 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

441 
size_t
 
__°©ñí
,

442 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

443 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

445 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

446 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

447 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$ønd
 (Ë
__THROW
;

455 
	$§™d
 (
__£ed
Ë
__THROW
;

457 #ifde‡
__USE_POSIX199506


459 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

463 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


467 
	$dønd48
 (Ë
__THROW
;

468 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

471 
	$Ã™d48
 (Ë
__THROW
;

472 
	$ƒ™d48
 (
__xsubi
[3])

473 
__THROW
 
	`__n⁄nuŒ
 ((1));

476 
	$mønd48
 (Ë
__THROW
;

477 
	$jønd48
 (
__xsubi
[3])

478 
__THROW
 
	`__n⁄nuŒ
 ((1));

481 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

482 *
	$£ed48
 (
__£ed16v
[3])

483 
__THROW
 
	`__n⁄nuŒ
 ((1));

484 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

486 #ifde‡
__USE_MISC


490 
	sdønd48_d©a


492 
__x
[3];

493 
__ﬁd_x
[3];

494 
__c
;

495 
__öô
;

496 
__exãnsi⁄__
 
__a
;

501 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

502 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

503 
	$î™d48_r
 (
__xsubi
[3],

504 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

505 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

508 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

509 *
__ª°ri˘
 
__ªsu…
)

510 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

511 
	$ƒ™d48_r
 (
__xsubi
[3],

512 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

513 *
__ª°ri˘
 
__ªsu…
)

514 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

517 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

518 *
__ª°ri˘
 
__ªsu…
)

519 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

520 
	$jønd48_r
 (
__xsubi
[3],

521 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

522 *
__ª°ri˘
 
__ªsu…
)

523 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

526 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

527 
__THROW
 
	`__n⁄nuŒ
 ((2));

529 
	$£ed48_r
 (
__£ed16v
[3],

530 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

532 
	$lc⁄g48_r
 (
__∑øm
[7],

533 
dønd48_d©a
 *
__buf„r
)

534 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

539 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__


540 
	`__©åibuã_Æloc_size__
 ((1)Ë
__wur
;

542 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

543 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((1, 2)Ë
__wur
;

550 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

551 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
 
	`__©åibuã_Æloc_size__
 ((2));

554 
	$‰ì
 (*
__±r
Ë
__THROW
;

556 #ifde‡
__USE_MISC


562 *
	$ªÆloˇºay
 (*
__±r
, 
size_t
 
__nmemb
, size_à
__size
)

563 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__


564 
	`__©åibuã_Æloc_size__
 ((2, 3))

565 
__©å_dóŒoc_‰ì
;

568 *
	$ªÆloˇºay
 (*
__±r
, 
size_t
 
__nmemb
, size_à
__size
)

569 
__THROW
 
	`__©å_dóŒoc
 (
ªÆloˇºay
, 1);

572 #ifde‡
__USE_MISC


573 
	~<Æloˇ.h
>

576 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

577 || 
deföed
 
__USE_MISC


579 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__


580 
	`__©åibuã_Æloc_size__
 ((1)Ë
__wur
;

583 #ifde‡
__USE_XOPEN2K


585 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

586 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

589 #ifde‡
__USE_ISOC11


591 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

592 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

596 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

600 
	$©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

602 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


604 #ifde‡
__˝lu•lus


605 "C++" 
	$©_quick_exô
 ((*
__func
) ())

606 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

608 
	$©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

612 #ifdef 
__USE_MISC


615 
	$⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

616 
__THROW
 
	`__n⁄nuŒ
 ((1));

622 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

624 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


628 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

631 #ifde‡
__USE_ISOC99


634 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

639 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

641 #ifde‡
__USE_GNU


644 *
	$£cuª_gëív
 (c⁄° *
__«me
)

645 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


652 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

655 #ifde‡
__USE_XOPEN2K


658 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

659 
__THROW
 
	`__n⁄nuŒ
 ((2));

662 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

665 #ifdef 
__USE_MISC


669 
	$˛óªnv
 (Ë
__THROW
;

673 #i‡
deföed
 
__USE_MISC
 \

674 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

680 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

683 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


692 #i‚de‡
__USE_FILE_OFFSET64


693 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

695 #ifde‡
__REDIRECT


696 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

697 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

699 
	#mk°emp
 
mk°emp64


	)

702 #ifde‡
__USE_LARGEFILE64


703 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

707 #ifde‡
__USE_MISC


714 #i‚de‡
__USE_FILE_OFFSET64


715 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

717 #ifde‡
__REDIRECT


718 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

719 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

721 
	#mk°emps
 
mk°emps64


	)

724 #ifde‡
__USE_LARGEFILE64


725 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

726 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

730 #ifde‡
__USE_XOPEN2K8


736 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

739 #ifde‡
__USE_GNU


746 #i‚de‡
__USE_FILE_OFFSET64


747 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

749 #ifde‡
__REDIRECT


750 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

751 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

753 
	#mko°emp
 
mko°emp64


	)

756 #ifde‡
__USE_LARGEFILE64


757 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

766 #i‚de‡
__USE_FILE_OFFSET64


767 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

768 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

770 #ifde‡
__REDIRECT


771 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

772 
__Êags
), 
mko°emps64
)

773 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

775 
	#mko°emps
 
mko°emps64


	)

778 #ifde‡
__USE_LARGEFILE64


779 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

780 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

789 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

792 #ifdef 
__USE_GNU


795 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

796 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_mÆloc__


797 
__©å_dóŒoc_‰ì
 
__wur
;

800 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


806 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

807 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

812 #i‚de‡
__COMPAR_FN_T


813 
	#__COMPAR_FN_T


	)

814 (*
	t__com∑r_‚_t
) (const *, const *);

816 #ifdef 
__USE_GNU


817 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

820 #ifde‡
__USE_GNU


821 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

826 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

827 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

828 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

830 #ifde‡
__USE_EXTERN_INLINES


831 
	~<bôs/°dlib-b£¨ch.h
>

836 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

837 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

838 #ifde‡
__USE_GNU


839 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

840 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

841 
	`__n⁄nuŒ
 ((1, 4));

846 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

847 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

849 #ifde‡
__USE_ISOC99


850 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

851 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

858 
div_t
 
	$div
 (
__numî
, 
__díom
)

859 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

860 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

861 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

863 #ifde‡
__USE_ISOC99


864 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

865 
__díom
)

866 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

870 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

871 || 
deföed
 
__USE_MISC


878 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

879 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

884 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

885 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

890 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

891 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

894 #ifde‡
__USE_MISC


896 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

897 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

898 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

899 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

900 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

901 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

902 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

903 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

908 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

909 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

910 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

911 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

912 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

913 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

915 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

916 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

917 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

918 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

919 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

920 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

921 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

922 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

928 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

931 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

932 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

935 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

939 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

940 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW


941 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 2));

943 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

944 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

945 
__THROW


946 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3)Ë__©å_ac˚s†((
__ªad_⁄ly__
, 2));

948 #ifde‡
__USE_MISC


953 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

957 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


964 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

965 *c⁄° *
__ª°ri˘
 
__tokís
,

966 **
__ª°ri˘
 
__vÆuï
)

967 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

973 #ifde‡
__USE_XOPEN2KXSI


975 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

978 #ifde‡
__USE_XOPEN_EXTENDED


983 
	$gø¡±
 (
__fd
Ë
__THROW
;

987 
	$u∆ock±
 (
__fd
Ë
__THROW
;

992 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

995 #ifde‡
__USE_GNU


999 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

1000 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

1003 
	`gë±
 ();

1006 #ifde‡
__USE_MISC


1010 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

1011 
__THROW
 
	`__n⁄nuŒ
 ((1));

1014 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K


1017 
	$ây¶Ÿ
 (Ë
__THROW
;

1020 
	~<bôs/°dlib-Êﬂt.h
>

1023 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1024 
	~<bôs/°dlib.h
>

1027 
	~<bôs/Êﬂä.h
>

1028 #i‡
deföed
 
__LDBL_COMPAT
 || 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

1029 
	~<bôs/°dlib-ldbl.h
>

1032 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

28 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

36 #i‡
deföed
 
__˝lu•lus
 && (
__GNUC_PREREQ
 (4, 4) \

37 || 
	$__glibc_˛™g_¥îeq
 (3, 5))

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

43 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

44 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

47 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

48 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

53 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || 
	`__GLIBC_USE
 (
ISOC2X
)

54 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

55 
__c
, 
size_t
 
__n
)

56 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 4));

61 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

64 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

65 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

68 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


71 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

72 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

73 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

74 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

76 #ifde‡
__OPTIMIZE__


77 
__exã∫_Æways_ölöe
 *

78 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


80  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

83 
__exã∫_Æways_ölöe
 const *

84 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


86  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

89 
	}
}

91 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

92 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

95 #ifde‡
__USE_GNU


98 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


99 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

100 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

101 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

102 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

104 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

105 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

109 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


110 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

111 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1))

112 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 3));

113 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

114 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1))

115 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 3));

117 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1))

119 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 3));

125 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

128 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

129 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

133 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

137 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

141 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

151 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3));

154 #ifde‡
__USE_XOPEN2K8


156 
	~<bôs/ty≥s/loˇÀ_t.h
>

159 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__l
)

160 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

163 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

164 
loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4))

165 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3));

168 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8
 \

169 || 
	`__GLIBC_USE
 (
LIB_EXT2
Ë|| 
	$__GLIBC_USE
 (
ISOC2X
))

171 *
	$°rdup
 (c⁄° *
__s
)

172 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

178 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
Ë|| __GLIBC_USE (
ISOC2X
)

179 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

180 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

183 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


185 
	#°rdu∑
(
s
) \

186 (
__exãnsi⁄__
 \

188 c⁄° *
__ﬁd
 = (
s
); \

189 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

190 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

191 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

192 
	}
}))

	)

195 
	#°∫du∑
(
s
, 
n
) \

196 (
__exãnsi⁄__
 \

198 c⁄° *
__ﬁd
 = (
s
); \

199 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

200 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

201 
__√w
[
__Àn
] = '\0'; \

202 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

203 }))

	)

207 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


210 *
°rchr
 (*
__s
, 
__c
)

211 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

212 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

213 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

215 #ifde‡
__OPTIMIZE__


216 
__exã∫_Æways_ölöe
 *

217 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


219  
__buûtö_°rchr
 (
__s
, 
__c
);

222 
__exã∫_Æways_ölöe
 const *

223 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


225  
__buûtö_°rchr
 (
__s
, 
__c
);

230 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

231 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

234 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


237 *
	`°ºchr
 (*
__s
, 
__c
)

238 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

239 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

240 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

242 #ifde‡
__OPTIMIZE__


243 
__exã∫_Æways_ölöe
 *

244 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


246  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

249 
__exã∫_Æways_ölöe
 const *

250 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


252  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

255 
	}
}

257 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

258 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

261 #ifde‡
__USE_GNU


264 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


265 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

266 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

267 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

268 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

270 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

271 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

277 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

278 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

281 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

282 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

284 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


287 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

288 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

289 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

290 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

292 #ifde‡
__OPTIMIZE__


293 
__exã∫_Æways_ölöe
 *

294 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


296  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

299 
__exã∫_Æways_ölöe
 const *

300 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


302  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

305 
	}
}

307 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

308 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

311 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


314 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

315 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

316 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

317 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

319 #ifde‡
__OPTIMIZE__


320 
__exã∫_Æways_ölöe
 *

321 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


323  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

326 
__exã∫_Æways_ölöe
 const *

327 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


329  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

332 
	}
}

334 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

335 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

340 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

341 
__THROW
 
	`__n⁄nuŒ
 ((2));

345 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

346 c⁄° *
__ª°ri˘
 
__dñim
,

347 **
__ª°ri˘
 
__ßve_±r
)

348 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

349 #ifde‡
__USE_POSIX


350 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

351 **
__ª°ri˘
 
__ßve_±r
)

352 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

355 #ifde‡
__USE_GNU


357 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


358 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

359 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

360 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

361 c⁄° *
__√edÀ
)

362 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

364 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

365 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 #ifde‡
__USE_GNU


373 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

374 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

375 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3))

376 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 2))

377 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 3, 4));

381 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

382 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

383 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

384 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

385 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

386 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 
size_t
 
	$°æí
 (c⁄° *
__s
)

392 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

394 #ifdef 
__USE_XOPEN2K8


397 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

398 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

403 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

404 #ifde‡
__USE_XOPEN2K


412 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


415 #ifde‡
__REDIRECT_NTH


416 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

417 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

418 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2))

419 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

421 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

422 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

423 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

428 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

429 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

432 #ifde‡
__USE_GNU


434 c⁄° *
	$°ªº‹desc_≈
 (
__îr
Ë
__THROW
;

436 c⁄° *
	$°ªº‹«me_≈
 (
__îr
Ë
__THROW
;

440 #ifde‡
__USE_XOPEN2K8


442 *
	$°ªº‹_l
 (
__î∫um
, 
loˇÀ_t
 
__l
Ë
__THROW
;

445 #ifde‡
__USE_MISC


446 
	~<°rögs.h
>

450 
	$ex∂icô_bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1))

451 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 2));

455 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

456 c⁄° *
__ª°ri˘
 
__dñim
)

457 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

460 #ifdef 
__USE_XOPEN2K8


462 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

464 #ifde‡
__USE_GNU


466 c⁄° *
	$sigabbªv_≈
 (
__sig
Ë
__THROW
;

469 c⁄° *
	$sigdes¸_≈
 (
__sig
Ë
__THROW
;

473 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

474 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

475 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

476 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

480 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

481 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

482 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

483 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

484 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

485 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

488 #ifdef 
__USE_GNU


490 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

491 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

494 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

497 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1))

498 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 2));

500 #i‚de‡
ba£«me


505 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


506 "C++" *
	$ba£«me
 (*
__fûíame
)

507 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

508 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

509 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

511 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

516 #i‡
	`__GNUC_PREREQ
 (3,4)

517 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


519 
	~<bôs/°rög_f‹tifõd.h
>

523 
__END_DECLS


	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


24 
	#_WCHAR_H
 1

	)

26 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

27 
	~<bôs/libc-hódî-°¨t.h
>

30 
	~<bôs/Êﬂä.h
>

32 
	#__√ed_size_t


	)

33 
	#__√ed_wch¨_t


	)

34 
	#__√ed_NULL


	)

35 
	~<°ddef.h
>

37 
	#__√ed___va_li°


	)

38 
	~<°d¨g.h
>

40 
	~<bôs/wch¨.h
>

41 
	~<bôs/ty≥s/wöt_t.h
>

42 
	~<bôs/ty≥s/mb°©e_t.h
>

43 
	~<bôs/ty≥s/__FILE.h
>

45 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


46 
	~<bôs/ty≥s/FILE.h
>

48 #ifde‡
__USE_XOPEN2K8


49 
	~<bôs/ty≥s/loˇÀ_t.h
>

53 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

54 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

57 #i‚de‡
WCHAR_MIN


59 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

60 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

63 #i‚de‡
WEOF


64 
	#WEOF
 (0xffffffffu)

	)

74 #i‡(
deföed
 
__USE_XOPEN
 && !deföed 
__USE_GNU
 \

75 && !(
deföed
 
	g__USE_XOPEN2K
 && !deföed 
	g__USE_XOPEN2KXSI
))

76 
	~<bôs/w˘y≥-wch¨.h
>

79 
__BEGIN_DECLS


83 
	gtm
;

87 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

88 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

89 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

92 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

93 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

94 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

97 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

98 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

99 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

101 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

102 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

103 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

106 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

107 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

109 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

110 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

112 #ifde‡
__USE_XOPEN2K8


114 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

117 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

118 
size_t
 
__n
Ë
__THROW
;

122 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

123 
loˇÀ_t
 
__loc
Ë
__THROW
;

125 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

126 
size_t
 
__n
, 
loˇÀ_t
 
__loc
Ë
__THROW
;

131 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

135 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

136 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

138 #ifde‡
__USE_XOPEN2K8


144 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

145 
loˇÀ_t
 
__loc
Ë
__THROW
;

150 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

151 
size_t
 
__n
, 
loˇÀ_t
 
__loc
Ë
__THROW
;

154 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW


155 
__©åibuã_mÆloc__
 
__©å_dóŒoc_‰ì
;

159 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


160 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

161 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

162 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

163 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

165 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

166 
__THROW
 
__©åibuã_puª__
;

169 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


170 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

171 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

172 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

173 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

175 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

176 
__THROW
 
__©åibuã_puª__
;

179 #ifde‡
__USE_GNU


182 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

183 
__THROW
 
__©åibuã_puª__
;

188 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

189 
__THROW
 
__©åibuã_puª__
;

192 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

193 
__THROW
 
__©åibuã_puª__
;

195 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


196 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

197 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

198 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

199 c⁄° 
wch¨_t
 *
__ac˚±
)

200 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

202 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

203 
__THROW
 
__©åibuã_puª__
;

206 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


207 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

208 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

209 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

210 c⁄° 
wch¨_t
 *
__√edÀ
)

211 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

213 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

214 
__THROW
 
__©åibuã_puª__
;

218 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

219 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

220 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

223 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

225 #ifde‡
__USE_XOPEN


227 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


228 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

229 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

230 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

231 c⁄° 
wch¨_t
 *
__√edÀ
)

232 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

234 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

235 
__THROW
 
__©åibuã_puª__
;

239 #ifde‡
__USE_XOPEN2K8


241 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

242 
__THROW
 
__©åibuã_puª__
;

247 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


248 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

249 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

250 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

251 
size_t
 
__n
)

252 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

254 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

255 
__THROW
 
__©åibuã_puª__
;

259 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

260 
__THROW
 
__©åibuã_puª__
;

263 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

264 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

268 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

269 
__THROW
;

272 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

274 #ifde‡
__USE_GNU


277 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

278 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

279 
__THROW
;

285 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

289 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

293 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

297 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

298 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

299 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

302 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

303 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

306 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

307 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

308 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

309 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

311 #ifde‡
__USE_EXTERN_INLINES


317 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

318 
__exã∫_ölöe
 
wöt_t


319 
	`__NTH
 (
	$btowc
 (
__c
))

320 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

321 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

323 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

324 
__exã∫_ölöe
 

325 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

326 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

327 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

329 
__exã∫_ölöe
 
size_t


330 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

331 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

332 {  (
__ps
 !
NULL


333 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

338 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

339 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

340 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

344 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

345 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

346 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

349 #ifdef 
__USE_XOPEN2K8


352 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

353 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

354 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

358 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

359 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

360 
size_t
 
__nwc
, size_à
__Àn
,

361 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

366 #ifde‡
__USE_XOPEN


368 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

372 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

378 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

379 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

381 #ifde‡
__USE_ISOC99


383 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

384 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

385 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

386 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

391 #i‡
__HAVE_FLOAT16
 && 
deföed
 
__USE_GNU


392 
_Flﬂt16
 
	$wc°of16
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

393 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

396 #i‡
__HAVE_FLOAT32
 && 
deföed
 
__USE_GNU


397 
_Flﬂt32
 
	$wc°of32
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

398 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

401 #i‡
__HAVE_FLOAT64
 && 
deföed
 
__USE_GNU


402 
_Flﬂt64
 
	$wc°of64
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

403 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

406 #i‡
__HAVE_FLOAT128
 && 
deföed
 
__USE_GNU


407 
_Flﬂt128
 
	$wc°of128
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

408 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

411 #i‡
__HAVE_FLOAT32X
 && 
deföed
 
__USE_GNU


412 
_Flﬂt32x
 
	$wc°of32x
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

413 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

416 #i‡
__HAVE_FLOAT64X
 && 
deföed
 
__USE_GNU


417 
_Flﬂt64x
 
	$wc°of64x
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

418 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

421 #i‡
__HAVE_FLOAT128X
 && 
deföed
 
__USE_GNU


422 
_Flﬂt128x
 
	$wc°of128x
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

423 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

429 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

430 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

434 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

435 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

436 
__THROW
;

438 #ifde‡
__USE_ISOC99


441 
__exãnsi⁄__


442 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

443 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

444 
__THROW
;

448 
__exãnsi⁄__


449 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

450 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

451 
__ba£
Ë
__THROW
;

454 #ifde‡
__USE_GNU


457 
__exãnsi⁄__


458 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

459 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

460 
__THROW
;

464 
__exãnsi⁄__


465 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

466 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

467 
__ba£
Ë
__THROW
;

470 #ifde‡
__USE_GNU


474 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

475 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

476 
loˇÀ_t
 
__loc
Ë
__THROW
;

478 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

479 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

480 
__ba£
, 
loˇÀ_t
 
__loc
Ë
__THROW
;

482 
__exãnsi⁄__


483 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

484 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

485 
__ba£
, 
loˇÀ_t
 
__loc
Ë
__THROW
;

487 
__exãnsi⁄__


488 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

489 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

490 
__ba£
, 
loˇÀ_t
 
__loc
)

491 
__THROW
;

493 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

494 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

495 
__THROW
;

497 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

498 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

499 
__THROW
;

501 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

502 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

503 
loˇÀ_t
 
__loc
Ë
__THROW
;

505 #i‡
__HAVE_FLOAT16


506 
_Flﬂt16
 
	$wc°of16_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

507 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

508 
loˇÀ_t
 
__loc
Ë
__THROW
;

511 #i‡
__HAVE_FLOAT32


512 
_Flﬂt32
 
	$wc°of32_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

513 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

514 
loˇÀ_t
 
__loc
Ë
__THROW
;

517 #i‡
__HAVE_FLOAT64


518 
_Flﬂt64
 
	$wc°of64_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

519 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

520 
loˇÀ_t
 
__loc
Ë
__THROW
;

523 #i‡
__HAVE_FLOAT128


524 
_Flﬂt128
 
	$wc°of128_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

525 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

526 
loˇÀ_t
 
__loc
Ë
__THROW
;

529 #i‡
__HAVE_FLOAT32X


530 
_Flﬂt32x
 
	$wc°of32x_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

531 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

532 
loˇÀ_t
 
__loc
Ë
__THROW
;

535 #i‡
__HAVE_FLOAT64X


536 
_Flﬂt64x
 
	$wc°of64x_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

537 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

538 
loˇÀ_t
 
__loc
Ë
__THROW
;

541 #i‡
__HAVE_FLOAT128X


542 
_Flﬂt128x
 
	$wc°of128x_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

543 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

544 
loˇÀ_t
 
__loc
Ë
__THROW
;

549 #ifde‡
__USE_XOPEN2K8


552 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

553 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

557 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

558 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

559 
__THROW
;

565 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

566 #i‚de‡
__©å_dóŒoc_f˛o£


567 #i‡
deföed
 
__has_buûtö


568 #i‡
	`__has_buûtö
 (
__buûtö_f˛o£
)

571 
	#__©å_dóŒoc_f˛o£
 
	`__©å_dóŒoc
 (
__buûtö_f˛o£
, 1)

	)

575 #i‚de‡
__©å_dóŒoc_f˛o£


576 
	#__©å_dóŒoc_f˛o£


	)

581 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW


582 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
;

585 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


588 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

595 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

596 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

602 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

605 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

606 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

607 
__THROW
 ;

613 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

614 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

615 
__gnuc_va_li°
 
__¨g
)

621 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

622 
__gnuc_va_li°
 
__¨g
)

626 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

627 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

628 
__gnuc_va_li°
 
__¨g
)

629 
__THROW
 ;

636 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

637 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

643 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

646 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

647 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

648 
__THROW
 ;

654 #i‡!
	`__GLIBC_USE
 (
DEPRECATED_SCANF
Ë&& !
deföed
 
__LDBL_COMPAT
 \

655 && 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 0

656 #ifde‡
__REDIRECT


657 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

658 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

659 
__isoc99_fwsˇnf
)

661 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

662 
__isoc99_wsˇnf
)

664 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

665 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

666 ...), 
__isoc99_swsˇnf
)

669 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

670 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

671 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

672 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

673 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

674 
__THROW
;

675 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

676 
	#wsˇnf
 
__isoc99_wsˇnf


	)

677 
	#swsˇnf
 
__isoc99_swsˇnf


	)

683 #ifde‡
__USE_ISOC99


688 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

689 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

690 
__gnuc_va_li°
 
__¨g
)

696 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

697 
__gnuc_va_li°
 
__¨g
)

700 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

701 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

702 
__gnuc_va_li°
 
__¨g
)

703 
__THROW
 ;

706 #i‡!
	`__GLIBC_USE
 (
DEPRECATED_SCANF
) \

707 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

708 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
) \

709 && 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 0

710 #ifde‡
__REDIRECT


711 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

712 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

713 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

715 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

716 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

718 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

719 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

720 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

723 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

724 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

725 
__gnuc_va_li°
 
__¨g
);

726 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

727 
__gnuc_va_li°
 
__¨g
);

728 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

729 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

730 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

731 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

732 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

733 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

744 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

745 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

751 
wöt_t
 
	`gëwch¨
 ();

758 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

759 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

765 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

773 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

774 
__FILE
 *
__ª°ri˘
 
__°ªam
);

780 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

781 
__FILE
 *
__ª°ri˘
 
__°ªam
);

788 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

791 #ifde‡
__USE_GNU


799 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

800 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

808 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

816 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

825 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

826 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

835 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

836 
__FILE
 *
__ª°ri˘
 
__°ªam
);

844 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

845 
__FILE
 *
__ª°ri˘
 
__°ªam
);

852 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

853 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

854 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

856 #ifde‡
__USE_GNU


859 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

860 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

861 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

862 
loˇÀ_t
 
__loc
Ë
__THROW
;

866 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


867 
	~<bôs/wch¨2.h
>

870 
	~<bôs/Êﬂä.h
>

871 #i‡
deföed
 
__LDBL_COMPAT
 || 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

872 
	~<bôs/wch¨-ldbl.h
>

875 
__END_DECLS


	@/usr/include/X11/X.h

3 #i‚de‡
X_H


4 
	#X_H


	)

53 
	#X_PROTOCOL
 11

	)

54 
	#X_PROTOCOL_REVISION
 0

	)

63 #i‚de‡
_XSERVER64


64 #i‚de‡
_XTYPEDEF_XID


65 
	#_XTYPEDEF_XID


	)

66 
	tXID
;

68 #i‚de‡
_XTYPEDEF_MASK


69 
	#_XTYPEDEF_MASK


	)

70 
	tMask
;

72 #i‚de‡
_XTYPEDEF_ATOM


73 
	#_XTYPEDEF_ATOM


	)

74 
	tAtom
;

76 
	tVisuÆID
;

77 
	tTime
;

79 
	~<X11/Xmd.h
>

80 #i‚de‡
_XTYPEDEF_XID


81 
	#_XTYPEDEF_XID


	)

82 
CARD32
 
	tXID
;

84 #i‚de‡
_XTYPEDEF_MASK


85 
	#_XTYPEDEF_MASK


	)

86 
CARD32
 
	tMask
;

88 #i‚de‡
_XTYPEDEF_ATOM


89 
	#_XTYPEDEF_ATOM


	)

90 
CARD32
 
	tAtom
;

92 
CARD32
 
	tVisuÆID
;

93 
CARD32
 
	tTime
;

96 
XID
 
	tWödow
;

97 
XID
 
	tDøwabÀ
;

98 #i‚de‡
_XTYPEDEF_FONT


99 
	#_XTYPEDEF_FONT


	)

100 
XID
 
	tF⁄t
;

102 
XID
 
	tPixm≠
;

103 
XID
 
	tCurs‹
;

104 
XID
 
	tCﬁ‹m≠
;

105 
XID
 
	tGC⁄ãxt
;

106 
XID
 
	tKeySym
;

108 
	tKeyCode
;

114 #i‚de‡
N⁄e


115 
	#N⁄e
 0L

	)

118 
	#P¨ítRñ©ive
 1L

	)

121 
	#C›yFromP¨ít
 0L

	)

126 
	#PoöãrWödow
 0L

	)

127 
	#I≈utFocus
 1L

	)

129 
	#PoöãrRoŸ
 1L

	)

131 
	#AnyPr›îtyTy≥
 0L

	)

133 
	#AnyKey
 0L

	)

135 
	#AnyBuâ⁄
 0L

	)

137 
	#AŒTemp‹¨y
 0L

	)

139 
	#CuºítTime
 0L

	)

141 
	#NoSymbﬁ
 0L

	)

150 
	#NoEvítMask
 0L

	)

151 
	#KeyPªssMask
 (1L<<0)

	)

152 
	#KeyRñó£Mask
 (1L<<1)

	)

153 
	#Buâ⁄PªssMask
 (1L<<2)

	)

154 
	#Buâ⁄Rñó£Mask
 (1L<<3)

	)

155 
	#E¡îWödowMask
 (1L<<4)

	)

156 
	#LóveWödowMask
 (1L<<5)

	)

157 
	#PoöãrMŸi⁄Mask
 (1L<<6)

	)

158 
	#PoöãrMŸi⁄HötMask
 (1L<<7)

	)

159 
	#Buâ⁄1MŸi⁄Mask
 (1L<<8)

	)

160 
	#Buâ⁄2MŸi⁄Mask
 (1L<<9)

	)

161 
	#Buâ⁄3MŸi⁄Mask
 (1L<<10)

	)

162 
	#Buâ⁄4MŸi⁄Mask
 (1L<<11)

	)

163 
	#Buâ⁄5MŸi⁄Mask
 (1L<<12)

	)

164 
	#Buâ⁄MŸi⁄Mask
 (1L<<13)

	)

165 
	#Keym≠SèãMask
 (1L<<14)

	)

166 
	#ExposuªMask
 (1L<<15)

	)

167 
	#VisibûôyCh™geMask
 (1L<<16)

	)

168 
	#Såu˘uªNŸifyMask
 (1L<<17)

	)

169 
	#ResizeRedúe˘Mask
 (1L<<18)

	)

170 
	#Sub°ru˘uªNŸifyMask
 (1L<<19)

	)

171 
	#Sub°ru˘uªRedúe˘Mask
 (1L<<20)

	)

172 
	#FocusCh™geMask
 (1L<<21)

	)

173 
	#Pr›îtyCh™geMask
 (1L<<22)

	)

174 
	#Cﬁ‹m≠Ch™geMask
 (1L<<23)

	)

175 
	#Ow√rGøbBuâ⁄Mask
 (1L<<24)

	)

181 
	#KeyPªss
 2

	)

182 
	#KeyRñó£
 3

	)

183 
	#Buâ⁄Pªss
 4

	)

184 
	#Buâ⁄Rñó£
 5

	)

185 
	#MŸi⁄NŸify
 6

	)

186 
	#E¡îNŸify
 7

	)

187 
	#LóveNŸify
 8

	)

188 
	#FocusIn
 9

	)

189 
	#FocusOut
 10

	)

190 
	#Keym≠NŸify
 11

	)

191 
	#Expo£
 12

	)

192 
	#GøphicsExpo£
 13

	)

193 
	#NoExpo£
 14

	)

194 
	#VisibûôyNŸify
 15

	)

195 
	#Cª©eNŸify
 16

	)

196 
	#De°royNŸify
 17

	)

197 
	#Unm≠NŸify
 18

	)

198 
	#M≠NŸify
 19

	)

199 
	#M≠Reque°
 20

	)

200 
	#Rï¨ítNŸify
 21

	)

201 
	#C⁄figuªNŸify
 22

	)

202 
	#C⁄figuªReque°
 23

	)

203 
	#GøvôyNŸify
 24

	)

204 
	#ResizeReque°
 25

	)

205 
	#CúcuœãNŸify
 26

	)

206 
	#CúcuœãReque°
 27

	)

207 
	#Pr›îtyNŸify
 28

	)

208 
	#Sñe˘i⁄CÀ¨
 29

	)

209 
	#Sñe˘i⁄Reque°
 30

	)

210 
	#Sñe˘i⁄NŸify
 31

	)

211 
	#Cﬁ‹m≠NŸify
 32

	)

212 
	#Clõ¡Mesßge
 33

	)

213 
	#M≠pögNŸify
 34

	)

214 
	#GíîicEvít
 35

	)

215 
	#LASTEvít
 36

	)

221 
	#Shi·Mask
 (1<<0)

	)

222 
	#LockMask
 (1<<1)

	)

223 
	#C⁄åﬁMask
 (1<<2)

	)

224 
	#Mod1Mask
 (1<<3)

	)

225 
	#Mod2Mask
 (1<<4)

	)

226 
	#Mod3Mask
 (1<<5)

	)

227 
	#Mod4Mask
 (1<<6)

	)

228 
	#Mod5Mask
 (1<<7)

	)

233 
	#Shi·M≠Index
 0

	)

234 
	#LockM≠Index
 1

	)

235 
	#C⁄åﬁM≠Index
 2

	)

236 
	#Mod1M≠Index
 3

	)

237 
	#Mod2M≠Index
 4

	)

238 
	#Mod3M≠Index
 5

	)

239 
	#Mod4M≠Index
 6

	)

240 
	#Mod5M≠Index
 7

	)

246 
	#Buâ⁄1Mask
 (1<<8)

	)

247 
	#Buâ⁄2Mask
 (1<<9)

	)

248 
	#Buâ⁄3Mask
 (1<<10)

	)

249 
	#Buâ⁄4Mask
 (1<<11)

	)

250 
	#Buâ⁄5Mask
 (1<<12)

	)

252 
	#AnyModifõr
 (1<<15Ë

	)

259 
	#Buâ⁄1
 1

	)

260 
	#Buâ⁄2
 2

	)

261 
	#Buâ⁄3
 3

	)

262 
	#Buâ⁄4
 4

	)

263 
	#Buâ⁄5
 5

	)

267 
	#NŸifyN‹mÆ
 0

	)

268 
	#NŸifyGøb
 1

	)

269 
	#NŸifyUngøb
 2

	)

270 
	#NŸifyWhûeGøbbed
 3

	)

272 
	#NŸifyHöt
 1

	)

276 
	#NŸifyAn˚°‹
 0

	)

277 
	#NŸifyVútuÆ
 1

	)

278 
	#NŸifyIn„ri‹
 2

	)

279 
	#NŸifyN⁄löór
 3

	)

280 
	#NŸifyN⁄löórVútuÆ
 4

	)

281 
	#NŸifyPoöãr
 5

	)

282 
	#NŸifyPoöãrRoŸ
 6

	)

283 
	#NŸifyDëaûN⁄e
 7

	)

287 
	#VisibûôyUnobscuªd
 0

	)

288 
	#VisibûôyP¨tüŒyObscuªd
 1

	)

289 
	#VisibûôyFuŒyObscuªd
 2

	)

293 
	#Pœ˚OnT›
 0

	)

294 
	#Pœ˚OnBŸtom
 1

	)

298 
	#FamûyI¡î√t
 0

	)

299 
	#FamûyDEC√t
 1

	)

300 
	#FamûyChaos
 2

	)

301 
	#FamûyI¡î√t6
 6

	)

304 
	#FamûySîvîI¡î¥ëed
 5

	)

308 
	#Pr›îtyNewVÆue
 0

	)

309 
	#Pr›îtyDñëe
 1

	)

313 
	#Cﬁ‹m≠Unö°ÆÀd
 0

	)

314 
	#Cﬁ‹m≠In°ÆÀd
 1

	)

318 
	#GøbModeSync
 0

	)

319 
	#GøbModeAsync
 1

	)

323 
	#GøbSuc˚ss
 0

	)

324 
	#AÃódyGøbbed
 1

	)

325 
	#GøbInvÆidTime
 2

	)

326 
	#GøbNŸVõwabÀ
 3

	)

327 
	#GøbFrozí
 4

	)

331 
	#AsyncPoöãr
 0

	)

332 
	#SyncPoöãr
 1

	)

333 
	#RïœyPoöãr
 2

	)

334 
	#AsyncKeybﬂrd
 3

	)

335 
	#SyncKeybﬂrd
 4

	)

336 
	#RïœyKeybﬂrd
 5

	)

337 
	#AsyncBŸh
 6

	)

338 
	#SyncBŸh
 7

	)

342 
	#RevîtToN⁄e
 ()
N⁄e


	)

343 
	#RevîtToPoöãrRoŸ
 ()
PoöãrRoŸ


	)

344 
	#RevîtToP¨ít
 2

	)

350 
	#Suc˚ss
 0

	)

351 
	#BadReque°
 1

	)

352 
	#BadVÆue
 2

	)

353 
	#BadWödow
 3

	)

354 
	#BadPixm≠
 4

	)

355 
	#BadAtom
 5

	)

356 
	#BadCurs‹
 6

	)

357 
	#BadF⁄t
 7

	)

358 
	#BadM©ch
 8

	)

359 
	#BadDøwabÀ
 9

	)

360 
	#BadAc˚ss
 10

	)

369 
	#BadAŒoc
 11

	)

370 
	#BadCﬁ‹
 12

	)

371 
	#BadGC
 13

	)

372 
	#BadIDChoi˚
 14

	)

373 
	#BadName
 15

	)

374 
	#BadLígth
 16

	)

375 
	#BadIm∂emíèti⁄
 17

	)

377 
	#Fú°Exãnsi⁄Eº‹
 128

	)

378 
	#La°Exãnsi⁄Eº‹
 255

	)

387 
	#I≈utOuçut
 1

	)

388 
	#I≈utO∆y
 2

	)

392 
	#CWBackPixm≠
 (1L<<0)

	)

393 
	#CWBackPixñ
 (1L<<1)

	)

394 
	#CWB‹dîPixm≠
 (1L<<2)

	)

395 
	#CWB‹dîPixñ
 (1L<<3)

	)

396 
	#CWBôGøvôy
 (1L<<4)

	)

397 
	#CWWöGøvôy
 (1L<<5)

	)

398 
	#CWBackögSt‹e
 (1L<<6)

	)

399 
	#CWBackögPœ√s
 (1L<<7)

	)

400 
	#CWBackögPixñ
 (1L<<8)

	)

401 
	#CWOvîrideRedúe˘
 (1L<<9)

	)

402 
	#CWSaveUndî
 (1L<<10)

	)

403 
	#CWEvítMask
 (1L<<11)

	)

404 
	#CWD⁄tPr›ag©e
 (1L<<12)

	)

405 
	#CWCﬁ‹m≠
 (1L<<13)

	)

406 
	#CWCurs‹
 (1L<<14)

	)

410 
	#CWX
 (1<<0)

	)

411 
	#CWY
 (1<<1)

	)

412 
	#CWWidth
 (1<<2)

	)

413 
	#CWHeight
 (1<<3)

	)

414 
	#CWB‹dîWidth
 (1<<4)

	)

415 
	#CWSiblög
 (1<<5)

	)

416 
	#CWSèckMode
 (1<<6)

	)

421 
	#F‹gëGøvôy
 0

	)

422 
	#N‹thWe°Gøvôy
 1

	)

423 
	#N‹thGøvôy
 2

	)

424 
	#N‹thEa°Gøvôy
 3

	)

425 
	#We°Gøvôy
 4

	)

426 
	#CíãrGøvôy
 5

	)

427 
	#Ea°Gøvôy
 6

	)

428 
	#SouthWe°Gøvôy
 7

	)

429 
	#SouthGøvôy
 8

	)

430 
	#SouthEa°Gøvôy
 9

	)

431 
	#SèticGøvôy
 10

	)

435 
	#Unm≠Gøvôy
 0

	)

439 
	#NŸU£ful
 0

	)

440 
	#WhíM≠≥d
 1

	)

441 
	#Always
 2

	)

445 
	#IsUnm≠≥d
 0

	)

446 
	#IsUnvõwabÀ
 1

	)

447 
	#IsVõwabÀ
 2

	)

451 
	#SëModeIn£π
 0

	)

452 
	#SëModeDñëe
 1

	)

456 
	#De°royAŒ
 0

	)

457 
	#RëaöPîm™ít
 1

	)

458 
	#RëaöTemp‹¨y
 2

	)

462 
	#Above
 0

	)

463 
	#Bñow
 1

	)

464 
	#T›If
 2

	)

465 
	#BŸtomIf
 3

	)

466 
	#Oµosôe
 4

	)

470 
	#Rai£Lowe°
 0

	)

471 
	#LowîHighe°
 1

	)

475 
	#Pr›ModeRïœ˚
 0

	)

476 
	#Pr›ModePª≥nd
 1

	)

477 
	#Pr›ModeAµíd
 2

	)

485 
	#GX˛ór
 0x0

	)

486 
	#GX™d
 0x1

	)

487 
	#GX™dRevî£
 0x2

	)

488 
	#GXc›y
 0x3

	)

489 
	#GX™dInvîãd
 0x4

	)

490 
	#GXno›
 0x5

	)

491 
	#GXx‹
 0x6

	)

492 
	#GX‹
 0x7

	)

493 
	#GXn‹
 0x8

	)

494 
	#GXequiv
 0x9

	)

495 
	#GXövît
 0x®

	)

496 
	#GX‹Revî£
 0xb

	)

497 
	#GXc›yInvîãd
 0x¯

	)

498 
	#GX‹Invîãd
 0xd

	)

499 
	#GX«nd
 0xê

	)

500 
	#GX£t
 0x‡

	)

504 
	#LöeSﬁid
 0

	)

505 
	#LöeOnOffDash
 1

	)

506 
	#LöeDoubÀDash
 2

	)

510 
	#C≠NŸLa°
 0

	)

511 
	#C≠Buâ
 1

	)

512 
	#C≠Round
 2

	)

513 
	#C≠Proje˘ög
 3

	)

517 
	#JoöMôî
 0

	)

518 
	#JoöRound
 1

	)

519 
	#JoöBevñ
 2

	)

523 
	#FûlSﬁid
 0

	)

524 
	#FûlTûed
 1

	)

525 
	#FûlStù∂ed
 2

	)

526 
	#FûlO∑queStù∂ed
 3

	)

530 
	#EvíOddRuÀ
 0

	)

531 
	#WödögRuÀ
 1

	)

535 
	#ClùByChûdªn
 0

	)

536 
	#In˛udeIn„ri‹s
 1

	)

540 
	#Uns‹ãd
 0

	)

541 
	#YS‹ãd
 1

	)

542 
	#YXS‹ãd
 2

	)

543 
	#YXB™ded
 3

	)

547 
	#Co‹dModeOrigö
 0

	)

548 
	#Co‹dModePªvious
 1

	)

552 
	#Com∂ex
 0

	)

553 
	#N⁄c⁄vex
 1

	)

554 
	#C⁄vex
 2

	)

558 
	#ArcCh‹d
 0

	)

559 
	#ArcPõSli˚
 1

	)

564 
	#GCFun˘i⁄
 (1L<<0)

	)

565 
	#GCPœ√Mask
 (1L<<1)

	)

566 
	#GCF‹eground
 (1L<<2)

	)

567 
	#GCBackground
 (1L<<3)

	)

568 
	#GCLöeWidth
 (1L<<4)

	)

569 
	#GCLöeStyÀ
 (1L<<5)

	)

570 
	#GCC≠StyÀ
 (1L<<6)

	)

571 
	#GCJoöStyÀ
 (1L<<7)

	)

572 
	#GCFûlStyÀ
 (1L<<8)

	)

573 
	#GCFûlRuÀ
 (1L<<9)

	)

574 
	#GCTûe
 (1L<<10)

	)

575 
	#GCStù∂e
 (1L<<11)

	)

576 
	#GCTûeStùXOrigö
 (1L<<12)

	)

577 
	#GCTûeStùYOrigö
 (1L<<13)

	)

578 
	#GCF⁄t
 (1L<<14)

	)

579 
	#GCSubwödowMode
 (1L<<15)

	)

580 
	#GCGøphicsExposuªs
 (1L<<16)

	)

581 
	#GCClùXOrigö
 (1L<<17)

	)

582 
	#GCClùYOrigö
 (1L<<18)

	)

583 
	#GCClùMask
 (1L<<19)

	)

584 
	#GCDashOff£t
 (1L<<20)

	)

585 
	#GCDashLi°
 (1L<<21)

	)

586 
	#GCArcMode
 (1L<<22)

	)

588 
	#GCLa°Bô
 22

	)

595 
	#F⁄tLe·ToRight
 0

	)

596 
	#F⁄tRightToLe·
 1

	)

598 
	#F⁄tCh™ge
 255

	)

606 
	#XYBôm≠
 0

	)

607 
	#XYPixm≠
 1

	)

608 
	#ZPixm≠
 2

	)

616 
	#AŒocN⁄e
 0

	)

617 
	#AŒocAŒ
 1

	)

622 
	#DoRed
 (1<<0)

	)

623 
	#DoGªí
 (1<<1)

	)

624 
	#DoBlue
 (1<<2)

	)

632 
	#Curs‹Sh≠e
 0

	)

633 
	#TûeSh≠e
 1

	)

634 
	#Stù∂eSh≠e
 2

	)

640 
	#AutoRïótModeOff
 0

	)

641 
	#AutoRïótModeOn
 1

	)

642 
	#AutoRïótModeDeÁu…
 2

	)

644 
	#LedModeOff
 0

	)

645 
	#LedModeOn
 1

	)

649 
	#KBKeyClickPî˚¡
 (1L<<0)

	)

650 
	#KBBñlPî˚¡
 (1L<<1)

	)

651 
	#KBBñlPôch
 (1L<<2)

	)

652 
	#KBBñlDuøti⁄
 (1L<<3)

	)

653 
	#KBLed
 (1L<<4)

	)

654 
	#KBLedMode
 (1L<<5)

	)

655 
	#KBKey
 (1L<<6)

	)

656 
	#KBAutoRïótMode
 (1L<<7)

	)

658 
	#M≠pögSuc˚ss
 0

	)

659 
	#M≠pögBusy
 1

	)

660 
	#M≠pögFaûed
 2

	)

662 
	#M≠pögModifõr
 0

	)

663 
	#M≠pögKeybﬂrd
 1

	)

664 
	#M≠pögPoöãr
 2

	)

670 
	#D⁄tPª„rBœnkög
 0

	)

671 
	#Pª„rBœnkög
 1

	)

672 
	#DeÁu…Bœnkög
 2

	)

674 
	#DißbÀS¸ìnSavî
 0

	)

675 
	#DißbÀS¸ìnI¡îvÆ
 0

	)

677 
	#D⁄tAŒowExposuªs
 0

	)

678 
	#AŒowExposuªs
 1

	)

679 
	#DeÁu…Exposuªs
 2

	)

683 
	#S¸ìnSavîRe£t
 0

	)

684 
	#S¸ìnSavîA˘ive
 1

	)

692 
	#Ho°In£π
 0

	)

693 
	#Ho°Dñëe
 1

	)

697 
	#E«bÀAc˚ss
 1

	)

698 
	#DißbÀAc˚ss
 0

	)

704 
	#SèticGøy
 0

	)

705 
	#GøySˇÀ
 1

	)

706 
	#SèticCﬁ‹
 2

	)

707 
	#P£udoCﬁ‹
 3

	)

708 
	#TrueCﬁ‹
 4

	)

709 
	#Dúe˘Cﬁ‹
 5

	)

714 
	#LSBFú°
 0

	)

715 
	#MSBFú°
 1

	)

	@/usr/include/X11/Xarch.h

1 #i‚de‡
_XARCH_H_


2 
	#_XARCH_H_


	)

35 #ifde‡
X_BYTE_ORDER


37 
	#X_BIG_ENDIAN
 4321

	)

38 
	#X_LITTLE_ENDIAN
 1234

	)

42 #i‡
deföed
(
SVR4
Ë|| deföed(
__SVR4
)

43 
	~<sys/ty≥s.h
>

44 
	~<sys/byã‹dî.h
>

45 #ñi‡
deföed
(
CSRG_BASED
)

46 #i‡
deföed
(
__NëBSD__
Ë|| deföed(
__O≥nBSD__
)

47 
	~<sys/ty≥s.h
>

49 
	~<machöe/ídün.h
>

50 #ñi‡
deföed
(
löux
)

51 #i‡
deföed
 
__STRICT_ANSI__


52 #unde‡
__STRICT_ANSI__


53 
	~<ídün.h
>

54 
	#__STRICT_ANSI__


	)

56 
	~<ídün.h
>

59 #i‡!
deföed
(
LITTLE_ENDIAN
Ë&& deföed(
__LITTLE_ENDIAN
)

60 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

62 #i‡!
deföed
(
BIG_ENDIAN
Ë&& deföed(
__BIG_ENDIAN
)

63 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

65 #i‡!
deföed
(
PDP_ENDIAN
Ë&& deföed(
__PDP_ENDIAN
)

66 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

68 #i‡!
deföed
(
BYTE_ORDER
Ë&& deföed(
__BYTE_ORDER
)

69 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

73 #i‚de‡
BYTE_ORDER


74 
	#LITTLE_ENDIAN
 1234

	)

75 
	#BIG_ENDIAN
 4321

	)

77 #i‡
deföed
(
__sun
Ë&& deföed(
__SVR4
)

78 
	~<sys/iß_defs.h
>

79 #ifde‡
_LITTLE_ENDIAN


80 
	#BYTE_ORDER
 
LITTLE_ENDIAN


	)

82 #ifde‡
_BIG_ENDIAN


83 
	#BYTE_ORDER
 
BIG_ENDIAN


	)

88 
	#X_BYTE_ORDER
 
BYTE_ORDER


	)

89 
	#X_BIG_ENDIAN
 
BIG_ENDIAN


	)

90 
	#X_LITTLE_ENDIAN
 
LITTLE_ENDIAN


	)

	@/usr/include/X11/Xfuncproto.h

29 #i‚de‡
_XFUNCPROTO_H_


30 
	#_XFUNCPROTO_H_


	)

32 #i‚de‡
NìdFun˘i⁄PrŸŸy≥s


33 
	#NìdFun˘i⁄PrŸŸy≥s
 1

	)

36 #i‚de‡
NìdV¨¨gsPrŸŸy≥s


37 
	#NìdV¨¨gsPrŸŸy≥s
 1

	)

40 #i‡
NìdFun˘i⁄PrŸŸy≥s


42 #i‚de‡
NìdNe°edPrŸŸy≥s


43 
	#NìdNe°edPrŸŸy≥s
 1

	)

46 #i‚de‡
_Xc⁄°


47 
	#_Xc⁄°
 c⁄°

	)

51 #i‡!
deföed
(
NARROWPROTO
) && \

52 (
deföed
(
__löux__
Ë|| deföed(
__FªeBSD__
Ë|| deföed(
__NëBSD__
Ë|| 
	$deföed
(
__O≥nBSD__
))

53 
	#NARROWPROTO


	)

55 #i‚de‡
FUNCPROTO


56 
	#FUNCPROTO
 15

	)

59 #i‚de‡
NìdWidePrŸŸy≥s


60 #ifde‡
NARROWPROTO


61 
	#NìdWidePrŸŸy≥s
 0

	)

63 
	#NìdWidePrŸŸy≥s
 1

	)

69 #i‚de‡
_XFUNCPROTOBEGIN


70 #i‡
	`deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

71 
	#_XFUNCPROTOBEGIN
 "C" {

	)

72 
	#_XFUNCPROTOEND
 
	}

	)
}

74 
	#_XFUNCPROTOBEGIN


	)

75 
	#_XFUNCPROTOEND


	)

80 #i‚de‡
__has_©åibuã


81 
	#__has_©åibuã
(
x
Ë0

	)

83 #i‚de‡
__has_„©uª


84 
	#__has_„©uª
(
x
Ë0

	)

86 #i‚de‡
__has_exãnsi⁄


87 
	#__has_exãnsi⁄
(
x
Ë0

	)

91 #i‡
__has_©åibuã
(
__£¡öñ__
Ë|| (
deföed
(
__GNUC__
) && (__GNUC__ >= 4))

92 
	#_X_SENTINEL
(
x
Ë
	`__©åibuã__
 ((
	`__£¡öñ__
(x)))

	)

94 
	#_X_SENTINEL
(
x
)

	)

98 #i‡(
__has_©åibuã
(
visibûôy
Ë|| (
deföed
(
__GNUC__
) && (__GNUC__ >= 4))) \

99 && !
deföed
(
__CYGWIN__
Ë&& !
	$deföed
(
__MINGW32__
)

100 
	#_X_EXPORT
 
	`__©åibuã__
((
	`visibûôy
("deÁu…")))

	)

101 
	#_X_HIDDEN
 
	`__©åibuã__
((
	`visibûôy
("hiddí")))

	)

102 
	#_X_INTERNAL
 
	`__©åibuã__
((
	`visibûôy
("öã∫Æ")))

	)

103 #ñi‡
	`deföed
(
__SUNPRO_C
) && (__SUNPRO_C >= 0x550)

104 
	#_X_EXPORT
 
__globÆ


	)

105 
	#_X_HIDDEN
 
__hiddí


	)

106 
	#_X_INTERNAL
 
__hiddí


	)

108 
	#_X_EXPORT


	)

109 
	#_X_HIDDEN


	)

110 
	#_X_INTERNAL


	)

115 #i‡
	`deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 303)

116 
	#_X_LIKELY
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 1)

	)

117 
	#_X_UNLIKELY
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 0)

	)

119 
	#_X_LIKELY
(
x
Ë(x)

	)

120 
	#_X_UNLIKELY
(
x
Ë(x)

	)

125 #i‡
	`__has_©åibuã
(
__cﬁd__
) || \

126 (
	`deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 403))

127 
	#_X_COLD
 
	`__©åibuã__
((
__cﬁd__
))

	)

129 
	#_X_COLD


	)

133 #i‡
	`__has_©åibuã
(
dïªˇãd
) \

134 || (
	`deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 301)) \

135 || (
	`deföed
(
__SUNPRO_C
) && (__SUNPRO_C >= 0x5130))

136 
	#_X_DEPRECATED
 
	`__©åibuã__
((
dïªˇãd
))

	)

138 
	#_X_DEPRECATED


	)

142 #i‡
	`__has_exãnsi⁄
(
©åibuã_dïªˇãd_wôh_mesßge
) || \

143 (
	`deföed
(
__GNUC__
Ë&& ((__GNUC__ >5Ë|| ((__GNUC__ =4Ë&& (
__GNUC_MINOR__
 >= 5))))

144 
	#_X_DEPRECATED_MSG
(
_msg
Ë
	`__©åibuã__
((
	`dïªˇãd
(_msg)))

	)

146 
	#_X_DEPRECATED_MSG
(
_msg
Ë
_X_DEPRECATED


	)

150 #i‡
	`__has_©åibuã
(
n‹ëu∫
) \

151 || (
	`deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 205)) \

152 || (
	`deföed
(
__SUNPRO_C
) && (__SUNPRO_C >= 0x590))

153 
	#_X_NORETURN
 
	`__©åibuã
((
n‹ëu∫
))

	)

155 
	#_X_NORETURN


	)

159 #i‡
	`__has_©åibuã
(
__f‹m©__
) \

160 || 
	`deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 203)

161 
	#_X_ATTRIBUTE_PRINTF
(
x
,
y
Ë
	`__©åibuã__
((
	`__f‹m©__
(
__¥ötf__
,x,y)))

	)

163 
	#_X_ATTRIBUTE_PRINTF
(
x
,
y
)

	)

169 #i‡
	`__has_©åibuã
(
n⁄nuŒ
) \

170 && 
	`deföed
(
__STDC_VERSION__
) && (__STDC_VERSION__ - 0 >= 199901L)

171 
	#_X_NONNULL
(...Ë
	`__©åibuã__
((
	`n⁄nuŒ
(
__VA_ARGS__
)))

	)

172 #ñi‡
	`__has_©åibuã
(
n⁄nuŒ
) \

173 || 
	`deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 303)

174 
	#_X_NONNULL
(
¨gs
...Ë
	`__©åibuã__
((
	`n⁄nuŒ
◊rgs)))

	)

175 #ñi‡
	`deföed
(
__STDC_VERSION__
) && (__STDC_VERSION__ - 0 >= 199901L)

176 
	#_X_NONNULL
(...Ë

	)

180 #i‡
	`__has_©åibuã
(
__unu£d__
) \

181 || 
	`deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 205)

182 
	#_X_UNUSED
 
	`__©åibuã__
((
__unu£d__
))

	)

184 
	#_X_UNUSED


	)

190 #i‡
	`deföed
(
ölöe
) || \

191 (
	`deföed
(
__STDC_VERSION__
) && (__STDC_VERSION__ - 0 >= 199901L)) || \

192 (
	`deföed
(
__SUNPRO_C
) && (__SUNPRO_C >= 0x550))

193 
	#_X_INLINE
 
ölöe


	)

194 #ñi‡
	`deföed
(
__GNUC__
Ë&& !deföed(
__STRICT_ANSI__
)

195 
	#_X_INLINE
 
__ölöe__


	)

197 
	#_X_INLINE


	)

202 #i‚de‡
_X_RESTRICT_KYWD


203 #i‡
	`deföed
(
ª°ri˘
) || \

204 (
	`deföed
(
__STDC_VERSION__
) && (__STDC_VERSION__ - 0 >= 199901L) \

205 && !
	$deföed
(
__˝lu•lus
))

206 
	#_X_RESTRICT_KYWD
 
ª°ri˘


	)

207 #ñi‡
	`deföed
(
__GNUC__
Ë&& !deföed(
__STRICT_ANSI__
)

208 
	#_X_RESTRICT_KYWD
 
__ª°ri˘__


	)

210 
	#_X_RESTRICT_KYWD


	)

215 #i‡
	`__has_©åibuã
(
no_ßnôize_thªad
)

216 
	#_X_NOTSAN
 
	`__©åibuã__
((
no_ßnôize_thªad
))

	)

218 
	#_X_NOTSAN


	)

	@/usr/include/X11/Xosdefs.h

27 #i‚de‡
_XOSDEFS_H_


28 
	#_XOSDEFS_H_


	)

37 #ifde‡
_SCO_DS


38 #i‚de‡
__SCO__


39 
	#__SCO__


	)

43 #ifde‡
__i386__


44 #ifde‡
SYSV


45 #i‡!
deföed
(
__SCO__
) && \

46 !
deföed
(
__UNIXWARE__
Ë&& !
	$deföed
(
__sun
)

47 #i‡!
	`deföed
(
_POSIX_SOURCE
)

48 
	#X_NOT_POSIX


	)

54 #ifde‡
__sun


58 #i‡
	`deföed
(
__SVR4
Ë&& !deföed(
SVR4
)

59 
	#SVR4
 1

	)

61 #ifde‡
SVR4


63 
	#X_POSIX_C_SOURCE
 199300L

	)

67 #ifde‡
WIN32


68 #i‚de‡
_POSIX_


69 
	#X_NOT_POSIX


	)

74 #ifde‡
__APPLE__


75 
	#NULL_NOT_ZERO


	)

82 #i‡
	`deföed
(
_XOPEN_SOURCE
Ë|| deföed(
_POSIX_SOURCE
Ë|| deföed(
_POSIX_C_SOURCE
)

83 #i‚de‡
_DARWIN_C_SOURCE


84 
	#_DARWIN_C_SOURCE


	)

90 #ifde‡
__GNU__


91 #i‚de‡
PATH_MAX


92 
	#PATH_MAX
 4096

	)

94 #i‚de‡
MAXPATHLEN


95 
	#MAXPATHLEN
 4096

	)

99 #i‡
	`deföed
(
__SCO__
Ë|| deföed(
__UNIXWARE__
)

100 #i‚de‡
PATH_MAX


101 
	#PATH_MAX
 1024

	)

103 #i‚de‡
MAXPATHLEN


104 
	#MAXPATHLEN
 1024

	)

108 #i‡
	`deföed
(
__O≥nBSD__
Ë|| deföed(
__NëBSD__
Ë|| deföed(
__FªeBSD__
) \

109 || 
	`deföed
(
__APPLE__
Ë|| 
	$deföed
(
__Døg⁄Fly__
)

110 #i‚de‡
CSRG_BASED


111 
	#CSRG_BASED


	)

	@/usr/include/X11/Xw32defs.h

1 #i‚de‡
_XW32DEFS_H


2 
	#_XW32DEFS_H


	)

4 #ifde‡
__GNUC__


5 #i‡!
deföed
(
__daddr_t_deföed
)

6 *
	tˇddr_t
;

8 
	#l°©
 
°©


	)

11 *
	tˇddr_t
;

13 
	#ac˚ss
 
_ac˚ss


	)

14 
	#Æloˇ
 
_Æloˇ


	)

15 
	#chdú
 
_chdú


	)

16 
	#chmod
 
_chmod


	)

17 
	#˛o£
 
_˛o£


	)

18 
	#¸ót
 
_¸ót


	)

19 
	#dup
 
_dup


	)

20 
	#dup2
 
_dup2


	)

21 
	#ívú⁄
 
_ívú⁄


	)

22 
	#exe˛
 
_exe˛


	)

23 
	#exe˛e
 
_exe˛e


	)

24 
	#exe˛p
 
_exe˛p


	)

25 
	#exe˛≥
 
_exe˛≥


	)

26 
	#execv
 
_execv


	)

27 
	#execve
 
_execve


	)

28 
	#execvp
 
_execvp


	)

29 
	#execv≥
 
_execv≥


	)

30 
	#fd›í
 
_fd›í


	)

31 
	#fûío
 
_fûío


	)

32 
	#f°©
 
_f°©


	)

33 
	#gëcwd
 
_gëcwd


	)

34 
	#gëpid
 
_gëpid


	)

35 
	#hypŸ
 
_hypŸ


	)

36 
	#ißscii
 
__ißscii


	)

37 
	#ißây
 
_ißây


	)

38 
	#l£ek
 
_l£ek


	)

39 
	#mkdú
 
_mkdú


	)

40 
	#mkãmp
 
_mkãmp


	)

41 
	#›í
 
_›í


	)

42 
	#puãnv
 
_puãnv


	)

43 
	#ªad
 
_ªad


	)

44 
	#rmdú
 
_rmdú


	)

45 
	#¶ìp
(
x
Ë
	`SÀï
((xË* 1000)

	)

46 
	#°©
 
_°©


	)

47 
	#sys_îæi°
 
_sys_îæi°


	)

48 
	#sys_√º
 
_sys_√º


	)

49 
	#umask
 
_umask


	)

50 
	#u∆ök
 
_u∆ök


	)

51 
	#wrôe
 
_wrôe


	)

52 
	#øndom
 
ønd


	)

53 
	#§™dom
 
§™d


	)

55 
	#O_RDONLY
 
_O_RDONLY


	)

56 
	#O_WRONLY
 
_O_WRONLY


	)

57 
	#O_RDWR
 
_O_RDWR


	)

58 
	#O_APPEND
 
_O_APPEND


	)

59 
	#O_CREAT
 
_O_CREAT


	)

60 
	#O_TRUNC
 
_O_TRUNC


	)

61 
	#O_EXCL
 
_O_EXCL


	)

62 
	#O_TEXT
 
_O_TEXT


	)

63 
	#O_BINARY
 
_O_BINARY


	)

64 
	#O_RAW
 
_O_BINARY


	)

66 
	#S_IFMT
 
_S_IFMT


	)

67 
	#S_IFDIR
 
_S_IFDIR


	)

68 
	#S_IFCHR
 
_S_IFCHR


	)

69 
	#S_IFREG
 
_S_IFREG


	)

70 
	#S_IREAD
 
_S_IREAD


	)

71 
	#S_IWRITE
 
_S_IWRITE


	)

72 
	#S_IEXEC
 
_S_IEXEC


	)

74 
	#F_OK
 0

	)

75 
	#X_OK
 1

	)

76 
	#W_OK
 2

	)

77 
	#R_OK
 4

	)

	@/usr/include/X11/extensions/shapeconst.h

27 #i‚de‡
_SHAPECONST_H_


28 
	#_SHAPECONST_H_


	)

35 
	#SHAPENAME
 "SHAPE"

	)

37 
	#SHAPE_MAJOR_VERSION
 1

	)

38 
	#SHAPE_MINOR_VERSION
 1

	)

40 
	#Sh≠eSë
 0

	)

41 
	#Sh≠eUni⁄
 1

	)

42 
	#Sh≠eI¡î£˘
 2

	)

43 
	#Sh≠eSubåa˘
 3

	)

44 
	#Sh≠eInvît
 4

	)

46 
	#Sh≠eBoundög
 0

	)

47 
	#Sh≠eClù
 1

	)

48 
	#Sh≠eI≈ut
 2

	)

50 
	#Sh≠eNŸifyMask
 (1L << 0)

	)

51 
	#Sh≠eNŸify
 0

	)

53 
	#Sh≠eNumbîEvíts
 (
Sh≠eNŸify
 + 1)

	)

	@/usr/include/X11/keysym.h

49 
	#XK_MISCELLANY


	)

50 
	#XK_XKB_KEYS


	)

51 
	#XK_LATIN1


	)

52 
	#XK_LATIN2


	)

53 
	#XK_LATIN3


	)

54 
	#XK_LATIN4


	)

55 
	#XK_LATIN8


	)

56 
	#XK_LATIN9


	)

57 
	#XK_CAUCASUS


	)

58 
	#XK_GREEK


	)

59 
	#XK_KATAKANA


	)

60 
	#XK_ARABIC


	)

61 
	#XK_CYRILLIC


	)

62 
	#XK_HEBREW


	)

63 
	#XK_THAI


	)

64 
	#XK_KOREAN


	)

65 
	#XK_ARMENIAN


	)

66 
	#XK_GEORGIAN


	)

67 
	#XK_VIETNAMESE


	)

68 
	#XK_CURRENCY


	)

69 
	#XK_MATHEMATICAL


	)

70 
	#XK_BRAILLE


	)

71 
	#XK_SINHALA


	)

73 
	~<X11/keysymdef.h
>

	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

39 #ifde‡
__O_TMPFILE


40 
	#__OPEN_NEEDS_MODE
(
oÊag
) \

41 (((
oÊag
Ë& 
O_CREAT
Ë!0 || ((oÊagË& 
__O_TMPFILE
Ë=__O_TMPFILE)

	)

43 
	#__OPEN_NEEDS_MODE
(
oÊag
Ë(((oÊagË& 
O_CREAT
Ë!0)

	)

49 #i‚de‡
__mode_t_deföed


50 
__mode_t
 
	tmode_t
;

51 
	#__mode_t_deföed


	)

54 #i‚de‡
__off_t_deföed


55 #i‚de‡
__USE_FILE_OFFSET64


56 
__off_t
 
	toff_t
;

58 
__off64_t
 
	toff_t
;

60 
	#__off_t_deföed


	)

63 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


64 
__off64_t
 
	toff64_t
;

65 
	#__off64_t_deföed


	)

68 #i‚de‡
__pid_t_deföed


69 
__pid_t
 
	tpid_t
;

70 
	#__pid_t_deföed


	)

74 #ifde‡
__USE_XOPEN2K8


75 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 
	~<bôs/°©.h
>

80 
	#S_IFMT
 
__S_IFMT


	)

81 
	#S_IFDIR
 
__S_IFDIR


	)

82 
	#S_IFCHR
 
__S_IFCHR


	)

83 
	#S_IFBLK
 
__S_IFBLK


	)

84 
	#S_IFREG
 
__S_IFREG


	)

85 #ifde‡
__S_IFIFO


86 
	#S_IFIFO
 
__S_IFIFO


	)

88 #ifde‡
__S_IFLNK


89 
	#S_IFLNK
 
__S_IFLNK


	)

91 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


92 
	#S_IFSOCK
 
__S_IFSOCK


	)

97 
	#S_ISUID
 
__S_ISUID


	)

98 
	#S_ISGID
 
__S_ISGID


	)

100 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


102 
	#S_ISVTX
 
__S_ISVTX


	)

105 
	#S_IRUSR
 
__S_IREAD


	)

106 
	#S_IWUSR
 
__S_IWRITE


	)

107 
	#S_IXUSR
 
__S_IEXEC


	)

109 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

111 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

112 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

113 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

115 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

117 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

118 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

119 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

121 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

124 #ifdef 
__USE_MISC


125 #i‚de‡
R_OK


128 
	#R_OK
 4

	)

129 
	#W_OK
 2

	)

130 
	#X_OK
 1

	)

131 
	#F_OK
 0

	)

136 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


137 
	#SEEK_SET
 0

	)

138 
	#SEEK_CUR
 1

	)

139 
	#SEEK_END
 2

	)

147 #i‚de‡
__USE_TIME_BITS64


148 #i‚de‡
__USE_FILE_OFFSET64


149 
f˙é
 (
__fd
, 
__cmd
, ...);

151 #ifde‡
__REDIRECT


152 
__REDIRECT
 (
f˙é
, (
__fd
, 
__cmd
, ...), 
f˙é64
);

154 
	#f˙é
 
f˙é64


	)

157 #ifde‡
__USE_LARGEFILE64


158 
f˙é64
 (
__fd
, 
__cmd
, ...);

161 #ifde‡
__REDIRECT


162 
__REDIRECT_NTH
 (
f˙é
, (
__fd
, 
__ªque°
, ...),

163 
__f˙é_time64
);

164 
__REDIRECT_NTH
 (
f˙é64
, (
__fd
, 
__ªque°
, ...),

165 
__f˙é_time64
);

167 
	$__f˙é_time64
 (
__fd
, 
__ªque°
, ...Ë
__THROW
;

168 
	#f˙é64
 
__f˙é_time64


	)

169 
	#f˙é
 
__f˙é_time64


	)

180 #i‚de‡
__USE_FILE_OFFSET64


181 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

183 #ifde‡
__REDIRECT


184 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

185 
	`__n⁄nuŒ
 ((1));

187 
	#›í
 
›í64


	)

190 #ifde‡
__USE_LARGEFILE64


191 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

194 #ifde‡
__USE_ATFILE


204 #i‚de‡
__USE_FILE_OFFSET64


205 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

206 
	`__n⁄nuŒ
 ((2));

208 #ifde‡
__REDIRECT


209 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

210 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

212 
	#›í©
 
›í©64


	)

215 #ifde‡
__USE_LARGEFILE64


216 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

217 
	`__n⁄nuŒ
 ((2));

226 #i‚de‡
__USE_FILE_OFFSET64


227 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

229 #ifde‡
__REDIRECT


230 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

231 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

233 
	#¸ót
 
¸ót64


	)

236 #ifde‡
__USE_LARGEFILE64


237 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

240 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

241 && !
deföed
 
__USE_POSIX
))

250 
	#F_ULOCK
 0

	)

251 
	#F_LOCK
 1

	)

252 
	#F_TLOCK
 2

	)

253 
	#F_TEST
 3

	)

255 #i‚de‡
__USE_FILE_OFFSET64


256 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

258 #ifde‡
__REDIRECT


259 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

261 
	#lockf
 
lockf64


	)

264 #ifde‡
__USE_LARGEFILE64


265 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

269 #ifde‡
__USE_XOPEN2K


272 #i‚de‡
__USE_FILE_OFFSET64


273 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

274 
__advi£
Ë
__THROW
;

276 #ifde‡
__REDIRECT_NTH


277 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

278 
__off64_t
 
__Àn
, 
__advi£
),

279 
posix_Ádvi£64
);

281 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

284 #ifde‡
__USE_LARGEFILE64


285 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

286 
__advi£
Ë
__THROW
;

294 #i‚de‡
__USE_FILE_OFFSET64


295 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

297 #ifde‡
__REDIRECT


298 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

299 
__off64_t
 
__Àn
),

300 
posix_ÁŒoˇã64
);

302 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

305 #ifde‡
__USE_LARGEFILE64


306 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

312 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

313 && 
deföed
 
__va_¨g_∑ck_Àn


314 
	~<bôs/f˙é2.h
>

317 
__END_DECLS


	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

126 #unde‡
__USE_ISOC11


127 #unde‡
__USE_ISOC99


128 #unde‡
__USE_ISOC95


129 #unde‡
__USE_ISOCXX11


130 #unde‡
__USE_POSIX


131 #unde‡
__USE_POSIX2


132 #unde‡
__USE_POSIX199309


133 #unde‡
__USE_POSIX199506


134 #unde‡
__USE_XOPEN


135 #unde‡
__USE_XOPEN_EXTENDED


136 #unde‡
__USE_UNIX98


137 #unde‡
__USE_XOPEN2K


138 #unde‡
__USE_XOPEN2KXSI


139 #unde‡
__USE_XOPEN2K8


140 #unde‡
__USE_XOPEN2K8XSI


141 #unde‡
__USE_LARGEFILE


142 #unde‡
__USE_LARGEFILE64


143 #unde‡
__USE_FILE_OFFSET64


144 #unde‡
__USE_MISC


145 #unde‡
__USE_ATFILE


146 #unde‡
__USE_DYNAMIC_STACK_SIZE


147 #unde‡
__USE_GNU


148 #unde‡
__USE_FORTIFY_LEVEL


149 #unde‡
__KERNEL_STRICT_NAMES


150 #unde‡
__GLIBC_USE_ISOC2X


151 #unde‡
__GLIBC_USE_DEPRECATED_GETS


152 #unde‡
__GLIBC_USE_DEPRECATED_SCANF


156 #i‚de‡
_LOOSE_KERNEL_NAMES


157 
	#__KERNEL_STRICT_NAMES


	)

167 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


168 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

169 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

171 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

178 #i‡
deföed
 
__˛™g_maj‹__
 && deföed 
__˛™g_mö‹__


179 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
) \

180 ((
__˛™g_maj‹__
 << 16Ë+ 
__˛™g_mö‹__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

182 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
Ë0

	)

186 
	#__GLIBC_USE
(
F
Ë
__GLIBC_USE_
 ## 
	)
F

192 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

193 && !
deföed
 
	g_DEFAULT_SOURCE


195 #unde‡
_DEFAULT_SOURCE


196 
	#_DEFAULT_SOURCE
 1

	)

200 #ifde‡
_GNU_SOURCE


201 #unde‡
_ISOC95_SOURCE


202 
	#_ISOC95_SOURCE
 1

	)

203 #unde‡
_ISOC99_SOURCE


204 
	#_ISOC99_SOURCE
 1

	)

205 #unde‡
_ISOC11_SOURCE


206 
	#_ISOC11_SOURCE
 1

	)

207 #unde‡
_ISOC2X_SOURCE


208 
	#_ISOC2X_SOURCE
 1

	)

209 #unde‡
_POSIX_SOURCE


210 
	#_POSIX_SOURCE
 1

	)

211 #unde‡
_POSIX_C_SOURCE


212 
	#_POSIX_C_SOURCE
 200809L

	)

213 #unde‡
_XOPEN_SOURCE


214 
	#_XOPEN_SOURCE
 700

	)

215 #unde‡
_XOPEN_SOURCE_EXTENDED


216 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

217 #unde‡
_LARGEFILE64_SOURCE


218 
	#_LARGEFILE64_SOURCE
 1

	)

219 #unde‡
_DEFAULT_SOURCE


220 
	#_DEFAULT_SOURCE
 1

	)

221 #unde‡
_ATFILE_SOURCE


222 
	#_ATFILE_SOURCE
 1

	)

223 #unde‡
_DYNAMIC_STACK_SIZE_SOURCE


224 
	#_DYNAMIC_STACK_SIZE_SOURCE
 1

	)

229 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

230 || (!
deföed
 
	g__STRICT_ANSI__
 \

231 && !
deföed
 
	g_ISOC99_SOURCE
 && !deföed 
	g_ISOC11_SOURCE
 \

232 && !
deföed
 
	g_ISOC2X_SOURCE
 \

233 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

234 && !
deföed
 
	g_XOPEN_SOURCE
))

235 #unde‡
_DEFAULT_SOURCE


236 
	#_DEFAULT_SOURCE
 1

	)

240 #i‡(
deföed
 
_ISOC2X_SOURCE
 \

241 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ > 201710L))

242 
	#__GLIBC_USE_ISOC2X
 1

	)

244 
	#__GLIBC_USE_ISOC2X
 0

	)

248 #i‡(
deföed
 
_ISOC11_SOURCE
 || deföed 
_ISOC2X_SOURCE
 \

249 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

250 
	#__USE_ISOC11
 1

	)

254 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

255 || 
deföed
 
_ISOC2X_SOURCE
 \

256 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

257 
	#__USE_ISOC99
 1

	)

261 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

262 || 
deföed
 
_ISOC2X_SOURCE
 \

263 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

264 
	#__USE_ISOC95
 1

	)

267 #ifde‡
__˝lu•lus


269 #i‡
__˝lu•lus
 >= 201703L

270 
	#__USE_ISOC11
 1

	)

274 #i‡
__˝lu•lus
 >201103L || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__


275 
	#__USE_ISOCXX11
 1

	)

276 
	#__USE_ISOC99
 1

	)

283 #ifde‡
_DEFAULT_SOURCE


284 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


285 
	#__USE_POSIX_IMPLICITLY
 1

	)

287 #unde‡
_POSIX_SOURCE


288 
	#_POSIX_SOURCE
 1

	)

289 #unde‡
_POSIX_C_SOURCE


290 
	#_POSIX_C_SOURCE
 200809L

	)

293 #i‡((!
deföed
 
__STRICT_ANSI__
 \

294 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

295 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

296 
	#_POSIX_SOURCE
 1

	)

297 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

298 
	#_POSIX_C_SOURCE
 2

	)

299 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

300 
	#_POSIX_C_SOURCE
 199506L

	)

301 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

302 
	#_POSIX_C_SOURCE
 200112L

	)

304 
	#_POSIX_C_SOURCE
 200809L

	)

306 
	#__USE_POSIX_IMPLICITLY
 1

	)

315 #i‡((!
deföed
 
_POSIX_C_SOURCE
 || (_POSIX_C_SOURCE - 0) < 199506L) \

316 && (
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE
))

317 
	#_POSIX_SOURCE
 1

	)

318 #unde‡
_POSIX_C_SOURCE


319 
	#_POSIX_C_SOURCE
 199506L

	)

322 #i‡(
deföed
 
_POSIX_SOURCE
 \

323 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

324 || 
deföed
 
_XOPEN_SOURCE
)

325 
	#__USE_POSIX
 1

	)

328 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


329 
	#__USE_POSIX2
 1

	)

332 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

333 
	#__USE_POSIX199309
 1

	)

336 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

337 
	#__USE_POSIX199506
 1

	)

340 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

341 
	#__USE_XOPEN2K
 1

	)

342 #unde‡
__USE_ISOC95


343 
	#__USE_ISOC95
 1

	)

344 #unde‡
__USE_ISOC99


345 
	#__USE_ISOC99
 1

	)

348 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

349 
	#__USE_XOPEN2K8
 1

	)

350 #unde‡
_ATFILE_SOURCE


351 
	#_ATFILE_SOURCE
 1

	)

354 #ifdef 
_XOPEN_SOURCE


355 
	#__USE_XOPEN
 1

	)

356 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

357 
	#__USE_XOPEN_EXTENDED
 1

	)

358 
	#__USE_UNIX98
 1

	)

359 #unde‡
_LARGEFILE_SOURCE


360 
	#_LARGEFILE_SOURCE
 1

	)

361 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

362 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

363 
	#__USE_XOPEN2K8
 1

	)

364 
	#__USE_XOPEN2K8XSI
 1

	)

366 
	#__USE_XOPEN2K
 1

	)

367 
	#__USE_XOPEN2KXSI
 1

	)

368 #unde‡
__USE_ISOC95


369 
	#__USE_ISOC95
 1

	)

370 #unde‡
__USE_ISOC99


371 
	#__USE_ISOC99
 1

	)

374 #ifde‡
_XOPEN_SOURCE_EXTENDED


375 
	#__USE_XOPEN_EXTENDED
 1

	)

380 #ifde‡
_LARGEFILE_SOURCE


381 
	#__USE_LARGEFILE
 1

	)

384 #ifde‡
_LARGEFILE64_SOURCE


385 
	#__USE_LARGEFILE64
 1

	)

388 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

389 
	#__USE_FILE_OFFSET64
 1

	)

392 
	~<„©uªs-time64.h
>

394 #i‡
deföed
 
_DEFAULT_SOURCE


395 
	#__USE_MISC
 1

	)

398 #ifdef 
_ATFILE_SOURCE


399 
	#__USE_ATFILE
 1

	)

402 #ifdef 
_DYNAMIC_STACK_SIZE_SOURCE


403 
	#__USE_DYNAMIC_STACK_SIZE
 1

	)

406 #ifdef 
_GNU_SOURCE


407 
	#__USE_GNU
 1

	)

410 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0

411 #i‡!
deföed
 
__OPTIMIZE__
 || __OPTIMIZE__ <= 0

412 #ñi‡!
__GNUC_PREREQ
 (4, 1)

413 #ñi‡
_FORTIFY_SOURCE
 > 2 && 
__glibc_˛™g_¥îeq
 (9, 0)

414 #i‡
_FORTIFY_SOURCE
 > 3

416 
	#__USE_FORTIFY_LEVEL
 3

	)

417 #ñi‡
_FORTIFY_SOURCE
 > 1

418 #i‡
_FORTIFY_SOURCE
 > 2

420 
	#__USE_FORTIFY_LEVEL
 2

	)

422 
	#__USE_FORTIFY_LEVEL
 1

	)

425 #i‚de‡
__USE_FORTIFY_LEVEL


426 
	#__USE_FORTIFY_LEVEL
 0

	)

433 #i‡
deföed
 
__˝lu•lus
 ? __˝lu•lu†>201402L : deföed 
__USE_ISOC11


434 
	#__GLIBC_USE_DEPRECATED_GETS
 0

	)

436 
	#__GLIBC_USE_DEPRECATED_GETS
 1

	)

451 #i‡(
deföed
 
__USE_GNU
 \

452 && (
deföed
 
	g__˝lu•lus
 \

453 ? (
	g__˝lu•lus
 < 201103L && !
deföed
 
	g__GXX_EXPERIMENTAL_CXX0X__
) \

454 : (!
deföed
 
__STDC_VERSION__
 || __STDC_VERSION__ < 199901L)))

455 
	#__GLIBC_USE_DEPRECATED_SCANF
 1

	)

457 
	#__GLIBC_USE_DEPRECATED_SCANF
 0

	)

462 
	~<°dc-¥edef.h
>

470 #unde‡
__GNU_LIBRARY__


471 
	#__GNU_LIBRARY__
 6

	)

475 
	#__GLIBC__
 2

	)

476 
	#__GLIBC_MINOR__
 34

	)

478 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

479 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

482 #i‚de‡
__ASSEMBLER__


483 #i‚de‡
_SYS_CDEFS_H


484 
	~<sys/cdefs.h
>

489 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


490 
	#__USE_LARGEFILE
 1

	)

491 
	#__USE_LARGEFILE64
 1

	)

497 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

498 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

499 && 
deföed
 
	g__exã∫_ölöe


500 
	#__USE_EXTERN_INLINES
 1

	)

508 
	~<gnu/°ubs.h
>

	@/usr/include/malloc.h

19 #i‚de‡
_MALLOC_H


20 
	#_MALLOC_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<°ddef.h
>

24 
	~<°dio.h
>

26 #ifde‡
_LIBC


27 
	#__MALLOC_HOOK_VOLATILE


	)

28 
	#__MALLOC_DEPRECATED


	)

30 
	#__MALLOC_HOOK_VOLATILE
 vﬁ©ûe

	)

31 
	#__MALLOC_DEPRECATED
 
__©åibuã_dïªˇãd__


	)

35 
__BEGIN_DECLS


38 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__


39 
	`__©åibuã_Æloc_size__
 ((1)Ë
__wur
;

42 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

43 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((1, 2)Ë
__wur
;

50 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

51 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
 
	`__©åibuã_Æloc_size__
 ((2));

58 *
	$ªÆloˇºay
 (*
__±r
, 
size_t
 
__nmemb
, size_à
__size
)

59 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
 
	`__©åibuã_Æloc_size__
 ((2, 3))

60 
__©å_dóŒoc_‰ì
;

63 
	$‰ì
 (*
__±r
Ë
__THROW
;

66 *
	$memÆign
 (
size_t
 
__Æignmít
, size_à
__size
)

67 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur


68 
__©å_dóŒoc_‰ì
;

71 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__


72 
	`__©åibuã_Æloc_size__
 ((1)Ë
__wur
 
__©å_dóŒoc_‰ì
;

76 *
	$pvÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__


77 
__wur
 
__©å_dóŒoc_‰ì
;

81 
	smÆlöfo


83 
¨ía
;

84 
‹dblks
;

85 
smblks
;

86 
hblks
;

87 
hblkhd
;

88 
usmblks
;

89 
fsmblks
;

90 
u‹dblks
;

91 
f‹dblks
;

92 
kìpco°
;

98 
	smÆlöfo2


100 
size_t
 
¨ía
;

101 
size_t
 
‹dblks
;

102 
size_t
 
smblks
;

103 
size_t
 
hblks
;

104 
size_t
 
hblkhd
;

105 
size_t
 
usmblks
;

106 
size_t
 
fsmblks
;

107 
size_t
 
u‹dblks
;

108 
size_t
 
f‹dblks
;

109 
size_t
 
kìpco°
;

113 
mÆlöfo
 
	$mÆlöfo
 (Ë
__THROW
 
__MALLOC_DEPRECATED
;

116 
mÆlöfo2
 
	$mÆlöfo2
 (Ë
__THROW
;

119 #i‚de‡
M_MXFAST


120 
	#M_MXFAST
 1

	)

122 #i‚de‡
M_NLBLKS


123 
	#M_NLBLKS
 2

	)

125 #i‚de‡
M_GRAIN


126 
	#M_GRAIN
 3

	)

128 #i‚de‡
M_KEEP


129 
	#M_KEEP
 4

	)

133 
	#M_TRIM_THRESHOLD
 -1

	)

134 
	#M_TOP_PAD
 -2

	)

135 
	#M_MMAP_THRESHOLD
 -3

	)

136 
	#M_MMAP_MAX
 -4

	)

137 
	#M_CHECK_ACTION
 -5

	)

138 
	#M_PERTURB
 -6

	)

139 
	#M_ARENA_TEST
 -7

	)

140 
	#M_ARENA_MAX
 -8

	)

143 
	$mÆl›t
 (
__∑øm
, 
__vÆ
Ë
__THROW
;

147 
	$mÆloc_åim
 (
size_t
 
__∑d
Ë
__THROW
;

151 
size_t
 
	$mÆloc_ußbÀ_size
 (*
__±r
Ë
__THROW
;

154 
	$mÆloc_°©s
 (Ë
__THROW
;

157 
	$mÆloc_öfo
 (
__›ti⁄s
, 
FILE
 *
__Â
Ë
__THROW
;

159 
__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/wch¨.h
>

29 
	~<bôs/w‹dsize.h
>

34 
	~<bôs/°döt-öä.h
>

37 
	~<bôs/°döt-uöä.h
>

43 
__öt_Àa°8_t
 
	töt_Àa°8_t
;

44 
__öt_Àa°16_t
 
	töt_Àa°16_t
;

45 
__öt_Àa°32_t
 
	töt_Àa°32_t
;

46 
__öt_Àa°64_t
 
	töt_Àa°64_t
;

49 
__uöt_Àa°8_t
 
	tuöt_Àa°8_t
;

50 
__uöt_Àa°16_t
 
	tuöt_Àa°16_t
;

51 
__uöt_Àa°32_t
 
	tuöt_Àa°32_t
;

52 
__uöt_Àa°64_t
 
	tuöt_Àa°64_t
;

58 sig√d 
	töt_Á°8_t
;

59 #i‡
__WORDSIZE
 == 64

60 
	töt_Á°16_t
;

61 
	töt_Á°32_t
;

62 
	töt_Á°64_t
;

64 
	töt_Á°16_t
;

65 
	töt_Á°32_t
;

66 
__exãnsi⁄__


67 
	töt_Á°64_t
;

71 
	tuöt_Á°8_t
;

72 #i‡
__WORDSIZE
 == 64

73 
	tuöt_Á°16_t
;

74 
	tuöt_Á°32_t
;

75 
	tuöt_Á°64_t
;

77 
	tuöt_Á°16_t
;

78 
	tuöt_Á°32_t
;

79 
__exãnsi⁄__


80 
	tuöt_Á°64_t
;

85 #i‡
__WORDSIZE
 == 64

86 #i‚de‡
__öçå_t_deföed


87 
	töçå_t
;

88 
	#__öçå_t_deföed


	)

90 
	tuöçå_t
;

92 #i‚de‡
__öçå_t_deföed


93 
	töçå_t
;

94 
	#__öçå_t_deföed


	)

96 
	tuöçå_t
;

101 
__ötmax_t
 
	tötmax_t
;

102 
__uötmax_t
 
	tuötmax_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	#__INT64_C
(
c
Ë¯## 
L


	)

107 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

109 
	#__INT64_C
(
c
Ë¯## 
LL


	)

110 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

116 
	#INT8_MIN
 (-128)

	)

117 
	#INT16_MIN
 (-32767-1)

	)

118 
	#INT32_MIN
 (-2147483647-1)

	)

119 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

121 
	#INT8_MAX
 (127)

	)

122 
	#INT16_MAX
 (32767)

	)

123 
	#INT32_MAX
 (2147483647)

	)

124 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

127 
	#UINT8_MAX
 (255)

	)

128 
	#UINT16_MAX
 (65535)

	)

129 
	#UINT32_MAX
 (4294967295U)

	)

130 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

134 
	#INT_LEAST8_MIN
 (-128)

	)

135 
	#INT_LEAST16_MIN
 (-32767-1)

	)

136 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

137 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

139 
	#INT_LEAST8_MAX
 (127)

	)

140 
	#INT_LEAST16_MAX
 (32767)

	)

141 
	#INT_LEAST32_MAX
 (2147483647)

	)

142 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

145 
	#UINT_LEAST8_MAX
 (255)

	)

146 
	#UINT_LEAST16_MAX
 (65535)

	)

147 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

148 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

152 
	#INT_FAST8_MIN
 (-128)

	)

153 #i‡
__WORDSIZE
 == 64

154 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

155 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

157 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

158 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

160 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

162 
	#INT_FAST8_MAX
 (127)

	)

163 #i‡
__WORDSIZE
 == 64

164 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

165 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

167 
	#INT_FAST16_MAX
 (2147483647)

	)

168 
	#INT_FAST32_MAX
 (2147483647)

	)

170 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

173 
	#UINT_FAST8_MAX
 (255)

	)

174 #i‡
__WORDSIZE
 == 64

175 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

176 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

178 
	#UINT_FAST16_MAX
 (4294967295U)

	)

179 
	#UINT_FAST32_MAX
 (4294967295U)

	)

181 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

185 #i‡
__WORDSIZE
 == 64

186 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

187 
	#INTPTR_MAX
 (9223372036854775807L)

	)

188 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

190 
	#INTPTR_MIN
 (-2147483647-1)

	)

191 
	#INTPTR_MAX
 (2147483647)

	)

192 
	#UINTPTR_MAX
 (4294967295U)

	)

197 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

199 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

202 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

208 #i‡
__WORDSIZE
 == 64

209 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

210 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

212 #i‡
__WORDSIZE32_PTRDIFF_LONG


213 
	#PTRDIFF_MIN
 (-2147483647L-1)

	)

214 
	#PTRDIFF_MAX
 (2147483647L)

	)

216 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

217 
	#PTRDIFF_MAX
 (2147483647)

	)

222 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

223 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

226 #i‡
__WORDSIZE
 == 64

227 
	#SIZE_MAX
 (18446744073709551615UL)

	)

229 #i‡
__WORDSIZE32_SIZE_ULONG


230 
	#SIZE_MAX
 (4294967295UL)

	)

232 
	#SIZE_MAX
 (4294967295U)

	)

237 #i‚de‡
WCHAR_MIN


239 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

240 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

244 
	#WINT_MIN
 (0u)

	)

245 
	#WINT_MAX
 (4294967295u)

	)

248 
	#INT8_C
(
c
Ë
	)
c

249 
	#INT16_C
(
c
Ë
	)
c

250 
	#INT32_C
(
c
Ë
	)
c

251 #i‡
__WORDSIZE
 == 64

252 
	#INT64_C
(
c
Ë¯## 
L


	)

254 
	#INT64_C
(
c
Ë¯## 
LL


	)

258 
	#UINT8_C
(
c
Ë
	)
c

259 
	#UINT16_C
(
c
Ë
	)
c

260 
	#UINT32_C
(
c
Ë¯## 
U


	)

261 #i‡
__WORDSIZE
 == 64

262 
	#UINT64_C
(
c
Ë¯## 
UL


	)

264 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

268 #i‡
__WORDSIZE
 == 64

269 
	#INTMAX_C
(
c
Ë¯## 
L


	)

270 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

272 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

273 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

276 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

278 
	#INT8_WIDTH
 8

	)

279 
	#UINT8_WIDTH
 8

	)

280 
	#INT16_WIDTH
 16

	)

281 
	#UINT16_WIDTH
 16

	)

282 
	#INT32_WIDTH
 32

	)

283 
	#UINT32_WIDTH
 32

	)

284 
	#INT64_WIDTH
 64

	)

285 
	#UINT64_WIDTH
 64

	)

287 
	#INT_LEAST8_WIDTH
 8

	)

288 
	#UINT_LEAST8_WIDTH
 8

	)

289 
	#INT_LEAST16_WIDTH
 16

	)

290 
	#UINT_LEAST16_WIDTH
 16

	)

291 
	#INT_LEAST32_WIDTH
 32

	)

292 
	#UINT_LEAST32_WIDTH
 32

	)

293 
	#INT_LEAST64_WIDTH
 64

	)

294 
	#UINT_LEAST64_WIDTH
 64

	)

296 
	#INT_FAST8_WIDTH
 8

	)

297 
	#UINT_FAST8_WIDTH
 8

	)

298 
	#INT_FAST16_WIDTH
 
__WORDSIZE


	)

299 
	#UINT_FAST16_WIDTH
 
__WORDSIZE


	)

300 
	#INT_FAST32_WIDTH
 
__WORDSIZE


	)

301 
	#UINT_FAST32_WIDTH
 
__WORDSIZE


	)

302 
	#INT_FAST64_WIDTH
 64

	)

303 
	#UINT_FAST64_WIDTH
 64

	)

305 
	#INTPTR_WIDTH
 
__WORDSIZE


	)

306 
	#UINTPTR_WIDTH
 
__WORDSIZE


	)

308 
	#INTMAX_WIDTH
 64

	)

309 
	#UINTMAX_WIDTH
 64

	)

311 
	#PTRDIFF_WIDTH
 
__WORDSIZE


	)

312 
	#SIG_ATOMIC_WIDTH
 32

	)

313 
	#SIZE_WIDTH
 
__WORDSIZE


	)

314 
	#WCHAR_WIDTH
 32

	)

315 
	#WINT_WIDTH
 32

	)

	@/usr/include/strings.h

18 #i‚def 
_STRINGS_H


19 
	#_STRINGS_H
 1

	)

21 
	~<„©uªs.h
>

22 
	#__√ed_size_t


	)

23 
	~<°ddef.h
>

26 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

27 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

30 
	g__BEGIN_DECLS


32 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


34 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

35 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

38 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

39 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

42 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

45 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


48 *
	`ödex
 (*
__s
, 
__c
)

49 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

50 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

51 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

53 #i‡
deföed
 
__OPTIMIZE__


54 
__exã∫_Æways_ölöe
 *

55 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


57  
	`__buûtö_ödex
 (
__s
, 
__c
);

60 
__exã∫_Æways_ölöe
 const *

61 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


63  
	`__buûtö_ödex
 (
__s
, 
__c
);

66 
	}
}

68 *
	$ödex
 (c⁄° *
__s
, 
__c
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

73 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


76 *
	`rödex
 (*
__s
, 
__c
)

77 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

79 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #i‡
deföed
 
__OPTIMIZE__


82 
__exã∫_Æways_ölöe
 *

83 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


85  
	`__buûtö_rödex
 (
__s
, 
__c
);

88 
__exã∫_Æways_ölöe
 const *

89 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


91  
	`__buûtö_rödex
 (
__s
, 
__c
);

94 
	}
}

96 *
	$rödex
 (c⁄° *
__s
, 
__c
)

97 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

101 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8
 || deföed 
__USE_XOPEN2K8XSI


104 
	$ffs
 (
__i
Ë
__THROW
 
__©åibuã_c⁄°__
;

109 #ifdef 
__USE_MISC


110 
	$ff¶
 (
__l
Ë
__THROW
 
__©åibuã_c⁄°__
;

111 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

112 
__THROW
 
__©åibuã_c⁄°__
;

116 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

117 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

120 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

123 #ifdef 
__USE_XOPEN2K8


125 
	~<bôs/ty≥s/loˇÀ_t.h
>

128 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__loc
)

129 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

133 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

134 
size_t
 
__n
, 
loˇÀ_t
 
__loc
)

135 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

138 
__END_DECLS


140 #i‡
	`__GNUC_PREREQ
 (3,4Ë&& 
__USE_FORTIFY_LEVEL
 > 0 \

141 && 
deföed
 
__f‹tify_fun˘i⁄


143 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


144 
	~<bôs/°rögs_f‹tifõd.h
>

	@/usr/include/time.h

22 #i‚def 
_TIME_H


23 
	#_TIME_H
 1

	)

25 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 
	#__√ed_NULL


	)

29 
	~<°ddef.h
>

33 
	~<bôs/time.h
>

37 
	~<bôs/ty≥s/˛ock_t.h
>

38 
	~<bôs/ty≥s/time_t.h
>

39 
	~<bôs/ty≥s/°ru˘_tm.h
>

41 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_ISOC11


42 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

45 #ifde‡
__USE_POSIX199309


46 
	~<bôs/ty≥s/˛ockid_t.h
>

47 
	~<bôs/ty≥s/timî_t.h
>

48 
	~<bôs/ty≥s/°ru˘_ôimî•ec.h
>

49 
	gsigevít
;

52 #ifde‡
__USE_XOPEN2K


53 #i‚de‡
__pid_t_deföed


54 
__pid_t
 
	tpid_t
;

55 
	#__pid_t_deföed


	)

59 #ifde‡
__USE_XOPEN2K8


60 
	~<bôs/ty≥s/loˇÀ_t.h
>

63 #ifde‡
__USE_ISOC11


65 
	#TIME_UTC
 1

	)

68 
__BEGIN_DECLS


72 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

74 #i‚de‡
__USE_TIME_BITS64


76 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

79 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

85 #ifde‡
__REDIRECT_NTH


86 
time_t
 
	`__REDIRECT_NTH
 (
time
, (time_à*
__timî
), 
__time64
);

87 
	`__REDIRECT_NTH
 (
dif·ime
, (
time_t
 
__time1
,Åime_à
__time0
),

88 
__dif·ime64
Ë
	`__©åibuã__
 ((
__c⁄°__
));

89 
time_t
 
	`__REDIRECT_NTH
 (
mktime
, (
tm
 *
__ç
), 
__mktime64
);

91 
	#time
 
__time64


	)

92 
	#dif·ime
 
__dif·ime64


	)

93 
	#mktime
 
__mktime64


	)

100 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

101 c⁄° *
__ª°ri˘
 
__f‹m©
,

102 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

104 #ifde‡
__USE_XOPEN


107 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

108 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

109 
__THROW
;

112 #ifde‡
__USE_XOPEN2K8


116 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

117 c⁄° *
__ª°ri˘
 
__f‹m©
,

118 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

119 
loˇÀ_t
 
__loc
Ë
__THROW
;

122 #ifde‡
__USE_GNU


123 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

124 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

125 
loˇÀ_t
 
__loc
Ë
__THROW
;

129 #i‚de‡
__USE_TIME_BITS64


132 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

136 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

139 #ifde‡
__REDIRECT_NTH


140 
tm
*
	`__REDIRECT_NTH
 (
gmtime
, (c⁄° 
time_t
 *
__timî
), 
__gmtime64
);

141 
tm
 *
	`__REDIRECT_NTH
 (
loˇ…ime
, (c⁄° 
time_t
 *
__timî
),

142 
__loˇ…ime64
);

144 
	#gmtime
 
__gmtime64


	)

145 
	#loˇ…ime
 
__loˇ…ime64


	)

150 #i‡
deföed
 
__USE_POSIX
 || 
	`__GLIBC_USE
 (
ISOC2X
)

151 #i‚de‡
__USE_TIME_BITS64


154 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

155 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

159 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

160 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

162 #ifde‡
__REDIRECT_NTH


163 
tm
*
	`__REDIRECT_NTH
 (
gmtime_r
, (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

164 
tm
 *
__ª°ri˘
 
__ç
),

165 
__gmtime64_r
);

167 
tm
*
	`__REDIRECT_NTH
 (
loˇ…ime_r
, (c⁄° 
time_t
 *
__ª°ri˘
 
__t
,

168 
tm
 *
__ª°ri˘
 
__ç
),

169 
__loˇ…ime64_r
);

171 
	#gmtime_r
 
__gmtime64_r


	)

172 
	#loˇ…ime_r
 
__loˇ…ime_r


	)

179 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

182 #i‚de‡
__USE_TIME_BITS64


183 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

185 #ifde‡
__REDIRECT_NTH


186 *
	`__REDIRECT_NTH
 (
˘ime
, (c⁄° 
time_t
 *
__timî
), 
__˘ime64
);

188 
	#˘ime
 
__˘ime64


	)

192 #ifde‡
__USE_POSIX


197 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

198 *
__ª°ri˘
 
__buf
Ë
__THROW
;

201 #i‚de‡
__USE_TIME_BITS64


202 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

203 *
__ª°ri˘
 
__buf
Ë
__THROW
;

205 #ifde‡
__REDIRECT_NTH


206 *
	`__REDIRECT_NTH
 (
˘ime_r
, (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

207 *
__ª°ri˘
 
__buf
), 
__˘ime64_r
);

209 
	#˘ime_r
 
__˘ime64_r


	)

217 *
__tz«me
[2];

218 
__daylight
;

219 
__timez⁄e
;

222 #ifdef 
__USE_POSIX


224 *
tz«me
[2];

228 
	$tz£t
 (Ë
__THROW
;

231 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


232 
daylight
;

233 
timez⁄e
;

239 
	#__i¶óp
(
yór
) \

240 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

243 #ifde‡
__USE_MISC


247 #i‚de‡
__USE_TIME_BITS64


249 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

251 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

253 #ifde‡
__REDIRECT_NTH


254 
time_t
 
	`__REDIRECT_NTH
 (
timegm
, (
tm
 *
__ç
), 
__timegm64
);

255 
time_t
 
	`__REDIRECT_NTH
 (
timñoˇl
, (
tm
 *
__ç
), 
__mktime64
);

257 
	#timegm
 
__timegm64


	)

262 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

266 #ifde‡
__USE_POSIX199309


267 #i‚de‡
__USE_TIME_BITS64


272 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

273 
time•ec
 *
__ªmaöög
);

276 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

279 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

282 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

283 
__THROW
;

285 #ifde‡
__REDIRECT


286 
	`__REDIRECT
 (
«no¶ìp
, (c⁄° 
time•ec
 *
__ªque°ed_time
,

287 
time•ec
 *
__ªmaöög
),

288 
__«no¶ìp64
);

289 
	`__REDIRECT_NTH
 (
˛ock_gëªs
, (
˛ockid_t
 
__˛ock_id
,

290 
time•ec
 *
__ªs
),

291 
__˛ock_gëªs64
);

292 
	`__REDIRECT_NTH
 (
˛ock_gëtime
, (
˛ockid_t
 
__˛ock_id
, 

293 
time•ec
 *
__ç
), 
__˛ock_gëtime64
);

294 
	`__REDIRECT_NTH
 (
˛ock_£âime
, (
˛ockid_t
 
__˛ock_id
, const 

295 
time•ec
 *
__ç
), 
__˛ock_£âime64
);

297 
	#«no¶ìp
 
__«no¶ìp64


	)

298 
	#˛ock_gëªs
 
__˛ock_gëªs64


	)

299 
	#˛ock_gëtime
 
__˛ock_gëtime64


	)

300 
	#˛ock_£âime
 
__˛ock_£âime64


	)

305 #ifde‡
__USE_XOPEN2K


310 #i‚de‡
__USE_TIME_BITS64


311 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

312 c⁄° 
time•ec
 *
__ªq
,

313 
time•ec
 *
__ªm
);

315 #ifde‡
__REDIRECT


316 
	`__REDIRECT
 (
˛ock_«no¶ìp
, (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

317 c⁄° 
time•ec
 *
__ªq
,

318 
time•ec
 *
__ªm
),

319 
__˛ock_«no¶ìp_time64
);

321 
	#˛ock_«no¶ìp
 
__˛ock_«no¶ìp_time64


	)

326 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

331 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

332 
sigevít
 *
__ª°ri˘
 
__evp
,

333 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

336 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

339 #i‚de‡
__USE_TIME_BITS64


340 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

341 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

342 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

345 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

346 
__THROW
;

348 #ifde‡
__REDIRECT_NTH


349 
	`__REDIRECT_NTH
 (
timî_£âime
, (
timî_t
 
__timîid
, 
__Êags
,

350 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

351 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
),

352 
__timî_£âime64
);

354 
	`__REDIRECT_NTH
 (
timî_gëtime
, (
timî_t
 
__timîid
,

355 
ôimî•ec
 *
__vÆue
),

356 
__timî_gëtime64
);

358 
	#timî_£âime
 
__timî_£âime64


	)

359 
	#timî_gëtime
 
__timî_gëtime64


	)

364 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

368 #ifde‡
__USE_ISOC11


369 #i‚de‡
__USE_TIME_BITS64


371 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

372 
__THROW
 
	`__n⁄nuŒ
 ((1));

374 #ifde‡
__REDIRECT_NTH


375 
	`__REDIRECT_NTH
 (
time•ec_gë
, (
time•ec
 *
__ts
, 
__ba£
),

376 
__time•ec_gë64
Ë
	`__n⁄nuŒ
 ((1));

378 
	#time•ec_gë
 
__time•ec_gë64


	)

384 #i‡
	`__GLIBC_USE
 (
ISOC2X
)

385 #i‚de‡
__USE_TIME_BITS64


387 
	$time•ec_gëªs
 (
time•ec
 *
__ts
, 
__ba£
)

388 
__THROW
;

390 #ifde‡
__REDIRECT_NTH


391 
	`__REDIRECT_NTH
 (
time•ec_gëªs
, (
time•ec
 *
__ts
,

392 
__ba£
),

393 
__time•ec_gëªs64
);

395 
	#time•ec_gëªs
 
__time•ec_gëªs64


	)

401 #ifde‡
__USE_XOPEN_EXTENDED


413 
gëd©e_îr
;

422 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

425 #ifde‡
__USE_GNU


436 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

437 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

440 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

70 
	#_POSIX2_C_VERSION
 
__POSIX2_THIS_VERSION


	)

74 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

78 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

82 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

86 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

89 #ifde‡
__USE_XOPEN2K8


90 
	#_XOPEN_VERSION
 700

	)

91 #ñi‡
deföed
 
__USE_XOPEN2K


92 
	#_XOPEN_VERSION
 600

	)

93 #ñi‡
deföed
 
__USE_UNIX98


94 
	#_XOPEN_VERSION
 500

	)

96 
	#_XOPEN_VERSION
 4

	)

100 
	#_XOPEN_XCU_VERSION
 4

	)

103 
	#_XOPEN_XPG2
 1

	)

104 
	#_XOPEN_XPG3
 1

	)

105 
	#_XOPEN_XPG4
 1

	)

108 
	#_XOPEN_UNIX
 1

	)

112 
	#_XOPEN_ENH_I18N
 1

	)

115 
	#_XOPEN_LEGACY
 1

	)

202 
	~<bôs/posix_›t.h
>

205 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


206 
	~<bôs/ívú⁄míts.h
>

210 
	#STDIN_FILENO
 0

	)

211 
	#STDOUT_FILENO
 1

	)

212 
	#STDERR_FILENO
 2

	)

217 
	~<bôs/ty≥s.h
>

219 #i‚def 
__ssize_t_deföed


220 
__ssize_t
 
	tssize_t
;

221 
	#__ssize_t_deföed


	)

224 
	#__√ed_size_t


	)

225 
	#__√ed_NULL


	)

226 
	~<°ddef.h
>

228 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


231 #i‚de‡
__gid_t_deföed


232 
__gid_t
 
	tgid_t
;

233 
	#__gid_t_deföed


	)

236 #i‚de‡
__uid_t_deföed


237 
__uid_t
 
	tuid_t
;

238 
	#__uid_t_deföed


	)

241 #i‚de‡
__off_t_deföed


242 #i‚de‡
__USE_FILE_OFFSET64


243 
__off_t
 
	toff_t
;

245 
__off64_t
 
	toff_t
;

247 
	#__off_t_deföed


	)

249 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


250 
__off64_t
 
	toff64_t
;

251 
	#__off64_t_deföed


	)

254 #i‚de‡
__u£c⁄ds_t_deföed


255 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

256 
	#__u£c⁄ds_t_deföed


	)

259 #i‚de‡
__pid_t_deföed


260 
__pid_t
 
	tpid_t
;

261 
	#__pid_t_deföed


	)

265 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


266 #i‚de‡
__öçå_t_deföed


267 
__öçå_t
 
	töçå_t
;

268 
	#__öçå_t_deföed


	)

272 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


273 #i‚de‡
__sockÀn_t_deföed


274 
__sockÀn_t
 
	tsockÀn_t
;

275 
	#__sockÀn_t_deföed


	)

281 
	#R_OK
 4

	)

282 
	#W_OK
 2

	)

283 
	#X_OK
 1

	)

284 
	#F_OK
 0

	)

287 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

289 #ifde‡
__USE_GNU


292 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1));

300 
	$execvót
 (
__fd
, c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

301 *c⁄° 
__ívp
[], 
__Êags
)

302 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

305 #ifde‡
__USE_ATFILE


309 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

310 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

315 #i‚def 
_STDIO_H


316 
	#SEEK_SET
 0

	)

317 
	#SEEK_CUR
 1

	)

318 
	#SEEK_END
 2

	)

319 #ifde‡
__USE_GNU


320 
	#SEEK_DATA
 3

	)

321 
	#SEEK_HOLE
 4

	)

325 #i‡
deföed
 
__USE_MISC
 && !deföed 
L_SET


327 
	#L_SET
 
SEEK_SET


	)

328 
	#L_INCR
 
SEEK_CUR


	)

329 
	#L_XTND
 
SEEK_END


	)

338 #i‚de‡
__USE_FILE_OFFSET64


339 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

341 #ifde‡
__REDIRECT_NTH


342 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

343 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

344 
l£ek64
);

346 
	#l£ek
 
l£ek64


	)

349 #ifde‡
__USE_LARGEFILE64


350 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

351 
__THROW
;

358 
	`˛o£
 (
__fd
);

360 #ifde‡
__USE_MISC


363 
	$˛o£‰om
 (
__lowfd
Ë
__THROW
;

371 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur


372 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

378 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur


379 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 2, 3));

381 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


382 #i‚de‡
__USE_FILE_OFFSET64


389 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

390 
__off_t
 
__off£t
Ë
__wur


391 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

398 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

399 
__off_t
 
__off£t
Ë
__wur


400 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 2, 3));

403 #ifde‡
__REDIRECT


404 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

405 
__off64_t
 
__off£t
),

406 
¥ód64
Ë
__wur


407 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

408 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

409 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

410 
pwrôe64
Ë
__wur


411 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 2, 3));

413 
	#¥ód
 
¥ód64


	)

414 
	#pwrôe
 
pwrôe64


	)

418 #ifde‡
__USE_LARGEFILE64


422 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

423 
__off64_t
 
__off£t
Ë
__wur


424 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

427 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

428 
__off64_t
 
__off£t
Ë
__wur


429 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 2, 3));

437 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

439 #ifde‡
__USE_GNU


442 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

452 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

464 
	`¶ìp
 (
__£c⁄ds
);

466 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

467 || 
deföed
 
__USE_MISC


472 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

473 
__THROW
;

480 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

489 
	`∑u£
 ();

493 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

494 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

496 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


498 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

503 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

504 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

508 #ifde‡
__USE_ATFILE


511 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

512 
__gid_t
 
__group
, 
__Êag
)

513 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

517 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

519 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


521 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

531 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

533 #ifdef 
__USE_GNU


537 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

540 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

541 || 
deföed
 
__USE_MISC


545 *
	$gëwd
 (*
__buf
)

546 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur


547 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1));

552 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

555 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

557 #ifde‡
__USE_GNU


560 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

564 **
__ívú⁄
;

565 #ifde‡
__USE_GNU


566 **
ívú⁄
;

572 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

573 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

575 #ifde‡
__USE_XOPEN2K8


578 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

579 
__THROW
 
	`__n⁄nuŒ
 ((2));

584 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

585 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

589 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

590 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

594 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

595 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

599 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

600 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

605 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

606 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

608 #ifde‡
__USE_GNU


611 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

612 *c⁄° 
__ívp
[])

613 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

617 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


619 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

624 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

630 
	~<bôs/c⁄‚ame.h
>

633 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

634 
__THROW
 
	`__n⁄nuŒ
 ((1));

637 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

640 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

642 #ifdef 
__USE_POSIX2


644 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW


645 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

650 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

653 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

656 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

659 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

660 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


661 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

668 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

670 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


682 
	$£çgΩ
 (Ë
__THROW
;

689 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

691 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


693 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

697 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

700 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

703 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

706 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

711 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur


712 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 1));

713 #ifdef 
__USE_GNU


715 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

722 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

724 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


727 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

730 #ifde‡
__USE_XOPEN2K


732 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

739 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

741 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


744 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

747 #ifde‡
__USE_XOPEN2K


749 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

752 #ifde‡
__USE_GNU


755 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

756 
__THROW
;

760 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

761 
__THROW
;

765 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

766 
__THROW
 
__wur
;

770 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

771 
__THROW
 
__wur
;

778 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

780 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

781 || 
deföed
 
__USE_MISC


786 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

789 #ifde‡
__USE_GNU


793 
__pid_t
 
	$_F‹k
 (Ë
__THROW
;

799 *
	$ây«me
 (
__fd
Ë
__THROW
;

803 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

804 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

808 
	$ißây
 (
__fd
Ë
__THROW
;

810 #ifde‡
__USE_MISC


813 
	$ây¶Ÿ
 (Ë
__THROW
;

818 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

819 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

821 #ifde‡
__USE_ATFILE


824 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

825 c⁄° *
__to
, 
__Êags
)

826 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

829 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


831 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

832 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

837 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

838 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

839 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

843 #ifde‡
__USE_ATFILE


845 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

846 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

849 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

850 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

851 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 3, 4));

855 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

857 #ifde‡
__USE_ATFILE


859 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

860 
__THROW
 
	`__n⁄nuŒ
 ((2));

864 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

868 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

871 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

878 *
	`gëlogö
 ();

879 #ifde‡
__USE_POSIX199506


886 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1))

887 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 2));

890 #ifdef 
__USE_MISC


892 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

896 #ifdef 
__USE_POSIX2


900 
	~<bôs/gë›t_posix.h
>

904 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


908 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1))

909 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 2));

913 #i‡
deföed
 
__USE_MISC


916 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

917 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 2));

921 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

927 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

928 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 2));

929 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

930 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 2));

935 
	$vh™gup
 (Ë
__THROW
;

938 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

946 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

947 
size_t
 
__off£t
, 
__sˇÀ
)

948 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

958 *
	$gëu£rshñl
 (Ë
__THROW
;

959 
	$ídu£rshñl
 (Ë
__THROW
;

960 
	$£tu£rshñl
 (Ë
__THROW
;

966 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

970 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

973 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

977 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

985 
	`fsync
 (
__fd
);

988 #ifde‡
__USE_GNU


991 
	$syncfs
 (
__fd
Ë
__THROW
;

995 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


998 
	`gëho°id
 ();

1001 
	$sync
 (Ë
__THROW
;

1004 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K


1007 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

1012 
	$gëdèbÀsize
 (Ë
__THROW
;

1018 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


1021 #i‚de‡
__USE_FILE_OFFSET64


1022 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

1023 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1025 #ifde‡
__REDIRECT_NTH


1026 
	`__REDIRECT_NTH
 (
åunˇã
,

1027 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

1028 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1030 
	#åunˇã
 
åunˇã64


	)

1033 #ifde‡
__USE_LARGEFILE64


1034 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1035 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1040 #i‡
deföed
 
__USE_POSIX199309
 \

1041 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1044 #i‚de‡
__USE_FILE_OFFSET64


1045 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1047 #ifde‡
__REDIRECT_NTH


1048 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1049 
·runˇã64
Ë
__wur
;

1051 
	#·runˇã
 
·runˇã64


	)

1054 #ifde‡
__USE_LARGEFILE64


1055 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1061 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1062 || 
deföed
 
__USE_MISC


1066 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1072 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1076 #ifde‡
__USE_MISC


1087 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1092 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1104 
	#F_ULOCK
 0

	)

1105 
	#F_LOCK
 1

	)

1106 
	#F_TLOCK
 2

	)

1107 
	#F_TEST
 3

	)

1109 #i‚de‡
__USE_FILE_OFFSET64


1110 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1112 #ifde‡
__REDIRECT


1113 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1114 
lockf64
Ë
__wur
;

1116 
	#lockf
 
lockf64


	)

1119 #ifde‡
__USE_LARGEFILE64


1120 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1125 #ifde‡
__USE_GNU


1130 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1131 (
__exãnsi⁄__
 \

1132 ({ 
__ªsu…
; \

1133 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1134 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1135 
__ªsu…
; 
	}
}))

	)

1138 
ssize_t
 
c›y_fûe_ønge
 (
__öfd
, 
__off64_t
 *
__pöoff
,

1139 
__outfd
, 
__off64_t
 *
__poutoff
,

1140 
size_t
 
__Àngth
, 
__Êags
);

1143 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1146 
fd©async
 (
__fûdes
);

1149 #ifde‡
__USE_MISC


1155 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1156 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1159 #ifdef 
__USE_XOPEN


1164 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1165 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2))

1166 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 3))

1167 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

1174 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1176 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1179 *
	`cu£rid
 (*
__s
);

1185 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_XOPEN2K


1186 
	$±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1187 (*
__∑ª¡
) (),

1188 (*
__chûd
Ë()Ë
__THROW
;

1191 #ifde‡
__USE_MISC


1194 
	$gëíå›y
 (*
__buf„r
, 
size_t
 
__Àngth
Ë
__wur


1195 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 2));

1199 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1200 
	~<bôs/uni°d.h
>

1204 
	~<bôs/uni°d_ext.h
>

1206 
__END_DECLS


	@/usr/include/X11/Xmd.h

47 #i‚de‡
XMD_H


48 
	#XMD_H
 1

	)

56 #i‡
deföed
(
__sun
Ë&& deföed(
__SVR4
)

57 
	~<sys/iß_defs.h
>

60 #i‡
deföed
 (
_LP64
Ë|| deföed(
__LP64__
) || \

61 
deföed
(
__Æpha
Ë|| deföed(
__Æpha__
) || \

62 
deföed
(
__ü64__
Ë|| deföed(
ü64
) || \

63 
deföed
(
__•¨c64__
) || \

64 
deföed
(
__s390x__
) || \

65 
deföed
(
__amd64__
Ë|| deföed(
amd64
) || \

66 
	$deföed
(
__powîpc64__
)

67 #i‡!
	`deföed
(
__ILP32__
)

68 
	#LONG64


	)

86 
	#_SIZEOF
(
x
Ë
sz_
##
	)
x

87 
	#SIZEOF
(
x
Ë
	`_SIZEOF
(x)

	)

94 
	#B32


	)

95 
	#B16


	)

96 #ifde‡
LONG64


97 
	tINT64
;

98 
	tINT32
;

100 
	tINT32
;

102 
	tINT16
;

104 sig√d 
	tINT8
;

106 #ifde‡
LONG64


107 
	tCARD64
;

108 
	tCARD32
;

110 
	tCARD64
;

111 
	tCARD32
;

113 
	tCARD16
;

114 
	tCARD8
;

116 
CARD32
 
	tBITS32
;

117 
CARD16
 
	tBITS16
;

119 
CARD8
 
	tBYTE
;

120 
CARD8
 
	tBOOL
;

126 
	#cvtINT8toI¡
(
vÆ
Ë(vÆ)

	)

127 
	#cvtINT16toI¡
(
vÆ
Ë(vÆ)

	)

128 
	#cvtINT32toI¡
(
vÆ
Ë(vÆ)

	)

129 
	#cvtINT8toSh‹t
(
vÆ
Ë(vÆ)

	)

130 
	#cvtINT16toSh‹t
(
vÆ
Ë(vÆ)

	)

131 
	#cvtINT32toSh‹t
(
vÆ
Ë(vÆ)

	)

132 
	#cvtINT8toL⁄g
(
vÆ
Ë(vÆ)

	)

133 
	#cvtINT16toL⁄g
(
vÆ
Ë(vÆ)

	)

134 
	#cvtINT32toL⁄g
(
vÆ
Ë(vÆ)

	)

140 
	#NEXTPTR
(
p
,
t
Ë((— *)’)Ë+ 1)

	)

	@/usr/include/X11/keysymdef.h

115 
	#XK_VoidSymbﬁ
 0xfffff‡

	)

117 #ifde‡
XK_MISCELLANY


124 
	#XK_BackS∑˚
 0xff08

	)

125 
	#XK_Tab
 0xff09

	)

126 
	#XK_Löe„ed
 0xff0®

	)

127 
	#XK_CÀ¨
 0xff0b

	)

128 
	#XK_Rëu∫
 0xff0d

	)

129 
	#XK_Pau£
 0xff13

	)

130 
	#XK_S¸ﬁl_Lock
 0xff14

	)

131 
	#XK_Sys_Req
 0xff15

	)

132 
	#XK_Esˇ≥
 0xff1b

	)

133 
	#XK_Dñëe
 0xfff‡

	)

139 
	#XK_Mu…i_key
 0xff20

	)

140 
	#XK_Codeöput
 0xff37

	)

141 
	#XK_SögÀC™did©e
 0xff3c

	)

142 
	#XK_Mu…ùÀC™did©e
 0xff3d

	)

143 
	#XK_PªviousC™did©e
 0xff3e

	)

147 
	#XK_K™ji
 0xff21

	)

148 
	#XK_Muhík™
 0xff22

	)

149 
	#XK_Hík™_Mode
 0xff23

	)

150 
	#XK_Hík™
 0xff23

	)

151 
	#XK_Romaji
 0xff24

	)

152 
	#XK_Húag™a
 0xff25

	)

153 
	#XK_K©ak™a
 0xff26

	)

154 
	#XK_Húag™a_K©ak™a
 0xff27

	)

155 
	#XK_Zíkaku
 0xff28

	)

156 
	#XK_H™kaku
 0xff29

	)

157 
	#XK_Zíkaku_H™kaku
 0xff2®

	)

158 
	#XK_Touroku
 0xff2b

	)

159 
	#XK_Massyo
 0xff2¯

	)

160 
	#XK_K™a_Lock
 0xff2d

	)

161 
	#XK_K™a_Shi·
 0xff2ê

	)

162 
	#XK_Eisu_Shi·
 0xff2‡

	)

163 
	#XK_Eisu_toggÀ
 0xff30

	)

164 
	#XK_K™ji_B™gou
 0xff37

	)

165 
	#XK_Zí_Koho
 0xff3d

	)

166 
	#XK_M´_Koho
 0xff3ê

	)

172 
	#XK_Home
 0xff50

	)

173 
	#XK_Le·
 0xff51

	)

174 
	#XK_Up
 0xff52

	)

175 
	#XK_Right
 0xff53

	)

176 
	#XK_Down
 0xff54

	)

177 
	#XK_Pri‹
 0xff55

	)

178 
	#XK_Page_Up
 0xff55

	)

179 
	#XK_Next
 0xff56

	)

180 
	#XK_Page_Down
 0xff56

	)

181 
	#XK_End
 0xff57

	)

182 
	#XK_Begö
 0xff58

	)

187 
	#XK_Sñe˘
 0xff60

	)

188 
	#XK_Pröt
 0xff61

	)

189 
	#XK_Execuã
 0xff62

	)

190 
	#XK_In£π
 0xff63

	)

191 
	#XK_Undo
 0xff65

	)

192 
	#XK_Redo
 0xff66

	)

193 
	#XK_Míu
 0xff67

	)

194 
	#XK_Föd
 0xff68

	)

195 
	#XK_C™˚l
 0xff69

	)

196 
	#XK_Hñp
 0xff6®

	)

197 
	#XK_Bªak
 0xff6b

	)

198 
	#XK_Mode_swôch
 0xff7ê

	)

199 
	#XK_s¸ùt_swôch
 0xff7ê

	)

200 
	#XK_Num_Lock
 0xff7f

	)

204 
	#XK_KP_S∑˚
 0xff80

	)

205 
	#XK_KP_Tab
 0xff89

	)

206 
	#XK_KP_E¡î
 0xff8d

	)

207 
	#XK_KP_F1
 0xff91

	)

208 
	#XK_KP_F2
 0xff92

	)

209 
	#XK_KP_F3
 0xff93

	)

210 
	#XK_KP_F4
 0xff94

	)

211 
	#XK_KP_Home
 0xff95

	)

212 
	#XK_KP_Le·
 0xff96

	)

213 
	#XK_KP_Up
 0xff97

	)

214 
	#XK_KP_Right
 0xff98

	)

215 
	#XK_KP_Down
 0xff99

	)

216 
	#XK_KP_Pri‹
 0xff9a

	)

217 
	#XK_KP_Page_Up
 0xff9a

	)

218 
	#XK_KP_Next
 0xff9b

	)

219 
	#XK_KP_Page_Down
 0xff9b

	)

220 
	#XK_KP_End
 0xff9c

	)

221 
	#XK_KP_Begö
 0xff9d

	)

222 
	#XK_KP_In£π
 0xff9e

	)

223 
	#XK_KP_Dñëe
 0xff9f

	)

224 
	#XK_KP_EquÆ
 0xffbd

	)

225 
	#XK_KP_Mu…ùly
 0xfÁa

	)

226 
	#XK_KP_Add
 0xfÁb

	)

227 
	#XK_KP_Sï¨©‹
 0xfÁ¯

	)

228 
	#XK_KP_Subåa˘
 0xfÁd

	)

229 
	#XK_KP_DecimÆ
 0xfÁe

	)

230 
	#XK_KP_Divide
 0xfÁf

	)

232 
	#XK_KP_0
 0xffb0

	)

233 
	#XK_KP_1
 0xffb1

	)

234 
	#XK_KP_2
 0xffb2

	)

235 
	#XK_KP_3
 0xffb3

	)

236 
	#XK_KP_4
 0xffb4

	)

237 
	#XK_KP_5
 0xffb5

	)

238 
	#XK_KP_6
 0xffb6

	)

239 
	#XK_KP_7
 0xffb7

	)

240 
	#XK_KP_8
 0xffb8

	)

241 
	#XK_KP_9
 0xffb9

	)

252 
	#XK_F1
 0xffbe

	)

253 
	#XK_F2
 0xffbf

	)

254 
	#XK_F3
 0xffc0

	)

255 
	#XK_F4
 0xffc1

	)

256 
	#XK_F5
 0xffc2

	)

257 
	#XK_F6
 0xffc3

	)

258 
	#XK_F7
 0xffc4

	)

259 
	#XK_F8
 0xffc5

	)

260 
	#XK_F9
 0xffc6

	)

261 
	#XK_F10
 0xffc7

	)

262 
	#XK_F11
 0xffc8

	)

263 
	#XK_L1
 0xffc8

	)

264 
	#XK_F12
 0xffc9

	)

265 
	#XK_L2
 0xffc9

	)

266 
	#XK_F13
 0xffˇ

	)

267 
	#XK_L3
 0xffˇ

	)

268 
	#XK_F14
 0xffcb

	)

269 
	#XK_L4
 0xffcb

	)

270 
	#XK_F15
 0xffcc

	)

271 
	#XK_L5
 0xffcc

	)

272 
	#XK_F16
 0xffcd

	)

273 
	#XK_L6
 0xffcd

	)

274 
	#XK_F17
 0xff˚

	)

275 
	#XK_L7
 0xff˚

	)

276 
	#XK_F18
 0xffcf

	)

277 
	#XK_L8
 0xffcf

	)

278 
	#XK_F19
 0xffd0

	)

279 
	#XK_L9
 0xffd0

	)

280 
	#XK_F20
 0xffd1

	)

281 
	#XK_L10
 0xffd1

	)

282 
	#XK_F21
 0xffd2

	)

283 
	#XK_R1
 0xffd2

	)

284 
	#XK_F22
 0xffd3

	)

285 
	#XK_R2
 0xffd3

	)

286 
	#XK_F23
 0xffd4

	)

287 
	#XK_R3
 0xffd4

	)

288 
	#XK_F24
 0xffd5

	)

289 
	#XK_R4
 0xffd5

	)

290 
	#XK_F25
 0xffd6

	)

291 
	#XK_R5
 0xffd6

	)

292 
	#XK_F26
 0xffd7

	)

293 
	#XK_R6
 0xffd7

	)

294 
	#XK_F27
 0xffd8

	)

295 
	#XK_R7
 0xffd8

	)

296 
	#XK_F28
 0xffd9

	)

297 
	#XK_R8
 0xffd9

	)

298 
	#XK_F29
 0xffda

	)

299 
	#XK_R9
 0xffda

	)

300 
	#XK_F30
 0xffdb

	)

301 
	#XK_R10
 0xffdb

	)

302 
	#XK_F31
 0xffdc

	)

303 
	#XK_R11
 0xffdc

	)

304 
	#XK_F32
 0xffdd

	)

305 
	#XK_R12
 0xffdd

	)

306 
	#XK_F33
 0xffde

	)

307 
	#XK_R13
 0xffde

	)

308 
	#XK_F34
 0xffdf

	)

309 
	#XK_R14
 0xffdf

	)

310 
	#XK_F35
 0xf„0

	)

311 
	#XK_R15
 0xf„0

	)

315 
	#XK_Shi·_L
 0xf„1

	)

316 
	#XK_Shi·_R
 0xf„2

	)

317 
	#XK_C⁄åﬁ_L
 0xf„3

	)

318 
	#XK_C⁄åﬁ_R
 0xf„4

	)

319 
	#XK_C≠s_Lock
 0xf„5

	)

320 
	#XK_Shi·_Lock
 0xf„6

	)

322 
	#XK_Mëa_L
 0xf„7

	)

323 
	#XK_Mëa_R
 0xf„8

	)

324 
	#XK_A…_L
 0xf„9

	)

325 
	#XK_A…_R
 0xf„®

	)

326 
	#XK_Su≥r_L
 0xf„b

	)

327 
	#XK_Su≥r_R
 0xf„¯

	)

328 
	#XK_Hy≥r_L
 0xf„d

	)

329 
	#XK_Hy≥r_R
 0xf„ê

	)

338 #ifde‡
XK_XKB_KEYS


339 
	#XK_ISO_Lock
 0x„01

	)

340 
	#XK_ISO_Levñ2_L©ch
 0x„02

	)

341 
	#XK_ISO_Levñ3_Shi·
 0x„03

	)

342 
	#XK_ISO_Levñ3_L©ch
 0x„04

	)

343 
	#XK_ISO_Levñ3_Lock
 0x„05

	)

344 
	#XK_ISO_Levñ5_Shi·
 0x„11

	)

345 
	#XK_ISO_Levñ5_L©ch
 0x„12

	)

346 
	#XK_ISO_Levñ5_Lock
 0x„13

	)

347 
	#XK_ISO_Group_Shi·
 0xff7ê

	)

348 
	#XK_ISO_Group_L©ch
 0x„06

	)

349 
	#XK_ISO_Group_Lock
 0x„07

	)

350 
	#XK_ISO_Next_Group
 0x„08

	)

351 
	#XK_ISO_Next_Group_Lock
 0x„09

	)

352 
	#XK_ISO_Pªv_Group
 0x„0a

	)

353 
	#XK_ISO_Pªv_Group_Lock
 0x„0b

	)

354 
	#XK_ISO_Fú°_Group
 0x„0c

	)

355 
	#XK_ISO_Fú°_Group_Lock
 0x„0d

	)

356 
	#XK_ISO_La°_Group
 0x„0e

	)

357 
	#XK_ISO_La°_Group_Lock
 0x„0f

	)

359 
	#XK_ISO_Le·_Tab
 0x„20

	)

360 
	#XK_ISO_Move_Löe_Up
 0x„21

	)

361 
	#XK_ISO_Move_Löe_Down
 0x„22

	)

362 
	#XK_ISO_P¨tül_Löe_Up
 0x„23

	)

363 
	#XK_ISO_P¨tül_Löe_Down
 0x„24

	)

364 
	#XK_ISO_P¨tül_S∑˚_Le·
 0x„25

	)

365 
	#XK_ISO_P¨tül_S∑˚_Right
 0x„26

	)

366 
	#XK_ISO_Së_M¨gö_Le·
 0x„27

	)

367 
	#XK_ISO_Së_M¨gö_Right
 0x„28

	)

368 
	#XK_ISO_Rñó£_M¨gö_Le·
 0x„29

	)

369 
	#XK_ISO_Rñó£_M¨gö_Right
 0x„2a

	)

370 
	#XK_ISO_Rñó£_BŸh_M¨gös
 0x„2b

	)

371 
	#XK_ISO_Fa°_Curs‹_Le·
 0x„2c

	)

372 
	#XK_ISO_Fa°_Curs‹_Right
 0x„2d

	)

373 
	#XK_ISO_Fa°_Curs‹_Up
 0x„2e

	)

374 
	#XK_ISO_Fa°_Curs‹_Down
 0x„2f

	)

375 
	#XK_ISO_C⁄töuous_Undîlöe
 0x„30

	)

376 
	#XK_ISO_Disc⁄töuous_Undîlöe
 0x„31

	)

377 
	#XK_ISO_Emphasize
 0x„32

	)

378 
	#XK_ISO_Cíãr_Obje˘
 0x„33

	)

379 
	#XK_ISO_E¡î
 0x„34

	)

381 
	#XK_dód_gøve
 0x„50

	)

382 
	#XK_dód_acuã
 0x„51

	)

383 
	#XK_dód_cúcumÊex
 0x„52

	)

384 
	#XK_dód_tûde
 0x„53

	)

385 
	#XK_dód_≥ri•omíi
 0x„53

	)

386 
	#XK_dód_ma¸⁄
 0x„54

	)

387 
	#XK_dód_bªve
 0x„55

	)

388 
	#XK_dód_abovedŸ
 0x„56

	)

389 
	#XK_dód_düîesis
 0x„57

	)

390 
	#XK_dód_abovîög
 0x„58

	)

391 
	#XK_dód_doubÀacuã
 0x„59

	)

392 
	#XK_dód_ˇr⁄
 0x„5a

	)

393 
	#XK_dód_˚dûœ
 0x„5b

	)

394 
	#XK_dód_og⁄ek
 0x„5c

	)

395 
	#XK_dód_iŸa
 0x„5d

	)

396 
	#XK_dód_voi˚d_sound
 0x„5e

	)

397 
	#XK_dód_£mivoi˚d_sound
 0x„5f

	)

398 
	#XK_dód_bñowdŸ
 0x„60

	)

399 
	#XK_dód_hook
 0x„61

	)

400 
	#XK_dód_h‹n
 0x„62

	)

401 
	#XK_dód_°roke
 0x„63

	)

402 
	#XK_dód_abovecomma
 0x„64

	)

403 
	#XK_dód_psûi
 0x„64

	)

404 
	#XK_dód_abovîevî£dcomma
 0x„65

	)

405 
	#XK_dód_dasü
 0x„65

	)

406 
	#XK_dód_doubÀgøve
 0x„66

	)

407 
	#XK_dód_bñowrög
 0x„67

	)

408 
	#XK_dód_bñowma¸⁄
 0x„68

	)

409 
	#XK_dód_bñowcúcumÊex
 0x„69

	)

410 
	#XK_dód_bñowtûde
 0x„6a

	)

411 
	#XK_dód_bñowbªve
 0x„6b

	)

412 
	#XK_dód_bñowdüîesis
 0x„6c

	)

413 
	#XK_dód_övîãdbªve
 0x„6d

	)

414 
	#XK_dód_bñowcomma
 0x„6e

	)

415 
	#XK_dód_cuºícy
 0x„6f

	)

418 
	#XK_dód_lowlöe
 0x„90

	)

419 
	#XK_dód_abovevîtiˇŒöe
 0x„91

	)

420 
	#XK_dód_bñowvîtiˇŒöe
 0x„92

	)

421 
	#XK_dód_l⁄gsﬁidusovîœy
 0x„93

	)

424 
	#XK_dód_a
 0x„80

	)

425 
	#XK_dód_A
 0x„81

	)

426 
	#XK_dód_e
 0x„82

	)

427 
	#XK_dód_E
 0x„83

	)

428 
	#XK_dód_i
 0x„84

	)

429 
	#XK_dód_I
 0x„85

	)

430 
	#XK_dód_o
 0x„86

	)

431 
	#XK_dód_O
 0x„87

	)

432 
	#XK_dód_u
 0x„88

	)

433 
	#XK_dód_U
 0x„89

	)

434 
	#XK_dód_smÆl_schwa
 0x„8a

	)

435 
	#XK_dód_ˇpôÆ_schwa
 0x„8b

	)

437 
	#XK_dód_gªek
 0x„8c

	)

439 
	#XK_Fú°_VútuÆ_S¸ìn
 0x„d0

	)

440 
	#XK_Pªv_VútuÆ_S¸ìn
 0x„d1

	)

441 
	#XK_Next_VútuÆ_S¸ìn
 0x„d2

	)

442 
	#XK_La°_VútuÆ_S¸ìn
 0x„d4

	)

443 
	#XK_Tîmö©e_Sîvî
 0x„d5

	)

445 
	#XK_Ac˚ssX_E«bÀ
 0x„70

	)

446 
	#XK_Ac˚ssX_Fìdback_E«bÀ
 0x„71

	)

447 
	#XK_RïótKeys_E«bÀ
 0x„72

	)

448 
	#XK_SlowKeys_E«bÀ
 0x„73

	)

449 
	#XK_Boun˚Keys_E«bÀ
 0x„74

	)

450 
	#XK_StickyKeys_E«bÀ
 0x„75

	)

451 
	#XK_Mou£Keys_E«bÀ
 0x„76

	)

452 
	#XK_Mou£Keys_Ac˚l_E«bÀ
 0x„77

	)

453 
	#XK_Ovîœy1_E«bÀ
 0x„78

	)

454 
	#XK_Ovîœy2_E«bÀ
 0x„79

	)

455 
	#XK_AudibÀBñl_E«bÀ
 0x„7a

	)

457 
	#XK_Poöãr_Le·
 0x„e0

	)

458 
	#XK_Poöãr_Right
 0x„e1

	)

459 
	#XK_Poöãr_Up
 0x„e2

	)

460 
	#XK_Poöãr_Down
 0x„e3

	)

461 
	#XK_Poöãr_UpLe·
 0x„e4

	)

462 
	#XK_Poöãr_UpRight
 0x„e5

	)

463 
	#XK_Poöãr_DownLe·
 0x„e6

	)

464 
	#XK_Poöãr_DownRight
 0x„e7

	)

465 
	#XK_Poöãr_Buâ⁄_DÊt
 0x„e8

	)

466 
	#XK_Poöãr_Buâ⁄1
 0x„e9

	)

467 
	#XK_Poöãr_Buâ⁄2
 0x„ó

	)

468 
	#XK_Poöãr_Buâ⁄3
 0x„eb

	)

469 
	#XK_Poöãr_Buâ⁄4
 0x„ec

	)

470 
	#XK_Poöãr_Buâ⁄5
 0x„ed

	)

471 
	#XK_Poöãr_DblClick_DÊt
 0x„ì

	)

472 
	#XK_Poöãr_DblClick1
 0x„ef

	)

473 
	#XK_Poöãr_DblClick2
 0x„f0

	)

474 
	#XK_Poöãr_DblClick3
 0x„f1

	)

475 
	#XK_Poöãr_DblClick4
 0x„f2

	)

476 
	#XK_Poöãr_DblClick5
 0x„f3

	)

477 
	#XK_Poöãr_Døg_DÊt
 0x„f4

	)

478 
	#XK_Poöãr_Døg1
 0x„f5

	)

479 
	#XK_Poöãr_Døg2
 0x„f6

	)

480 
	#XK_Poöãr_Døg3
 0x„f7

	)

481 
	#XK_Poöãr_Døg4
 0x„f8

	)

482 
	#XK_Poöãr_Døg5
 0x„fd

	)

484 
	#XK_Poöãr_E«bÀKeys
 0x„f9

	)

485 
	#XK_Poöãr_Ac˚Àøã
 0x„Á

	)

486 
	#XK_Poöãr_DÊtBäNext
 0x„fb

	)

487 
	#XK_Poöãr_DÊtBäPªv
 0x„fc

	)

491 
	#XK_ch
 0x„a0

	)

492 
	#XK_Ch
 0x„a1

	)

493 
	#XK_CH
 0x„a2

	)

494 
	#XK_c_h
 0x„a3

	)

495 
	#XK_C_h
 0x„a4

	)

496 
	#XK_C_H
 0x„a5

	)

505 #ifde‡
XK_3270


506 
	#XK_3270_Du∂iˇã
 0xfd01

	)

507 
	#XK_3270_FõldM¨k
 0xfd02

	)

508 
	#XK_3270_Right2
 0xfd03

	)

509 
	#XK_3270_Le·2
 0xfd04

	)

510 
	#XK_3270_BackTab
 0xfd05

	)

511 
	#XK_3270_Eø£EOF
 0xfd06

	)

512 
	#XK_3270_Eø£I≈ut
 0xfd07

	)

513 
	#XK_3270_Re£t
 0xfd08

	)

514 
	#XK_3270_Quô
 0xfd09

	)

515 
	#XK_3270_PA1
 0xfd0a

	)

516 
	#XK_3270_PA2
 0xfd0b

	)

517 
	#XK_3270_PA3
 0xfd0c

	)

518 
	#XK_3270_Te°
 0xfd0d

	)

519 
	#XK_3270_Aân
 0xfd0e

	)

520 
	#XK_3270_Curs‹Blök
 0xfd0f

	)

521 
	#XK_3270_A…Curs‹
 0xfd10

	)

522 
	#XK_3270_KeyClick
 0xfd11

	)

523 
	#XK_3270_Jump
 0xfd12

	)

524 
	#XK_3270_Idít
 0xfd13

	)

525 
	#XK_3270_RuÀ
 0xfd14

	)

526 
	#XK_3270_C›y
 0xfd15

	)

527 
	#XK_3270_Pœy
 0xfd16

	)

528 
	#XK_3270_Sëup
 0xfd17

	)

529 
	#XK_3270_Rec‹d
 0xfd18

	)

530 
	#XK_3270_Ch™geS¸ìn
 0xfd19

	)

531 
	#XK_3270_DñëeW‹d
 0xfd1a

	)

532 
	#XK_3270_ExSñe˘
 0xfd1b

	)

533 
	#XK_3270_Curs‹Sñe˘
 0xfd1c

	)

534 
	#XK_3270_PrötS¸ìn
 0xfd1d

	)

535 
	#XK_3270_E¡î
 0xfd1e

	)

543 #ifde‡
XK_LATIN1


544 
	#XK_•a˚
 0x0020

	)

545 
	#XK_ex˛am
 0x0021

	)

546 
	#XK_quŸedbl
 0x0022

	)

547 
	#XK_numbîsign
 0x0023

	)

548 
	#XK_dﬁœr
 0x0024

	)

549 
	#XK_≥r˚¡
 0x0025

	)

550 
	#XK_am≥rßnd
 0x0026

	)

551 
	#XK_≠o°r›he
 0x0027

	)

552 
	#XK_quŸîight
 0x0027

	)

553 
	#XK_∑ª∆e·
 0x0028

	)

554 
	#XK_∑ªƒight
 0x0029

	)

555 
	#XK_a°îisk
 0x002®

	)

556 
	#XK_∂us
 0x002b

	)

557 
	#XK_comma
 0x002¯

	)

558 
	#XK_möus
 0x002d

	)

559 
	#XK_≥riod
 0x002ê

	)

560 
	#XK_¶ash
 0x002‡

	)

561 
	#XK_0
 0x0030

	)

562 
	#XK_1
 0x0031

	)

563 
	#XK_2
 0x0032

	)

564 
	#XK_3
 0x0033

	)

565 
	#XK_4
 0x0034

	)

566 
	#XK_5
 0x0035

	)

567 
	#XK_6
 0x0036

	)

568 
	#XK_7
 0x0037

	)

569 
	#XK_8
 0x0038

	)

570 
	#XK_9
 0x0039

	)

571 
	#XK_cﬁ⁄
 0x003®

	)

572 
	#XK_£micﬁ⁄
 0x003b

	)

573 
	#XK_Àss
 0x003¯

	)

574 
	#XK_equÆ
 0x003d

	)

575 
	#XK_gª©î
 0x003ê

	)

576 
	#XK_que°i⁄
 0x003‡

	)

577 
	#XK_©
 0x0040

	)

578 
	#XK_A
 0x0041

	)

579 
	#XK_B
 0x0042

	)

580 
	#XK_C
 0x0043

	)

581 
	#XK_D
 0x0044

	)

582 
	#XK_E
 0x0045

	)

583 
	#XK_F
 0x0046

	)

584 
	#XK_G
 0x0047

	)

585 
	#XK_H
 0x0048

	)

586 
	#XK_I
 0x0049

	)

587 
	#XK_J
 0x004®

	)

588 
	#XK_K
 0x004b

	)

589 
	#XK_L
 0x004¯

	)

590 
	#XK_M
 0x004d

	)

591 
	#XK_N
 0x004ê

	)

592 
	#XK_O
 0x004‡

	)

593 
	#XK_P
 0x0050

	)

594 
	#XK_Q
 0x0051

	)

595 
	#XK_R
 0x0052

	)

596 
	#XK_S
 0x0053

	)

597 
	#XK_T
 0x0054

	)

598 
	#XK_U
 0x0055

	)

599 
	#XK_V
 0x0056

	)

600 
	#XK_W
 0x0057

	)

601 
	#XK_X
 0x0058

	)

602 
	#XK_Y
 0x0059

	)

603 
	#XK_Z
 0x005®

	)

604 
	#XK_bøckëÀ·
 0x005b

	)

605 
	#XK_back¶ash
 0x005¯

	)

606 
	#XK_bøckëright
 0x005d

	)

607 
	#XK_asciicúcum
 0x005ê

	)

608 
	#XK_undîsc‹e
 0x005‡

	)

609 
	#XK_gøve
 0x0060

	)

610 
	#XK_quŸñe·
 0x0060

	)

611 
	#XK_a
 0x0061

	)

612 
	#XK_b
 0x0062

	)

613 
	#XK_c
 0x0063

	)

614 
	#XK_d
 0x0064

	)

615 
	#XK_e
 0x0065

	)

616 
	#XK_f
 0x0066

	)

617 
	#XK_g
 0x0067

	)

618 
	#XK_h
 0x0068

	)

619 
	#XK_i
 0x0069

	)

620 
	#XK_j
 0x006®

	)

621 
	#XK_k
 0x006b

	)

622 
	#XK_l
 0x006¯

	)

623 
	#XK_m
 0x006d

	)

624 
	#XK_n
 0x006ê

	)

625 
	#XK_o
 0x006‡

	)

626 
	#XK_p
 0x0070

	)

627 
	#XK_q
 0x0071

	)

628 
	#XK_r
 0x0072

	)

629 
	#XK_s
 0x0073

	)

630 
	#XK_t
 0x0074

	)

631 
	#XK_u
 0x0075

	)

632 
	#XK_v
 0x0076

	)

633 
	#XK_w
 0x0077

	)

634 
	#XK_x
 0x0078

	)

635 
	#XK_y
 0x0079

	)

636 
	#XK_z
 0x007®

	)

637 
	#XK_bø˚À·
 0x007b

	)

638 
	#XK_b¨
 0x007¯

	)

639 
	#XK_bø˚right
 0x007d

	)

640 
	#XK_asciôûde
 0x007ê

	)

642 
	#XK_nobªak•a˚
 0x00a0

	)

643 
	#XK_ex˛amdown
 0x00a1

	)

644 
	#XK_˚¡
 0x00a2

	)

645 
	#XK_°îlög
 0x00a3

	)

646 
	#XK_cuºícy
 0x00a4

	)

647 
	#XK_yí
 0x00a5

	)

648 
	#XK_brokíb¨
 0x00a6

	)

649 
	#XK_£˘i⁄
 0x00a7

	)

650 
	#XK_düîesis
 0x00a8

	)

651 
	#XK_c›yright
 0x00a9

	)

652 
	#XK_‹d„mööe
 0x00Ø

	)

653 
	#XK_guûÀmŸÀ·
 0x00ab

	)

654 
	#XK_nŸsign
 0x00a¯

	)

655 
	#XK_hyphí
 0x00ad

	)

656 
	#XK_ªgi°îed
 0x00´

	)

657 
	#XK_ma¸⁄
 0x00a‡

	)

658 
	#XK_degªe
 0x00b0

	)

659 
	#XK_∂usmöus
 0x00b1

	)

660 
	#XK_twosu≥ri‹
 0x00b2

	)

661 
	#XK_thªesu≥ri‹
 0x00b3

	)

662 
	#XK_acuã
 0x00b4

	)

663 
	#XK_mu
 0x00b5

	)

664 
	#XK_∑øgøph
 0x00b6

	)

665 
	#XK_≥riod˚¡îed
 0x00b7

	)

666 
	#XK_˚dûœ
 0x00b8

	)

667 
	#XK_⁄esu≥ri‹
 0x00b9

	)

668 
	#XK_masculöe
 0x00b®

	)

669 
	#XK_guûÀmŸright
 0x00bb

	)

670 
	#XK_⁄equ¨ãr
 0x00b¯

	)

671 
	#XK_⁄ehÆf
 0x00bd

	)

672 
	#XK_thªequ¨ãrs
 0x00bê

	)

673 
	#XK_que°i⁄down
 0x00b‡

	)

674 
	#XK_Agøve
 0x00c0

	)

675 
	#XK_Aacuã
 0x00c1

	)

676 
	#XK_AcúcumÊex
 0x00c2

	)

677 
	#XK_Atûde
 0x00c3

	)

678 
	#XK_Adüîesis
 0x00c4

	)

679 
	#XK_Arög
 0x00c5

	)

680 
	#XK_AE
 0x00c6

	)

681 
	#XK_C˚dûœ
 0x00c7

	)

682 
	#XK_Egøve
 0x00c8

	)

683 
	#XK_Eacuã
 0x00c9

	)

684 
	#XK_EcúcumÊex
 0x00ˇ

	)

685 
	#XK_Edüîesis
 0x00cb

	)

686 
	#XK_Igøve
 0x00c¯

	)

687 
	#XK_Iacuã
 0x00cd

	)

688 
	#XK_IcúcumÊex
 0x00˚

	)

689 
	#XK_Idüîesis
 0x00c‡

	)

690 
	#XK_ETH
 0x00d0

	)

691 
	#XK_Eth
 0x00d0

	)

692 
	#XK_Ntûde
 0x00d1

	)

693 
	#XK_Ogøve
 0x00d2

	)

694 
	#XK_Oacuã
 0x00d3

	)

695 
	#XK_OcúcumÊex
 0x00d4

	)

696 
	#XK_Otûde
 0x00d5

	)

697 
	#XK_Odüîesis
 0x00d6

	)

698 
	#XK_mu…ùly
 0x00d7

	)

699 
	#XK_O¶ash
 0x00d8

	)

700 
	#XK_Ooblique
 0x00d8

	)

701 
	#XK_Ugøve
 0x00d9

	)

702 
	#XK_Uacuã
 0x00d®

	)

703 
	#XK_UcúcumÊex
 0x00db

	)

704 
	#XK_Udüîesis
 0x00d¯

	)

705 
	#XK_Yacuã
 0x00dd

	)

706 
	#XK_THORN
 0x00dê

	)

707 
	#XK_Th‹n
 0x00dê

	)

708 
	#XK_ssh¨p
 0x00d‡

	)

709 
	#XK_agøve
 0x00e0

	)

710 
	#XK_Øcuã
 0x00e1

	)

711 
	#XK_acúcumÊex
 0x00e2

	)

712 
	#XK_©ûde
 0x00e3

	)

713 
	#XK_adüîesis
 0x00e4

	)

714 
	#XK_¨ög
 0x00e5

	)

715 
	#XK_´
 0x00e6

	)

716 
	#XK_c˚dûœ
 0x00e7

	)

717 
	#XK_egøve
 0x00e8

	)

718 
	#XK_ócuã
 0x00e9

	)

719 
	#XK_ecúcumÊex
 0x00ó

	)

720 
	#XK_edüîesis
 0x00eb

	)

721 
	#XK_igøve
 0x00e¯

	)

722 
	#XK_ücuã
 0x00ed

	)

723 
	#XK_icúcumÊex
 0x00ì

	)

724 
	#XK_idüîesis
 0x00e‡

	)

725 
	#XK_ëh
 0x00f0

	)

726 
	#XK_¡ûde
 0x00f1

	)

727 
	#XK_ogøve
 0x00f2

	)

728 
	#XK_ﬂcuã
 0x00f3

	)

729 
	#XK_ocúcumÊex
 0x00f4

	)

730 
	#XK_Ÿûde
 0x00f5

	)

731 
	#XK_odüîesis
 0x00f6

	)

732 
	#XK_divisi⁄
 0x00f7

	)

733 
	#XK_o¶ash
 0x00f8

	)

734 
	#XK_ooblique
 0x00f8

	)

735 
	#XK_ugøve
 0x00f9

	)

736 
	#XK_uacuã
 0x00Á

	)

737 
	#XK_ucúcumÊex
 0x00fb

	)

738 
	#XK_udüîesis
 0x00f¯

	)

739 
	#XK_yacuã
 0x00fd

	)

740 
	#XK_th‹n
 0x00„

	)

741 
	#XK_ydüîesis
 0x00f‡

	)

749 #ifde‡
XK_LATIN2


750 
	#XK_Aog⁄ek
 0x01a1

	)

751 
	#XK_bªve
 0x01a2

	)

752 
	#XK_L°roke
 0x01a3

	)

753 
	#XK_Lˇr⁄
 0x01a5

	)

754 
	#XK_Sacuã
 0x01a6

	)

755 
	#XK_Sˇr⁄
 0x01a9

	)

756 
	#XK_S˚dûœ
 0x01Ø

	)

757 
	#XK_Tˇr⁄
 0x01ab

	)

758 
	#XK_Zacuã
 0x01a¯

	)

759 
	#XK_Zˇr⁄
 0x01´

	)

760 
	#XK_ZabovedŸ
 0x01a‡

	)

761 
	#XK_aog⁄ek
 0x01b1

	)

762 
	#XK_og⁄ek
 0x01b2

	)

763 
	#XK_l°roke
 0x01b3

	)

764 
	#XK_lˇr⁄
 0x01b5

	)

765 
	#XK_ßcuã
 0x01b6

	)

766 
	#XK_ˇr⁄
 0x01b7

	)

767 
	#XK_sˇr⁄
 0x01b9

	)

768 
	#XK_s˚dûœ
 0x01b®

	)

769 
	#XK_tˇr⁄
 0x01bb

	)

770 
	#XK_zacuã
 0x01b¯

	)

771 
	#XK_doubÀacuã
 0x01bd

	)

772 
	#XK_zˇr⁄
 0x01bê

	)

773 
	#XK_zabovedŸ
 0x01b‡

	)

774 
	#XK_Racuã
 0x01c0

	)

775 
	#XK_Abªve
 0x01c3

	)

776 
	#XK_Lacuã
 0x01c5

	)

777 
	#XK_Cacuã
 0x01c6

	)

778 
	#XK_Cˇr⁄
 0x01c8

	)

779 
	#XK_Eog⁄ek
 0x01ˇ

	)

780 
	#XK_Eˇr⁄
 0x01c¯

	)

781 
	#XK_Dˇr⁄
 0x01c‡

	)

782 
	#XK_D°roke
 0x01d0

	)

783 
	#XK_Nacuã
 0x01d1

	)

784 
	#XK_Nˇr⁄
 0x01d2

	)

785 
	#XK_OdoubÀacuã
 0x01d5

	)

786 
	#XK_Rˇr⁄
 0x01d8

	)

787 
	#XK_Urög
 0x01d9

	)

788 
	#XK_UdoubÀacuã
 0x01db

	)

789 
	#XK_T˚dûœ
 0x01dê

	)

790 
	#XK_øcuã
 0x01e0

	)

791 
	#XK_abªve
 0x01e3

	)

792 
	#XK_œcuã
 0x01e5

	)

793 
	#XK_ˇcuã
 0x01e6

	)

794 
	#XK_cˇr⁄
 0x01e8

	)

795 
	#XK_eog⁄ek
 0x01ó

	)

796 
	#XK_eˇr⁄
 0x01e¯

	)

797 
	#XK_dˇr⁄
 0x01e‡

	)

798 
	#XK_d°roke
 0x01f0

	)

799 
	#XK_«cuã
 0x01f1

	)

800 
	#XK_nˇr⁄
 0x01f2

	)

801 
	#XK_odoubÀacuã
 0x01f5

	)

802 
	#XK_rˇr⁄
 0x01f8

	)

803 
	#XK_urög
 0x01f9

	)

804 
	#XK_udoubÀacuã
 0x01fb

	)

805 
	#XK_t˚dûœ
 0x01„

	)

806 
	#XK_abovedŸ
 0x01f‡

	)

814 #ifde‡
XK_LATIN3


815 
	#XK_H°roke
 0x02a1

	)

816 
	#XK_HcúcumÊex
 0x02a6

	)

817 
	#XK_IabovedŸ
 0x02a9

	)

818 
	#XK_Gbªve
 0x02ab

	)

819 
	#XK_JcúcumÊex
 0x02a¯

	)

820 
	#XK_h°roke
 0x02b1

	)

821 
	#XK_hcúcumÊex
 0x02b6

	)

822 
	#XK_idŸÀss
 0x02b9

	)

823 
	#XK_gbªve
 0x02bb

	)

824 
	#XK_jcúcumÊex
 0x02b¯

	)

825 
	#XK_CabovedŸ
 0x02c5

	)

826 
	#XK_CcúcumÊex
 0x02c6

	)

827 
	#XK_GabovedŸ
 0x02d5

	)

828 
	#XK_GcúcumÊex
 0x02d8

	)

829 
	#XK_Ubªve
 0x02dd

	)

830 
	#XK_ScúcumÊex
 0x02dê

	)

831 
	#XK_ˇbovedŸ
 0x02e5

	)

832 
	#XK_ccúcumÊex
 0x02e6

	)

833 
	#XK_gabovedŸ
 0x02f5

	)

834 
	#XK_gcúcumÊex
 0x02f8

	)

835 
	#XK_ubªve
 0x02fd

	)

836 
	#XK_scúcumÊex
 0x02„

	)

845 #ifde‡
XK_LATIN4


846 
	#XK_kø
 0x03a2

	)

847 
	#XK_k≠∑
 0x03a2

	)

848 
	#XK_R˚dûœ
 0x03a3

	)

849 
	#XK_Itûde
 0x03a5

	)

850 
	#XK_L˚dûœ
 0x03a6

	)

851 
	#XK_Ema¸⁄
 0x03Ø

	)

852 
	#XK_G˚dûœ
 0x03ab

	)

853 
	#XK_T¶ash
 0x03a¯

	)

854 
	#XK_r˚dûœ
 0x03b3

	)

855 
	#XK_ôûde
 0x03b5

	)

856 
	#XK_l˚dûœ
 0x03b6

	)

857 
	#XK_ema¸⁄
 0x03b®

	)

858 
	#XK_g˚dûœ
 0x03bb

	)

859 
	#XK_t¶ash
 0x03b¯

	)

860 
	#XK_ENG
 0x03bd

	)

861 
	#XK_íg
 0x03b‡

	)

862 
	#XK_Ama¸⁄
 0x03c0

	)

863 
	#XK_Iog⁄ek
 0x03c7

	)

864 
	#XK_EabovedŸ
 0x03c¯

	)

865 
	#XK_Ima¸⁄
 0x03c‡

	)

866 
	#XK_N˚dûœ
 0x03d1

	)

867 
	#XK_Oma¸⁄
 0x03d2

	)

868 
	#XK_K˚dûœ
 0x03d3

	)

869 
	#XK_Uog⁄ek
 0x03d9

	)

870 
	#XK_Utûde
 0x03dd

	)

871 
	#XK_Uma¸⁄
 0x03dê

	)

872 
	#XK_ama¸⁄
 0x03e0

	)

873 
	#XK_iog⁄ek
 0x03e7

	)

874 
	#XK_óbovedŸ
 0x03e¯

	)

875 
	#XK_ima¸⁄
 0x03e‡

	)

876 
	#XK_n˚dûœ
 0x03f1

	)

877 
	#XK_oma¸⁄
 0x03f2

	)

878 
	#XK_k˚dûœ
 0x03f3

	)

879 
	#XK_uog⁄ek
 0x03f9

	)

880 
	#XK_utûde
 0x03fd

	)

881 
	#XK_uma¸⁄
 0x03„

	)

887 #ifde‡
XK_LATIN8


888 
	#XK_WcúcumÊex
 0x1000174

	)

889 
	#XK_wcúcumÊex
 0x1000175

	)

890 
	#XK_YcúcumÊex
 0x1000176

	)

891 
	#XK_ycúcumÊex
 0x1000177

	)

892 
	#XK_BabovedŸ
 0x1001e02

	)

893 
	#XK_babovedŸ
 0x1001e03

	)

894 
	#XK_DabovedŸ
 0x1001e0®

	)

895 
	#XK_dabovedŸ
 0x1001e0b

	)

896 
	#XK_FabovedŸ
 0x1001e1ê

	)

897 
	#XK_ÁbovedŸ
 0x1001e1‡

	)

898 
	#XK_MabovedŸ
 0x1001e40

	)

899 
	#XK_mabovedŸ
 0x1001e41

	)

900 
	#XK_PabovedŸ
 0x1001e56

	)

901 
	#XK_∑bovedŸ
 0x1001e57

	)

902 
	#XK_SabovedŸ
 0x1001e60

	)

903 
	#XK_ßbovedŸ
 0x1001e61

	)

904 
	#XK_TabovedŸ
 0x1001e6®

	)

905 
	#XK_èbovedŸ
 0x1001e6b

	)

906 
	#XK_Wgøve
 0x1001e80

	)

907 
	#XK_wgøve
 0x1001e81

	)

908 
	#XK_Wacuã
 0x1001e82

	)

909 
	#XK_wacuã
 0x1001e83

	)

910 
	#XK_Wdüîesis
 0x1001e84

	)

911 
	#XK_wdüîesis
 0x1001e85

	)

912 
	#XK_Ygøve
 0x1001ef2

	)

913 
	#XK_ygøve
 0x1001ef3

	)

921 #ifde‡
XK_LATIN9


922 
	#XK_OE
 0x13b¯

	)

923 
	#XK_€
 0x13bd

	)

924 
	#XK_Ydüîesis
 0x13bê

	)

932 #ifde‡
XK_KATAKANA


933 
	#XK_ovîlöe
 0x047ê

	)

934 
	#XK_k™a_fuŒ°›
 0x04a1

	)

935 
	#XK_k™a_›íögbøckë
 0x04a2

	)

936 
	#XK_k™a_˛osögbøckë
 0x04a3

	)

937 
	#XK_k™a_comma
 0x04a4

	)

938 
	#XK_k™a_c⁄jun˘ive
 0x04a5

	)

939 
	#XK_k™a_middÀdŸ
 0x04a5

	)

940 
	#XK_k™a_WO
 0x04a6

	)

941 
	#XK_k™a_a
 0x04a7

	)

942 
	#XK_k™a_i
 0x04a8

	)

943 
	#XK_k™a_u
 0x04a9

	)

944 
	#XK_k™a_e
 0x04Ø

	)

945 
	#XK_k™a_o
 0x04ab

	)

946 
	#XK_k™a_ya
 0x04a¯

	)

947 
	#XK_k™a_yu
 0x04ad

	)

948 
	#XK_k™a_yo
 0x04´

	)

949 
	#XK_k™a_tsu
 0x04a‡

	)

950 
	#XK_k™a_tu
 0x04a‡

	)

951 
	#XK_¥ﬁ⁄gedsound
 0x04b0

	)

952 
	#XK_k™a_A
 0x04b1

	)

953 
	#XK_k™a_I
 0x04b2

	)

954 
	#XK_k™a_U
 0x04b3

	)

955 
	#XK_k™a_E
 0x04b4

	)

956 
	#XK_k™a_O
 0x04b5

	)

957 
	#XK_k™a_KA
 0x04b6

	)

958 
	#XK_k™a_KI
 0x04b7

	)

959 
	#XK_k™a_KU
 0x04b8

	)

960 
	#XK_k™a_KE
 0x04b9

	)

961 
	#XK_k™a_KO
 0x04b®

	)

962 
	#XK_k™a_SA
 0x04bb

	)

963 
	#XK_k™a_SHI
 0x04b¯

	)

964 
	#XK_k™a_SU
 0x04bd

	)

965 
	#XK_k™a_SE
 0x04bê

	)

966 
	#XK_k™a_SO
 0x04b‡

	)

967 
	#XK_k™a_TA
 0x04c0

	)

968 
	#XK_k™a_CHI
 0x04c1

	)

969 
	#XK_k™a_TI
 0x04c1

	)

970 
	#XK_k™a_TSU
 0x04c2

	)

971 
	#XK_k™a_TU
 0x04c2

	)

972 
	#XK_k™a_TE
 0x04c3

	)

973 
	#XK_k™a_TO
 0x04c4

	)

974 
	#XK_k™a_NA
 0x04c5

	)

975 
	#XK_k™a_NI
 0x04c6

	)

976 
	#XK_k™a_NU
 0x04c7

	)

977 
	#XK_k™a_NE
 0x04c8

	)

978 
	#XK_k™a_NO
 0x04c9

	)

979 
	#XK_k™a_HA
 0x04ˇ

	)

980 
	#XK_k™a_HI
 0x04cb

	)

981 
	#XK_k™a_FU
 0x04c¯

	)

982 
	#XK_k™a_HU
 0x04c¯

	)

983 
	#XK_k™a_HE
 0x04cd

	)

984 
	#XK_k™a_HO
 0x04˚

	)

985 
	#XK_k™a_MA
 0x04c‡

	)

986 
	#XK_k™a_MI
 0x04d0

	)

987 
	#XK_k™a_MU
 0x04d1

	)

988 
	#XK_k™a_ME
 0x04d2

	)

989 
	#XK_k™a_MO
 0x04d3

	)

990 
	#XK_k™a_YA
 0x04d4

	)

991 
	#XK_k™a_YU
 0x04d5

	)

992 
	#XK_k™a_YO
 0x04d6

	)

993 
	#XK_k™a_RA
 0x04d7

	)

994 
	#XK_k™a_RI
 0x04d8

	)

995 
	#XK_k™a_RU
 0x04d9

	)

996 
	#XK_k™a_RE
 0x04d®

	)

997 
	#XK_k™a_RO
 0x04db

	)

998 
	#XK_k™a_WA
 0x04d¯

	)

999 
	#XK_k™a_N
 0x04dd

	)

1000 
	#XK_voi˚dsound
 0x04dê

	)

1001 
	#XK_£mivoi˚dsound
 0x04d‡

	)

1002 
	#XK_k™a_swôch
 0xff7ê

	)

1010 #ifde‡
XK_ARABIC


1011 
	#XK_F¨si_0
 0x10006f0

	)

1012 
	#XK_F¨si_1
 0x10006f1

	)

1013 
	#XK_F¨si_2
 0x10006f2

	)

1014 
	#XK_F¨si_3
 0x10006f3

	)

1015 
	#XK_F¨si_4
 0x10006f4

	)

1016 
	#XK_F¨si_5
 0x10006f5

	)

1017 
	#XK_F¨si_6
 0x10006f6

	)

1018 
	#XK_F¨si_7
 0x10006f7

	)

1019 
	#XK_F¨si_8
 0x10006f8

	)

1020 
	#XK_F¨si_9
 0x10006f9

	)

1021 
	#XK_Aøbic_≥r˚¡
 0x100066®

	)

1022 
	#XK_Aøbic_su≥rs¸ùt_Æef
 0x1000670

	)

1023 
	#XK_Aøbic_âeh
 0x1000679

	)

1024 
	#XK_Aøbic_≥h
 0x100067ê

	)

1025 
	#XK_Aøbic_tcheh
 0x1000686

	)

1026 
	#XK_Aøbic_ddÆ
 0x1000688

	)

1027 
	#XK_Aøbic_ºeh
 0x1000691

	)

1028 
	#XK_Aøbic_comma
 0x05a¯

	)

1029 
	#XK_Aøbic_fuŒ°›
 0x10006d4

	)

1030 
	#XK_Aøbic_0
 0x1000660

	)

1031 
	#XK_Aøbic_1
 0x1000661

	)

1032 
	#XK_Aøbic_2
 0x1000662

	)

1033 
	#XK_Aøbic_3
 0x1000663

	)

1034 
	#XK_Aøbic_4
 0x1000664

	)

1035 
	#XK_Aøbic_5
 0x1000665

	)

1036 
	#XK_Aøbic_6
 0x1000666

	)

1037 
	#XK_Aøbic_7
 0x1000667

	)

1038 
	#XK_Aøbic_8
 0x1000668

	)

1039 
	#XK_Aøbic_9
 0x1000669

	)

1040 
	#XK_Aøbic_£micﬁ⁄
 0x05bb

	)

1041 
	#XK_Aøbic_que°i⁄_m¨k
 0x05b‡

	)

1042 
	#XK_Aøbic_hamza
 0x05c1

	)

1043 
	#XK_Aøbic_madda⁄Æef
 0x05c2

	)

1044 
	#XK_Aøbic_hamza⁄Æef
 0x05c3

	)

1045 
	#XK_Aøbic_hamza⁄waw
 0x05c4

	)

1046 
	#XK_Aøbic_hamzaundîÆef
 0x05c5

	)

1047 
	#XK_Aøbic_hamza⁄yeh
 0x05c6

	)

1048 
	#XK_Aøbic_Æef
 0x05c7

	)

1049 
	#XK_Aøbic_beh
 0x05c8

	)

1050 
	#XK_Aøbic_ãhm¨buè
 0x05c9

	)

1051 
	#XK_Aøbic_ãh
 0x05ˇ

	)

1052 
	#XK_Aøbic_theh
 0x05cb

	)

1053 
	#XK_Aøbic_jìm
 0x05c¯

	)

1054 
	#XK_Aøbic_hah
 0x05cd

	)

1055 
	#XK_Aøbic_khah
 0x05˚

	)

1056 
	#XK_Aøbic_dÆ
 0x05c‡

	)

1057 
	#XK_Aøbic_thÆ
 0x05d0

	)

1058 
	#XK_Aøbic_ø
 0x05d1

	)

1059 
	#XK_Aøbic_zaö
 0x05d2

	)

1060 
	#XK_Aøbic_£í
 0x05d3

	)

1061 
	#XK_Aøbic_shìn
 0x05d4

	)

1062 
	#XK_Aøbic_ßd
 0x05d5

	)

1063 
	#XK_Aøbic_dad
 0x05d6

	)

1064 
	#XK_Aøbic_èh
 0x05d7

	)

1065 
	#XK_Aøbic_zah
 0x05d8

	)

1066 
	#XK_Aøbic_aö
 0x05d9

	)

1067 
	#XK_Aøbic_ghaö
 0x05d®

	)

1068 
	#XK_Aøbic_ètwìl
 0x05e0

	)

1069 
	#XK_Aøbic_„h
 0x05e1

	)

1070 
	#XK_Aøbic_qaf
 0x05e2

	)

1071 
	#XK_Aøbic_kaf
 0x05e3

	)

1072 
	#XK_Aøbic_œm
 0x05e4

	)

1073 
	#XK_Aøbic_mìm
 0x05e5

	)

1074 
	#XK_Aøbic_no⁄
 0x05e6

	)

1075 
	#XK_Aøbic_ha
 0x05e7

	)

1076 
	#XK_Aøbic_heh
 0x05e7

	)

1077 
	#XK_Aøbic_waw
 0x05e8

	)

1078 
	#XK_Aøbic_Æefmaksuø
 0x05e9

	)

1079 
	#XK_Aøbic_yeh
 0x05ó

	)

1080 
	#XK_Aøbic_Áth©™
 0x05eb

	)

1081 
	#XK_Aøbic_damm©™
 0x05e¯

	)

1082 
	#XK_Aøbic_ka§©™
 0x05ed

	)

1083 
	#XK_Aøbic_Átha
 0x05ì

	)

1084 
	#XK_Aøbic_damma
 0x05e‡

	)

1085 
	#XK_Aøbic_ka§a
 0x05f0

	)

1086 
	#XK_Aøbic_shadda
 0x05f1

	)

1087 
	#XK_Aøbic_sukun
 0x05f2

	)

1088 
	#XK_Aøbic_madda_above
 0x1000653

	)

1089 
	#XK_Aøbic_hamza_above
 0x1000654

	)

1090 
	#XK_Aøbic_hamza_bñow
 0x1000655

	)

1091 
	#XK_Aøbic_jeh
 0x1000698

	)

1092 
	#XK_Aøbic_veh
 0x10006a4

	)

1093 
	#XK_Aøbic_keheh
 0x10006a9

	)

1094 
	#XK_Aøbic_gaf
 0x10006a‡

	)

1095 
	#XK_Aøbic_no⁄_ghu¬a
 0x10006b®

	)

1096 
	#XK_Aøbic_heh_dﬂchashmì
 0x10006bê

	)

1097 
	#XK_F¨si_yeh
 0x10006c¯

	)

1098 
	#XK_Aøbic_Ársi_yeh
 0x10006c¯

	)

1099 
	#XK_Aøbic_yeh_b¨ì
 0x10006d2

	)

1100 
	#XK_Aøbic_heh_gﬂl
 0x10006c1

	)

1101 
	#XK_Aøbic_swôch
 0xff7ê

	)

1108 #ifde‡
XK_CYRILLIC


1109 
	#XK_Cyrûlic_GHE_b¨
 0x1000492

	)

1110 
	#XK_Cyrûlic_ghe_b¨
 0x1000493

	)

1111 
	#XK_Cyrûlic_ZHE_des˚ndî
 0x1000496

	)

1112 
	#XK_Cyrûlic_zhe_des˚ndî
 0x1000497

	)

1113 
	#XK_Cyrûlic_KA_des˚ndî
 0x100049®

	)

1114 
	#XK_Cyrûlic_ka_des˚ndî
 0x100049b

	)

1115 
	#XK_Cyrûlic_KA_vît°roke
 0x100049¯

	)

1116 
	#XK_Cyrûlic_ka_vît°roke
 0x100049d

	)

1117 
	#XK_Cyrûlic_EN_des˚ndî
 0x10004a2

	)

1118 
	#XK_Cyrûlic_í_des˚ndî
 0x10004a3

	)

1119 
	#XK_Cyrûlic_U_°øight
 0x10004´

	)

1120 
	#XK_Cyrûlic_u_°øight
 0x10004a‡

	)

1121 
	#XK_Cyrûlic_U_°øight_b¨
 0x10004b0

	)

1122 
	#XK_Cyrûlic_u_°øight_b¨
 0x10004b1

	)

1123 
	#XK_Cyrûlic_HA_des˚ndî
 0x10004b2

	)

1124 
	#XK_Cyrûlic_ha_des˚ndî
 0x10004b3

	)

1125 
	#XK_Cyrûlic_CHE_des˚ndî
 0x10004b6

	)

1126 
	#XK_Cyrûlic_che_des˚ndî
 0x10004b7

	)

1127 
	#XK_Cyrûlic_CHE_vît°roke
 0x10004b8

	)

1128 
	#XK_Cyrûlic_che_vît°roke
 0x10004b9

	)

1129 
	#XK_Cyrûlic_SHHA
 0x10004b®

	)

1130 
	#XK_Cyrûlic_shha
 0x10004bb

	)

1132 
	#XK_Cyrûlic_SCHWA
 0x10004d8

	)

1133 
	#XK_Cyrûlic_schwa
 0x10004d9

	)

1134 
	#XK_Cyrûlic_I_ma¸⁄
 0x10004e2

	)

1135 
	#XK_Cyrûlic_i_ma¸⁄
 0x10004e3

	)

1136 
	#XK_Cyrûlic_O_b¨
 0x10004e8

	)

1137 
	#XK_Cyrûlic_o_b¨
 0x10004e9

	)

1138 
	#XK_Cyrûlic_U_ma¸⁄
 0x10004ì

	)

1139 
	#XK_Cyrûlic_u_ma¸⁄
 0x10004e‡

	)

1141 
	#XK_Sîbün_dje
 0x06a1

	)

1142 
	#XK_Ma˚d⁄ü_gje
 0x06a2

	)

1143 
	#XK_Cyrûlic_io
 0x06a3

	)

1144 
	#XK_Ukøöün_õ
 0x06a4

	)

1145 
	#XK_Ukønün_je
 0x06a4

	)

1146 
	#XK_Ma˚d⁄ü_d£
 0x06a5

	)

1147 
	#XK_Ukøöün_i
 0x06a6

	)

1148 
	#XK_Ukønün_i
 0x06a6

	)

1149 
	#XK_Ukøöün_yi
 0x06a7

	)

1150 
	#XK_Ukønün_yi
 0x06a7

	)

1151 
	#XK_Cyrûlic_je
 0x06a8

	)

1152 
	#XK_Sîbün_je
 0x06a8

	)

1153 
	#XK_Cyrûlic_lje
 0x06a9

	)

1154 
	#XK_Sîbün_lje
 0x06a9

	)

1155 
	#XK_Cyrûlic_nje
 0x06Ø

	)

1156 
	#XK_Sîbün_nje
 0x06Ø

	)

1157 
	#XK_Sîbün_tshe
 0x06ab

	)

1158 
	#XK_Ma˚d⁄ü_kje
 0x06a¯

	)

1159 
	#XK_Ukøöün_ghe_wôh_u±u∫
 0x06ad

	)

1160 
	#XK_Byñ‹ussün_sh‹tu
 0x06´

	)

1161 
	#XK_Cyrûlic_dzhe
 0x06a‡

	)

1162 
	#XK_Sîbün_dze
 0x06a‡

	)

1163 
	#XK_numîosign
 0x06b0

	)

1164 
	#XK_Sîbün_DJE
 0x06b1

	)

1165 
	#XK_Ma˚d⁄ü_GJE
 0x06b2

	)

1166 
	#XK_Cyrûlic_IO
 0x06b3

	)

1167 
	#XK_Ukøöün_IE
 0x06b4

	)

1168 
	#XK_Ukønün_JE
 0x06b4

	)

1169 
	#XK_Ma˚d⁄ü_DSE
 0x06b5

	)

1170 
	#XK_Ukøöün_I
 0x06b6

	)

1171 
	#XK_Ukønün_I
 0x06b6

	)

1172 
	#XK_Ukøöün_YI
 0x06b7

	)

1173 
	#XK_Ukønün_YI
 0x06b7

	)

1174 
	#XK_Cyrûlic_JE
 0x06b8

	)

1175 
	#XK_Sîbün_JE
 0x06b8

	)

1176 
	#XK_Cyrûlic_LJE
 0x06b9

	)

1177 
	#XK_Sîbün_LJE
 0x06b9

	)

1178 
	#XK_Cyrûlic_NJE
 0x06b®

	)

1179 
	#XK_Sîbün_NJE
 0x06b®

	)

1180 
	#XK_Sîbün_TSHE
 0x06bb

	)

1181 
	#XK_Ma˚d⁄ü_KJE
 0x06b¯

	)

1182 
	#XK_Ukøöün_GHE_WITH_UPTURN
 0x06bd

	)

1183 
	#XK_Byñ‹ussün_SHORTU
 0x06bê

	)

1184 
	#XK_Cyrûlic_DZHE
 0x06b‡

	)

1185 
	#XK_Sîbün_DZE
 0x06b‡

	)

1186 
	#XK_Cyrûlic_yu
 0x06c0

	)

1187 
	#XK_Cyrûlic_a
 0x06c1

	)

1188 
	#XK_Cyrûlic_be
 0x06c2

	)

1189 
	#XK_Cyrûlic_t£
 0x06c3

	)

1190 
	#XK_Cyrûlic_de
 0x06c4

	)

1191 
	#XK_Cyrûlic_õ
 0x06c5

	)

1192 
	#XK_Cyrûlic_ef
 0x06c6

	)

1193 
	#XK_Cyrûlic_ghe
 0x06c7

	)

1194 
	#XK_Cyrûlic_ha
 0x06c8

	)

1195 
	#XK_Cyrûlic_i
 0x06c9

	)

1196 
	#XK_Cyrûlic_sh‹ti
 0x06ˇ

	)

1197 
	#XK_Cyrûlic_ka
 0x06cb

	)

1198 
	#XK_Cyrûlic_ñ
 0x06c¯

	)

1199 
	#XK_Cyrûlic_em
 0x06cd

	)

1200 
	#XK_Cyrûlic_í
 0x06˚

	)

1201 
	#XK_Cyrûlic_o
 0x06c‡

	)

1202 
	#XK_Cyrûlic_≥
 0x06d0

	)

1203 
	#XK_Cyrûlic_ya
 0x06d1

	)

1204 
	#XK_Cyrûlic_î
 0x06d2

	)

1205 
	#XK_Cyrûlic_es
 0x06d3

	)

1206 
	#XK_Cyrûlic_ã
 0x06d4

	)

1207 
	#XK_Cyrûlic_u
 0x06d5

	)

1208 
	#XK_Cyrûlic_zhe
 0x06d6

	)

1209 
	#XK_Cyrûlic_ve
 0x06d7

	)

1210 
	#XK_Cyrûlic_so·sign
 0x06d8

	)

1211 
	#XK_Cyrûlic_yîu
 0x06d9

	)

1212 
	#XK_Cyrûlic_ze
 0x06d®

	)

1213 
	#XK_Cyrûlic_sha
 0x06db

	)

1214 
	#XK_Cyrûlic_e
 0x06d¯

	)

1215 
	#XK_Cyrûlic_shcha
 0x06dd

	)

1216 
	#XK_Cyrûlic_che
 0x06dê

	)

1217 
	#XK_Cyrûlic_h¨dsign
 0x06d‡

	)

1218 
	#XK_Cyrûlic_YU
 0x06e0

	)

1219 
	#XK_Cyrûlic_A
 0x06e1

	)

1220 
	#XK_Cyrûlic_BE
 0x06e2

	)

1221 
	#XK_Cyrûlic_TSE
 0x06e3

	)

1222 
	#XK_Cyrûlic_DE
 0x06e4

	)

1223 
	#XK_Cyrûlic_IE
 0x06e5

	)

1224 
	#XK_Cyrûlic_EF
 0x06e6

	)

1225 
	#XK_Cyrûlic_GHE
 0x06e7

	)

1226 
	#XK_Cyrûlic_HA
 0x06e8

	)

1227 
	#XK_Cyrûlic_I
 0x06e9

	)

1228 
	#XK_Cyrûlic_SHORTI
 0x06ó

	)

1229 
	#XK_Cyrûlic_KA
 0x06eb

	)

1230 
	#XK_Cyrûlic_EL
 0x06e¯

	)

1231 
	#XK_Cyrûlic_EM
 0x06ed

	)

1232 
	#XK_Cyrûlic_EN
 0x06ì

	)

1233 
	#XK_Cyrûlic_O
 0x06e‡

	)

1234 
	#XK_Cyrûlic_PE
 0x06f0

	)

1235 
	#XK_Cyrûlic_YA
 0x06f1

	)

1236 
	#XK_Cyrûlic_ER
 0x06f2

	)

1237 
	#XK_Cyrûlic_ES
 0x06f3

	)

1238 
	#XK_Cyrûlic_TE
 0x06f4

	)

1239 
	#XK_Cyrûlic_U
 0x06f5

	)

1240 
	#XK_Cyrûlic_ZHE
 0x06f6

	)

1241 
	#XK_Cyrûlic_VE
 0x06f7

	)

1242 
	#XK_Cyrûlic_SOFTSIGN
 0x06f8

	)

1243 
	#XK_Cyrûlic_YERU
 0x06f9

	)

1244 
	#XK_Cyrûlic_ZE
 0x06Á

	)

1245 
	#XK_Cyrûlic_SHA
 0x06fb

	)

1246 
	#XK_Cyrûlic_E
 0x06f¯

	)

1247 
	#XK_Cyrûlic_SHCHA
 0x06fd

	)

1248 
	#XK_Cyrûlic_CHE
 0x06„

	)

1249 
	#XK_Cyrûlic_HARDSIGN
 0x06f‡

	)

1258 #ifde‡
XK_GREEK


1259 
	#XK_Gªek_ALPHAac˚¡
 0x07a1

	)

1260 
	#XK_Gªek_EPSILONac˚¡
 0x07a2

	)

1261 
	#XK_Gªek_ETAac˚¡
 0x07a3

	)

1262 
	#XK_Gªek_IOTAac˚¡
 0x07a4

	)

1263 
	#XK_Gªek_IOTAdõªsis
 0x07a5

	)

1264 
	#XK_Gªek_IOTAdüîesis
 0x07a5

	)

1265 
	#XK_Gªek_OMICRONac˚¡
 0x07a7

	)

1266 
	#XK_Gªek_UPSILONac˚¡
 0x07a8

	)

1267 
	#XK_Gªek_UPSILONdõªsis
 0x07a9

	)

1268 
	#XK_Gªek_OMEGAac˚¡
 0x07ab

	)

1269 
	#XK_Gªek_ac˚¡dõªsis
 0x07´

	)

1270 
	#XK_Gªek_h‹izb¨
 0x07a‡

	)

1271 
	#XK_Gªek_ÆphØc˚¡
 0x07b1

	)

1272 
	#XK_Gªek_ïsû⁄ac˚¡
 0x07b2

	)

1273 
	#XK_Gªek_ëØc˚¡
 0x07b3

	)

1274 
	#XK_Gªek_iŸØc˚¡
 0x07b4

	)

1275 
	#XK_Gªek_iŸadõªsis
 0x07b5

	)

1276 
	#XK_Gªek_iŸØc˚¡dõªsis
 0x07b6

	)

1277 
	#XK_Gªek_omi¸⁄ac˚¡
 0x07b7

	)

1278 
	#XK_Gªek_upsû⁄ac˚¡
 0x07b8

	)

1279 
	#XK_Gªek_upsû⁄dõªsis
 0x07b9

	)

1280 
	#XK_Gªek_upsû⁄ac˚¡dõªsis
 0x07b®

	)

1281 
	#XK_Gªek_omegØc˚¡
 0x07bb

	)

1282 
	#XK_Gªek_ALPHA
 0x07c1

	)

1283 
	#XK_Gªek_BETA
 0x07c2

	)

1284 
	#XK_Gªek_GAMMA
 0x07c3

	)

1285 
	#XK_Gªek_DELTA
 0x07c4

	)

1286 
	#XK_Gªek_EPSILON
 0x07c5

	)

1287 
	#XK_Gªek_ZETA
 0x07c6

	)

1288 
	#XK_Gªek_ETA
 0x07c7

	)

1289 
	#XK_Gªek_THETA
 0x07c8

	)

1290 
	#XK_Gªek_IOTA
 0x07c9

	)

1291 
	#XK_Gªek_KAPPA
 0x07ˇ

	)

1292 
	#XK_Gªek_LAMDA
 0x07cb

	)

1293 
	#XK_Gªek_LAMBDA
 0x07cb

	)

1294 
	#XK_Gªek_MU
 0x07c¯

	)

1295 
	#XK_Gªek_NU
 0x07cd

	)

1296 
	#XK_Gªek_XI
 0x07˚

	)

1297 
	#XK_Gªek_OMICRON
 0x07c‡

	)

1298 
	#XK_Gªek_PI
 0x07d0

	)

1299 
	#XK_Gªek_RHO
 0x07d1

	)

1300 
	#XK_Gªek_SIGMA
 0x07d2

	)

1301 
	#XK_Gªek_TAU
 0x07d4

	)

1302 
	#XK_Gªek_UPSILON
 0x07d5

	)

1303 
	#XK_Gªek_PHI
 0x07d6

	)

1304 
	#XK_Gªek_CHI
 0x07d7

	)

1305 
	#XK_Gªek_PSI
 0x07d8

	)

1306 
	#XK_Gªek_OMEGA
 0x07d9

	)

1307 
	#XK_Gªek_Æpha
 0x07e1

	)

1308 
	#XK_Gªek_bëa
 0x07e2

	)

1309 
	#XK_Gªek_gamma
 0x07e3

	)

1310 
	#XK_Gªek_dñè
 0x07e4

	)

1311 
	#XK_Gªek_ïsû⁄
 0x07e5

	)

1312 
	#XK_Gªek_zëa
 0x07e6

	)

1313 
	#XK_Gªek_ëa
 0x07e7

	)

1314 
	#XK_Gªek_thëa
 0x07e8

	)

1315 
	#XK_Gªek_iŸa
 0x07e9

	)

1316 
	#XK_Gªek_k≠∑
 0x07ó

	)

1317 
	#XK_Gªek_œmda
 0x07eb

	)

1318 
	#XK_Gªek_œmbda
 0x07eb

	)

1319 
	#XK_Gªek_mu
 0x07e¯

	)

1320 
	#XK_Gªek_nu
 0x07ed

	)

1321 
	#XK_Gªek_xi
 0x07ì

	)

1322 
	#XK_Gªek_omi¸⁄
 0x07e‡

	)

1323 
	#XK_Gªek_pi
 0x07f0

	)

1324 
	#XK_Gªek_rho
 0x07f1

	)

1325 
	#XK_Gªek_sigma
 0x07f2

	)

1326 
	#XK_Gªek_föÆsmÆlsigma
 0x07f3

	)

1327 
	#XK_Gªek_èu
 0x07f4

	)

1328 
	#XK_Gªek_upsû⁄
 0x07f5

	)

1329 
	#XK_Gªek_phi
 0x07f6

	)

1330 
	#XK_Gªek_chi
 0x07f7

	)

1331 
	#XK_Gªek_psi
 0x07f8

	)

1332 
	#XK_Gªek_omega
 0x07f9

	)

1333 
	#XK_Gªek_swôch
 0xff7ê

	)

1342 #ifde‡
XK_TECHNICAL


1343 
	#XK_À·ødiˇl
 0x08a1

	)

1344 
	#XK_t›À·ødiˇl
 0x08a2

	)

1345 
	#XK_h‹izc⁄√˘‹
 0x08a3

	)

1346 
	#XK_t›öãgøl
 0x08a4

	)

1347 
	#XK_bŸöãgøl
 0x08a5

	)

1348 
	#XK_vîtc⁄√˘‹
 0x08a6

	)

1349 
	#XK_t›À·sqbøckë
 0x08a7

	)

1350 
	#XK_bŸÀ·sqbøckë
 0x08a8

	)

1351 
	#XK_t›rightsqbøckë
 0x08a9

	)

1352 
	#XK_bŸrightsqbøckë
 0x08Ø

	)

1353 
	#XK_t›À·∑ªns
 0x08ab

	)

1354 
	#XK_bŸÀ·∑ªns
 0x08a¯

	)

1355 
	#XK_t›righç¨ís
 0x08ad

	)

1356 
	#XK_bŸrighç¨ís
 0x08´

	)

1357 
	#XK_À·middÀcuæybø˚
 0x08a‡

	)

1358 
	#XK_rightmiddÀcuæybø˚
 0x08b0

	)

1359 
	#XK_t›À·summ©i⁄
 0x08b1

	)

1360 
	#XK_bŸÀ·summ©i⁄
 0x08b2

	)

1361 
	#XK_t›vîtsumm©i⁄c⁄√˘‹
 0x08b3

	)

1362 
	#XK_bŸvîtsumm©i⁄c⁄√˘‹
 0x08b4

	)

1363 
	#XK_t›rightsumm©i⁄
 0x08b5

	)

1364 
	#XK_bŸrightsumm©i⁄
 0x08b6

	)

1365 
	#XK_rightmiddÀsumm©i⁄
 0x08b7

	)

1366 
	#XK_Às°h™equÆ
 0x08b¯

	)

1367 
	#XK_nŸequÆ
 0x08bd

	)

1368 
	#XK_gª©îth™equÆ
 0x08bê

	)

1369 
	#XK_öãgøl
 0x08b‡

	)

1370 
	#XK_thîef‹e
 0x08c0

	)

1371 
	#XK_v¨üti⁄
 0x08c1

	)

1372 
	#XK_öföôy
 0x08c2

	)

1373 
	#XK_«bœ
 0x08c5

	)

1374 
	#XK_≠¥oxim©e
 0x08c8

	)

1375 
	#XK_simû¨equÆ
 0x08c9

	)

1376 
	#XK_if⁄lyif
 0x08cd

	)

1377 
	#XK_im∂õs
 0x08˚

	)

1378 
	#XK_idítiˇl
 0x08c‡

	)

1379 
	#XK_ødiˇl
 0x08d6

	)

1380 
	#XK_ö˛udedö
 0x08d®

	)

1381 
	#XK_ö˛udes
 0x08db

	)

1382 
	#XK_öãr£˘i⁄
 0x08d¯

	)

1383 
	#XK_uni⁄
 0x08dd

	)

1384 
	#XK_logiˇœnd
 0x08dê

	)

1385 
	#XK_logiˇl‹
 0x08d‡

	)

1386 
	#XK_∑πüldîiv©ive
 0x08e‡

	)

1387 
	#XK_fun˘i⁄
 0x08f6

	)

1388 
	#XK_À·¨row
 0x08fb

	)

1389 
	#XK_u∑ºow
 0x08f¯

	)

1390 
	#XK_righèºow
 0x08fd

	)

1391 
	#XK_dow«ºow
 0x08„

	)

1400 #ifde‡
XK_SPECIAL


1401 
	#XK_bœnk
 0x09df

	)

1402 
	#XK_sﬁiddüm⁄d
 0x09e0

	)

1403 
	#XK_checkîbﬂrd
 0x09e1

	)

1404 
	#XK_ht
 0x09e2

	)

1405 
	#XK_ff
 0x09e3

	)

1406 
	#XK_¸
 0x09e4

	)

1407 
	#XK_lf
 0x09e5

	)

1408 
	#XK_∆
 0x09e8

	)

1409 
	#XK_vt
 0x09e9

	)

1410 
	#XK_lowrightc‹√r
 0x09ó

	)

1411 
	#XK_u¥ightc‹√r
 0x09eb

	)

1412 
	#XK_u∂e·c‹√r
 0x09e¯

	)

1413 
	#XK_lowÀ·c‹√r
 0x09ed

	)

1414 
	#XK_¸ossöglöes
 0x09ì

	)

1415 
	#XK_h‹izlöesˇn1
 0x09e‡

	)

1416 
	#XK_h‹izlöesˇn3
 0x09f0

	)

1417 
	#XK_h‹izlöesˇn5
 0x09f1

	)

1418 
	#XK_h‹izlöesˇn7
 0x09f2

	)

1419 
	#XK_h‹izlöesˇn9
 0x09f3

	)

1420 
	#XK_À·t
 0x09f4

	)

1421 
	#XK_righâ
 0x09f5

	)

1422 
	#XK_bŸt
 0x09f6

	)

1423 
	#XK_t›t
 0x09f7

	)

1424 
	#XK_vîtb¨
 0x09f8

	)

1434 #ifde‡
XK_PUBLISHING


1435 
	#XK_em•a˚
 0x0Ø1

	)

1436 
	#XK_í•a˚
 0x0Ø2

	)

1437 
	#XK_em3•a˚
 0x0Ø3

	)

1438 
	#XK_em4•a˚
 0x0Ø4

	)

1439 
	#XK_digô•a˚
 0x0Ø5

	)

1440 
	#XK_pun˘•a˚
 0x0Ø6

	)

1441 
	#XK_thö•a˚
 0x0Ø7

	)

1442 
	#XK_haú•a˚
 0x0Ø8

	)

1443 
	#XK_emdash
 0x0Ø9

	)

1444 
	#XK_ídash
 0x0Ø®

	)

1445 
	#XK_signifbœnk
 0x0Ø¯

	)

1446 
	#XK_ñlùsis
 0x0Øê

	)

1447 
	#XK_doubba£löedŸ
 0x0Ø‡

	)

1448 
	#XK_⁄ëhúd
 0x0ab0

	)

1449 
	#XK_twŸhúds
 0x0ab1

	)

1450 
	#XK_⁄efi·h
 0x0ab2

	)

1451 
	#XK_twofi·hs
 0x0ab3

	)

1452 
	#XK_thªefi·hs
 0x0ab4

	)

1453 
	#XK_fourfi·hs
 0x0ab5

	)

1454 
	#XK_⁄esixth
 0x0ab6

	)

1455 
	#XK_fivesixths
 0x0ab7

	)

1456 
	#XK_ˇªof
 0x0ab8

	)

1457 
	#XK_figdash
 0x0abb

	)

1458 
	#XK_À·™gÀbøckë
 0x0ab¯

	)

1459 
	#XK_decimÆpoöt
 0x0abd

	)

1460 
	#XK_righèngÀbøckë
 0x0abê

	)

1461 
	#XK_m¨kî
 0x0abf

	)

1462 
	#XK_⁄ìighth
 0x0ac3

	)

1463 
	#XK_thªìighths
 0x0ac4

	)

1464 
	#XK_fivìighths
 0x0ac5

	)

1465 
	#XK_£víeighths
 0x0ac6

	)

1466 
	#XK_åadem¨k
 0x0ac9

	)

1467 
	#XK_sig«tuªm¨k
 0x0aˇ

	)

1468 
	#XK_åadem¨köcú˛e
 0x0acb

	)

1469 
	#XK_À·›íåüngÀ
 0x0ac¯

	)

1470 
	#XK_right›íåüngÀ
 0x0acd

	)

1471 
	#XK_em›ícú˛e
 0x0a˚

	)

1472 
	#XK_em›íª˘™gÀ
 0x0ac‡

	)

1473 
	#XK_À·sögÀquŸem¨k
 0x0ad0

	)

1474 
	#XK_rightsögÀquŸem¨k
 0x0ad1

	)

1475 
	#XK_À·doubÀquŸem¨k
 0x0ad2

	)

1476 
	#XK_rightdoubÀquŸem¨k
 0x0ad3

	)

1477 
	#XK_¥es¸ùti⁄
 0x0ad4

	)

1478 
	#XK_≥rmûÀ
 0x0ad5

	)

1479 
	#XK_möuãs
 0x0ad6

	)

1480 
	#XK_£c⁄ds
 0x0ad7

	)

1481 
	#XK_œtö¸oss
 0x0ad9

	)

1482 
	#XK_hexagøm
 0x0ada

	)

1483 
	#XK_fûÀdª˘buŒë
 0x0adb

	)

1484 
	#XK_fûÀdÀ·åibuŒë
 0x0ad¯

	)

1485 
	#XK_fûÀdrighâribuŒë
 0x0add

	)

1486 
	#XK_emfûÀdcú˛e
 0x0adê

	)

1487 
	#XK_emfûÀdª˘
 0x0ad‡

	)

1488 
	#XK_í›ícúcbuŒë
 0x0´0

	)

1489 
	#XK_í›ísqu¨ebuŒë
 0x0´1

	)

1490 
	#XK_›íª˘buŒë
 0x0´2

	)

1491 
	#XK_›íåibuŒëup
 0x0´3

	)

1492 
	#XK_›íåibuŒëdown
 0x0´4

	)

1493 
	#XK_›í°¨
 0x0´5

	)

1494 
	#XK_ífûÀdcúcbuŒë
 0x0´6

	)

1495 
	#XK_ífûÀdsqbuŒë
 0x0´7

	)

1496 
	#XK_fûÀdåibuŒëup
 0x0´8

	)

1497 
	#XK_fûÀdåibuŒëdown
 0x0´9

	)

1498 
	#XK_À·poöãr
 0x0´®

	)

1499 
	#XK_righçoöãr
 0x0´b

	)

1500 
	#XK_˛ub
 0x0´¯

	)

1501 
	#XK_düm⁄d
 0x0´d

	)

1502 
	#XK_hóπ
 0x0´ê

	)

1503 
	#XK_mÆã£¸oss
 0x0af0

	)

1504 
	#XK_daggî
 0x0af1

	)

1505 
	#XK_doubÀdaggî
 0x0af2

	)

1506 
	#XK_checkm¨k
 0x0af3

	)

1507 
	#XK_bÆlŸ¸oss
 0x0af4

	)

1508 
	#XK_musiˇlsh¨p
 0x0af5

	)

1509 
	#XK_musiˇlÊ©
 0x0af6

	)

1510 
	#XK_mÆesymbﬁ
 0x0af7

	)

1511 
	#XK_„mÆesymbﬁ
 0x0af8

	)

1512 
	#XK_ãÀph⁄e
 0x0af9

	)

1513 
	#XK_ãÀph⁄îec‹dî
 0x0aÁ

	)

1514 
	#XK_ph⁄ogøphc›yright
 0x0afb

	)

1515 
	#XK_ˇªt
 0x0af¯

	)

1516 
	#XK_sögÀlowquŸem¨k
 0x0afd

	)

1517 
	#XK_doubÀlowquŸem¨k
 0x0a„

	)

1518 
	#XK_curs‹
 0x0aff

	)

1526 #ifde‡
XK_APL


1527 
	#XK_À·ˇªt
 0x0ba3

	)

1528 
	#XK_rightˇªt
 0x0ba6

	)

1529 
	#XK_downˇªt
 0x0ba8

	)

1530 
	#XK_upˇªt
 0x0ba9

	)

1531 
	#XK_ovîb¨
 0x0bc0

	)

1532 
	#XK_dow¡ack
 0x0bc2

	)

1533 
	#XK_upsh€
 0x0bc3

	)

1534 
	#XK_down°ûe
 0x0bc4

	)

1535 
	#XK_undîb¨
 0x0bc6

	)

1536 
	#XK_jŸ
 0x0bˇ

	)

1537 
	#XK_quad
 0x0bc¯

	)

1538 
	#XK_u±ack
 0x0b˚

	)

1539 
	#XK_cú˛e
 0x0bc‡

	)

1540 
	#XK_up°ûe
 0x0bd3

	)

1541 
	#XK_downsh€
 0x0bd6

	)

1542 
	#XK_rightsh€
 0x0bd8

	)

1543 
	#XK_À·sh€
 0x0bd®

	)

1544 
	#XK_À·èck
 0x0bd¯

	)

1545 
	#XK_righâack
 0x0bf¯

	)

1553 #ifde‡
XK_HEBREW


1554 
	#XK_hebªw_doubÀlowlöe
 0x0cd‡

	)

1555 
	#XK_hebªw_Æïh
 0x0˚0

	)

1556 
	#XK_hebªw_bë
 0x0˚1

	)

1557 
	#XK_hebªw_bëh
 0x0˚1

	)

1558 
	#XK_hebªw_gimñ
 0x0˚2

	)

1559 
	#XK_hebªw_gimmñ
 0x0˚2

	)

1560 
	#XK_hebªw_dÆë
 0x0˚3

	)

1561 
	#XK_hebªw_dÆëh
 0x0˚3

	)

1562 
	#XK_hebªw_he
 0x0˚4

	)

1563 
	#XK_hebªw_waw
 0x0˚5

	)

1564 
	#XK_hebªw_zaö
 0x0˚6

	)

1565 
	#XK_hebªw_zayö
 0x0˚6

	)

1566 
	#XK_hebªw_chë
 0x0˚7

	)

1567 
	#XK_hebªw_hë
 0x0˚7

	)

1568 
	#XK_hebªw_ãt
 0x0˚8

	)

1569 
	#XK_hebªw_ãth
 0x0˚8

	)

1570 
	#XK_hebªw_yod
 0x0˚9

	)

1571 
	#XK_hebªw_föÆk≠h
 0x0˚®

	)

1572 
	#XK_hebªw_k≠h
 0x0˚b

	)

1573 
	#XK_hebªw_œmed
 0x0˚¯

	)

1574 
	#XK_hebªw_föÆmem
 0x0˚d

	)

1575 
	#XK_hebªw_mem
 0x0˚ê

	)

1576 
	#XK_hebªw_föÆnun
 0x0˚‡

	)

1577 
	#XK_hebªw_nun
 0x0cf0

	)

1578 
	#XK_hebªw_ßmech
 0x0cf1

	)

1579 
	#XK_hebªw_ßmekh
 0x0cf1

	)

1580 
	#XK_hebªw_ayö
 0x0cf2

	)

1581 
	#XK_hebªw_föÆ≥
 0x0cf3

	)

1582 
	#XK_hebªw_≥
 0x0cf4

	)

1583 
	#XK_hebªw_föÆzade
 0x0cf5

	)

1584 
	#XK_hebªw_föÆzadi
 0x0cf5

	)

1585 
	#XK_hebªw_zade
 0x0cf6

	)

1586 
	#XK_hebªw_zadi
 0x0cf6

	)

1587 
	#XK_hebªw_q›h
 0x0cf7

	)

1588 
	#XK_hebªw_kuf
 0x0cf7

	)

1589 
	#XK_hebªw_ªsh
 0x0cf8

	)

1590 
	#XK_hebªw_shö
 0x0cf9

	)

1591 
	#XK_hebªw_èw
 0x0cÁ

	)

1592 
	#XK_hebªw_èf
 0x0cÁ

	)

1593 
	#XK_Hebªw_swôch
 0xff7ê

	)

1601 #ifde‡
XK_THAI


1602 
	#XK_Thai_kokai
 0x0da1

	)

1603 
	#XK_Thai_khokhai
 0x0da2

	)

1604 
	#XK_Thai_khokhu©
 0x0da3

	)

1605 
	#XK_Thai_khokhwai
 0x0da4

	)

1606 
	#XK_Thai_khokh⁄
 0x0da5

	)

1607 
	#XK_Thai_kh‹akh™g
 0x0da6

	)

1608 
	#XK_Thai_ng⁄gu
 0x0da7

	)

1609 
	#XK_Thai_choch™
 0x0da8

	)

1610 
	#XK_Thai_chochög
 0x0da9

	)

1611 
	#XK_Thai_choch™g
 0x0dØ

	)

1612 
	#XK_Thai_soso
 0x0dab

	)

1613 
	#XK_Thai_choch€
 0x0da¯

	)

1614 
	#XK_Thai_yoyög
 0x0dad

	)

1615 
	#XK_Thai_dochada
 0x0d´

	)

1616 
	#XK_Thai_t›©ak
 0x0da‡

	)

1617 
	#XK_Thai_thŸh™
 0x0db0

	)

1618 
	#XK_Thai_th⁄™gm⁄tho
 0x0db1

	)

1619 
	#XK_Thai_th›huthao
 0x0db2

	)

1620 
	#XK_Thai_n⁄í
 0x0db3

	)

1621 
	#XK_Thai_dodek
 0x0db4

	)

1622 
	#XK_Thai_tŸao
 0x0db5

	)

1623 
	#XK_Thai_thŸhung
 0x0db6

	)

1624 
	#XK_Thai_thŸhah™
 0x0db7

	)

1625 
	#XK_Thai_thŸh⁄g
 0x0db8

	)

1626 
	#XK_Thai_n⁄u
 0x0db9

	)

1627 
	#XK_Thai_bobaimai
 0x0db®

	)

1628 
	#XK_Thai_p›œ
 0x0dbb

	)

1629 
	#XK_Thai_ph›hung
 0x0db¯

	)

1630 
	#XK_Thai_foÁ
 0x0dbd

	)

1631 
	#XK_Thai_ph›h™
 0x0dbê

	)

1632 
	#XK_Thai_foÁn
 0x0db‡

	)

1633 
	#XK_Thai_phoßmphao
 0x0dc0

	)

1634 
	#XK_Thai_moma
 0x0dc1

	)

1635 
	#XK_Thai_yoyak
 0x0dc2

	)

1636 
	#XK_Thai_r‹ua
 0x0dc3

	)

1637 
	#XK_Thai_ru
 0x0dc4

	)

1638 
	#XK_Thai_lﬁög
 0x0dc5

	)

1639 
	#XK_Thai_lu
 0x0dc6

	)

1640 
	#XK_Thai_wow´n
 0x0dc7

	)

1641 
	#XK_Thai_soßœ
 0x0dc8

	)

1642 
	#XK_Thai_s‹usi
 0x0dc9

	)

1643 
	#XK_Thai_sosua
 0x0dˇ

	)

1644 
	#XK_Thai_hohù
 0x0dcb

	)

1645 
	#XK_Thai_lochuœ
 0x0dc¯

	)

1646 
	#XK_Thai_ﬂng
 0x0dcd

	)

1647 
	#XK_Thai_h⁄okhuk
 0x0d˚

	)

1648 
	#XK_Thai_∑iy™noi
 0x0dc‡

	)

1649 
	#XK_Thai_ßøa
 0x0dd0

	)

1650 
	#XK_Thai_maih™ak©
 0x0dd1

	)

1651 
	#XK_Thai_ßøØ
 0x0dd2

	)

1652 
	#XK_Thai_ßøam
 0x0dd3

	)

1653 
	#XK_Thai_ßøi
 0x0dd4

	)

1654 
	#XK_Thai_ßøii
 0x0dd5

	)

1655 
	#XK_Thai_ßøue
 0x0dd6

	)

1656 
	#XK_Thai_ßøuì
 0x0dd7

	)

1657 
	#XK_Thai_ßøu
 0x0dd8

	)

1658 
	#XK_Thai_ßøuu
 0x0dd9

	)

1659 
	#XK_Thai_phöthu
 0x0dd®

	)

1660 
	#XK_Thai_maih™ak©_maôho
 0x0dde

	)

1661 
	#XK_Thai_baht
 0x0dd‡

	)

1662 
	#XK_Thai_ßøe
 0x0de0

	)

1663 
	#XK_Thai_ßø´
 0x0de1

	)

1664 
	#XK_Thai_ßøo
 0x0de2

	)

1665 
	#XK_Thai_ßøaimaimu™
 0x0de3

	)

1666 
	#XK_Thai_ßøaimaimÆai
 0x0de4

	)

1667 
	#XK_Thai_œkkh™gyao
 0x0de5

	)

1668 
	#XK_Thai_maiyamok
 0x0de6

	)

1669 
	#XK_Thai_maôaikhu
 0x0de7

	)

1670 
	#XK_Thai_maõk
 0x0de8

	)

1671 
	#XK_Thai_maôho
 0x0de9

	)

1672 
	#XK_Thai_maôri
 0x0dó

	)

1673 
	#XK_Thai_maich©èwa
 0x0deb

	)

1674 
	#XK_Thai_th™thakh©
 0x0de¯

	)

1675 
	#XK_Thai_nikhahô
 0x0ded

	)

1676 
	#XK_Thai_Àksun
 0x0df0

	)

1677 
	#XK_Thai_Àknung
 0x0df1

	)

1678 
	#XK_Thai_Àks⁄g
 0x0df2

	)

1679 
	#XK_Thai_Àkßm
 0x0df3

	)

1680 
	#XK_Thai_Àksi
 0x0df4

	)

1681 
	#XK_Thai_Àkha
 0x0df5

	)

1682 
	#XK_Thai_Àkhok
 0x0df6

	)

1683 
	#XK_Thai_Àkchë
 0x0df7

	)

1684 
	#XK_Thai_Àk∑ë
 0x0df8

	)

1685 
	#XK_Thai_Àkkao
 0x0df9

	)

1693 #ifde‡
XK_KOREAN


1695 
	#XK_H™gul
 0xff31

	)

1696 
	#XK_H™gul_Sèπ
 0xff32

	)

1697 
	#XK_H™gul_End
 0xff33

	)

1698 
	#XK_H™gul_H™ja
 0xff34

	)

1699 
	#XK_H™gul_Jamo
 0xff35

	)

1700 
	#XK_H™gul_Romaja
 0xff36

	)

1701 
	#XK_H™gul_Codeöput
 0xff37

	)

1702 
	#XK_H™gul_Je⁄ja
 0xff38

	)

1703 
	#XK_H™gul_B™ja
 0xff39

	)

1704 
	#XK_H™gul_PªH™ja
 0xff3®

	)

1705 
	#XK_H™gul_Po°H™ja
 0xff3b

	)

1706 
	#XK_H™gul_SögÀC™did©e
 0xff3¯

	)

1707 
	#XK_H™gul_Mu…ùÀC™did©e
 0xff3d

	)

1708 
	#XK_H™gul_PªviousC™did©e
 0xff3ê

	)

1709 
	#XK_H™gul_S≥cül
 0xff3‡

	)

1710 
	#XK_H™gul_swôch
 0xff7ê

	)

1713 
	#XK_H™gul_Kiyeog
 0x0ó1

	)

1714 
	#XK_H™gul_SßngKiyeog
 0x0ó2

	)

1715 
	#XK_H™gul_KiyeogSios
 0x0ó3

	)

1716 
	#XK_H™gul_Nõun
 0x0ó4

	)

1717 
	#XK_H™gul_NõunJõuj
 0x0ó5

	)

1718 
	#XK_H™gul_NõunHõuh
 0x0ó6

	)

1719 
	#XK_H™gul_Dikeud
 0x0ó7

	)

1720 
	#XK_H™gul_SßngDikeud
 0x0ó8

	)

1721 
	#XK_H™gul_Rõul
 0x0ó9

	)

1722 
	#XK_H™gul_RõulKiyeog
 0x0óa

	)

1723 
	#XK_H™gul_RõulMõum
 0x0ób

	)

1724 
	#XK_H™gul_RõulPõub
 0x0óc

	)

1725 
	#XK_H™gul_RõulSios
 0x0ód

	)

1726 
	#XK_H™gul_RõulTõut
 0x0óe

	)

1727 
	#XK_H™gul_RõulPhõuf
 0x0óf

	)

1728 
	#XK_H™gul_RõulHõuh
 0x0eb0

	)

1729 
	#XK_H™gul_Mõum
 0x0eb1

	)

1730 
	#XK_H™gul_Põub
 0x0eb2

	)

1731 
	#XK_H™gul_SßngPõub
 0x0eb3

	)

1732 
	#XK_H™gul_PõubSios
 0x0eb4

	)

1733 
	#XK_H™gul_Sios
 0x0eb5

	)

1734 
	#XK_H™gul_SßngSios
 0x0eb6

	)

1735 
	#XK_H™gul_Ieung
 0x0eb7

	)

1736 
	#XK_H™gul_Jõuj
 0x0eb8

	)

1737 
	#XK_H™gul_SßngJõuj
 0x0eb9

	)

1738 
	#XK_H™gul_Cõuc
 0x0eba

	)

1739 
	#XK_H™gul_Khõuq
 0x0ebb

	)

1740 
	#XK_H™gul_Tõut
 0x0ebc

	)

1741 
	#XK_H™gul_Phõuf
 0x0ebd

	)

1742 
	#XK_H™gul_Hõuh
 0x0ebe

	)

1745 
	#XK_H™gul_A
 0x0ebf

	)

1746 
	#XK_H™gul_AE
 0x0ec0

	)

1747 
	#XK_H™gul_YA
 0x0ec1

	)

1748 
	#XK_H™gul_YAE
 0x0ec2

	)

1749 
	#XK_H™gul_EO
 0x0ec3

	)

1750 
	#XK_H™gul_E
 0x0ec4

	)

1751 
	#XK_H™gul_YEO
 0x0ec5

	)

1752 
	#XK_H™gul_YE
 0x0ec6

	)

1753 
	#XK_H™gul_O
 0x0ec7

	)

1754 
	#XK_H™gul_WA
 0x0ec8

	)

1755 
	#XK_H™gul_WAE
 0x0ec9

	)

1756 
	#XK_H™gul_OE
 0x0eˇ

	)

1757 
	#XK_H™gul_YO
 0x0ecb

	)

1758 
	#XK_H™gul_U
 0x0ecc

	)

1759 
	#XK_H™gul_WEO
 0x0ecd

	)

1760 
	#XK_H™gul_WE
 0x0e˚

	)

1761 
	#XK_H™gul_WI
 0x0ecf

	)

1762 
	#XK_H™gul_YU
 0x0ed0

	)

1763 
	#XK_H™gul_EU
 0x0ed1

	)

1764 
	#XK_H™gul_YI
 0x0ed2

	)

1765 
	#XK_H™gul_I
 0x0ed3

	)

1768 
	#XK_H™gul_J_Kiyeog
 0x0ed4

	)

1769 
	#XK_H™gul_J_SßngKiyeog
 0x0ed5

	)

1770 
	#XK_H™gul_J_KiyeogSios
 0x0ed6

	)

1771 
	#XK_H™gul_J_Nõun
 0x0ed7

	)

1772 
	#XK_H™gul_J_NõunJõuj
 0x0ed8

	)

1773 
	#XK_H™gul_J_NõunHõuh
 0x0ed9

	)

1774 
	#XK_H™gul_J_Dikeud
 0x0eda

	)

1775 
	#XK_H™gul_J_Rõul
 0x0edb

	)

1776 
	#XK_H™gul_J_RõulKiyeog
 0x0edc

	)

1777 
	#XK_H™gul_J_RõulMõum
 0x0edd

	)

1778 
	#XK_H™gul_J_RõulPõub
 0x0ede

	)

1779 
	#XK_H™gul_J_RõulSios
 0x0edf

	)

1780 
	#XK_H™gul_J_RõulTõut
 0x0ì0

	)

1781 
	#XK_H™gul_J_RõulPhõuf
 0x0ì1

	)

1782 
	#XK_H™gul_J_RõulHõuh
 0x0ì2

	)

1783 
	#XK_H™gul_J_Mõum
 0x0ì3

	)

1784 
	#XK_H™gul_J_Põub
 0x0ì4

	)

1785 
	#XK_H™gul_J_PõubSios
 0x0ì5

	)

1786 
	#XK_H™gul_J_Sios
 0x0ì6

	)

1787 
	#XK_H™gul_J_SßngSios
 0x0ì7

	)

1788 
	#XK_H™gul_J_Ieung
 0x0ì8

	)

1789 
	#XK_H™gul_J_Jõuj
 0x0ì9

	)

1790 
	#XK_H™gul_J_Cõuc
 0x0ìa

	)

1791 
	#XK_H™gul_J_Khõuq
 0x0ìb

	)

1792 
	#XK_H™gul_J_Tõut
 0x0ìc

	)

1793 
	#XK_H™gul_J_Phõuf
 0x0ìd

	)

1794 
	#XK_H™gul_J_Hõuh
 0x0ìe

	)

1797 
	#XK_H™gul_RõulYe‹öHõuh
 0x0ìf

	)

1798 
	#XK_H™gul_Sunkye⁄geumMõum
 0x0ef0

	)

1799 
	#XK_H™gul_Sunkye⁄geumPõub
 0x0ef1

	)

1800 
	#XK_H™gul_P™Sios
 0x0ef2

	)

1801 
	#XK_H™gul_KkogjiDÆröIeung
 0x0ef3

	)

1802 
	#XK_H™gul_Sunkye⁄geumPhõuf
 0x0ef4

	)

1803 
	#XK_H™gul_Ye‹öHõuh
 0x0ef5

	)

1806 
	#XK_H™gul_AøeA
 0x0ef6

	)

1807 
	#XK_H™gul_AøeAE
 0x0ef7

	)

1810 
	#XK_H™gul_J_P™Sios
 0x0ef8

	)

1811 
	#XK_H™gul_J_KkogjiDÆröIeung
 0x0ef9

	)

1812 
	#XK_H™gul_J_Ye‹öHõuh
 0x0eÁ

	)

1815 
	#XK_K‹ón_W⁄
 0x0ef‡

	)

1823 #ifde‡
XK_ARMENIAN


1824 
	#XK_Armíün_lig©uª_ew
 0x1000587

	)

1825 
	#XK_Armíün_fuŒ_°›
 0x1000589

	)

1826 
	#XK_Armíün_vîjakë
 0x1000589

	)

1827 
	#XK_Armíün_£∑øti⁄_m¨k
 0x100055d

	)

1828 
	#XK_Armíün_but
 0x100055d

	)

1829 
	#XK_Armíün_hyphí
 0x100058®

	)

1830 
	#XK_Armíün_yíèm«
 0x100058®

	)

1831 
	#XK_Armíün_ex˛am
 0x100055¯

	)

1832 
	#XK_Armíün_am™ak
 0x100055¯

	)

1833 
	#XK_Armíün_ac˚¡
 0x100055b

	)

1834 
	#XK_Armíün_shesht
 0x100055b

	)

1835 
	#XK_Armíün_que°i⁄
 0x100055ê

	)

1836 
	#XK_Armíün_∑ruyk
 0x100055ê

	)

1837 
	#XK_Armíün_AYB
 0x1000531

	)

1838 
	#XK_Armíün_ayb
 0x1000561

	)

1839 
	#XK_Armíün_BEN
 0x1000532

	)

1840 
	#XK_Armíün_bí
 0x1000562

	)

1841 
	#XK_Armíün_GIM
 0x1000533

	)

1842 
	#XK_Armíün_gim
 0x1000563

	)

1843 
	#XK_Armíün_DA
 0x1000534

	)

1844 
	#XK_Armíün_da
 0x1000564

	)

1845 
	#XK_Armíün_YECH
 0x1000535

	)

1846 
	#XK_Armíün_yech
 0x1000565

	)

1847 
	#XK_Armíün_ZA
 0x1000536

	)

1848 
	#XK_Armíün_za
 0x1000566

	)

1849 
	#XK_Armíün_E
 0x1000537

	)

1850 
	#XK_Armíün_e
 0x1000567

	)

1851 
	#XK_Armíün_AT
 0x1000538

	)

1852 
	#XK_Armíün_©
 0x1000568

	)

1853 
	#XK_Armíün_TO
 0x1000539

	)

1854 
	#XK_Armíün_to
 0x1000569

	)

1855 
	#XK_Armíün_ZHE
 0x100053®

	)

1856 
	#XK_Armíün_zhe
 0x100056®

	)

1857 
	#XK_Armíün_INI
 0x100053b

	)

1858 
	#XK_Armíün_öi
 0x100056b

	)

1859 
	#XK_Armíün_LYUN
 0x100053¯

	)

1860 
	#XK_Armíün_lyun
 0x100056¯

	)

1861 
	#XK_Armíün_KHE
 0x100053d

	)

1862 
	#XK_Armíün_khe
 0x100056d

	)

1863 
	#XK_Armíün_TSA
 0x100053ê

	)

1864 
	#XK_Armíün_tß
 0x100056ê

	)

1865 
	#XK_Armíün_KEN
 0x100053‡

	)

1866 
	#XK_Armíün_kí
 0x100056‡

	)

1867 
	#XK_Armíün_HO
 0x1000540

	)

1868 
	#XK_Armíün_ho
 0x1000570

	)

1869 
	#XK_Armíün_DZA
 0x1000541

	)

1870 
	#XK_Armíün_dza
 0x1000571

	)

1871 
	#XK_Armíün_GHAT
 0x1000542

	)

1872 
	#XK_Armíün_gh©
 0x1000572

	)

1873 
	#XK_Armíün_TCHE
 0x1000543

	)

1874 
	#XK_Armíün_tche
 0x1000573

	)

1875 
	#XK_Armíün_MEN
 0x1000544

	)

1876 
	#XK_Armíün_mí
 0x1000574

	)

1877 
	#XK_Armíün_HI
 0x1000545

	)

1878 
	#XK_Armíün_hi
 0x1000575

	)

1879 
	#XK_Armíün_NU
 0x1000546

	)

1880 
	#XK_Armíün_nu
 0x1000576

	)

1881 
	#XK_Armíün_SHA
 0x1000547

	)

1882 
	#XK_Armíün_sha
 0x1000577

	)

1883 
	#XK_Armíün_VO
 0x1000548

	)

1884 
	#XK_Armíün_vo
 0x1000578

	)

1885 
	#XK_Armíün_CHA
 0x1000549

	)

1886 
	#XK_Armíün_cha
 0x1000579

	)

1887 
	#XK_Armíün_PE
 0x100054®

	)

1888 
	#XK_Armíün_≥
 0x100057®

	)

1889 
	#XK_Armíün_JE
 0x100054b

	)

1890 
	#XK_Armíün_je
 0x100057b

	)

1891 
	#XK_Armíün_RA
 0x100054¯

	)

1892 
	#XK_Armíün_ø
 0x100057¯

	)

1893 
	#XK_Armíün_SE
 0x100054d

	)

1894 
	#XK_Armíün_£
 0x100057d

	)

1895 
	#XK_Armíün_VEV
 0x100054ê

	)

1896 
	#XK_Armíün_vev
 0x100057ê

	)

1897 
	#XK_Armíün_TYUN
 0x100054‡

	)

1898 
	#XK_Armíün_tyun
 0x100057‡

	)

1899 
	#XK_Armíün_RE
 0x1000550

	)

1900 
	#XK_Armíün_ª
 0x1000580

	)

1901 
	#XK_Armíün_TSO
 0x1000551

	)

1902 
	#XK_Armíün_tso
 0x1000581

	)

1903 
	#XK_Armíün_VYUN
 0x1000552

	)

1904 
	#XK_Armíün_vyun
 0x1000582

	)

1905 
	#XK_Armíün_PYUR
 0x1000553

	)

1906 
	#XK_Armíün_pyur
 0x1000583

	)

1907 
	#XK_Armíün_KE
 0x1000554

	)

1908 
	#XK_Armíün_ke
 0x1000584

	)

1909 
	#XK_Armíün_O
 0x1000555

	)

1910 
	#XK_Armíün_o
 0x1000585

	)

1911 
	#XK_Armíün_FE
 0x1000556

	)

1912 
	#XK_Armíün_„
 0x1000586

	)

1913 
	#XK_Armíün_≠o°r›he
 0x100055®

	)

1920 #ifde‡
XK_GEORGIAN


1921 
	#XK_Ge‹gün_™
 0x10010d0

	)

1922 
	#XK_Ge‹gün_b™
 0x10010d1

	)

1923 
	#XK_Ge‹gün_g™
 0x10010d2

	)

1924 
	#XK_Ge‹gün_d⁄
 0x10010d3

	)

1925 
	#XK_Ge‹gün_í
 0x10010d4

	)

1926 
	#XK_Ge‹gün_vö
 0x10010d5

	)

1927 
	#XK_Ge‹gün_zí
 0x10010d6

	)

1928 
	#XK_Ge‹gün_èn
 0x10010d7

	)

1929 
	#XK_Ge‹gün_ö
 0x10010d8

	)

1930 
	#XK_Ge‹gün_k™
 0x10010d9

	)

1931 
	#XK_Ge‹gün_œs
 0x10010d®

	)

1932 
	#XK_Ge‹gün_m™
 0x10010db

	)

1933 
	#XK_Ge‹gün_«r
 0x10010d¯

	)

1934 
	#XK_Ge‹gün_⁄
 0x10010dd

	)

1935 
	#XK_Ge‹gün_∑r
 0x10010dê

	)

1936 
	#XK_Ge‹gün_zh¨
 0x10010d‡

	)

1937 
	#XK_Ge‹gün_øe
 0x10010e0

	)

1938 
	#XK_Ge‹gün_ßn
 0x10010e1

	)

1939 
	#XK_Ge‹gün_èr
 0x10010e2

	)

1940 
	#XK_Ge‹gün_un
 0x10010e3

	)

1941 
	#XK_Ge‹gün_ph¨
 0x10010e4

	)

1942 
	#XK_Ge‹gün_kh¨
 0x10010e5

	)

1943 
	#XK_Ge‹gün_gh™
 0x10010e6

	)

1944 
	#XK_Ge‹gün_q¨
 0x10010e7

	)

1945 
	#XK_Ge‹gün_shö
 0x10010e8

	)

1946 
	#XK_Ge‹gün_chö
 0x10010e9

	)

1947 
	#XK_Ge‹gün_ˇn
 0x10010ó

	)

1948 
	#XK_Ge‹gün_jû
 0x10010eb

	)

1949 
	#XK_Ge‹gün_cû
 0x10010e¯

	)

1950 
	#XK_Ge‹gün_ch¨
 0x10010ed

	)

1951 
	#XK_Ge‹gün_x™
 0x10010ì

	)

1952 
	#XK_Ge‹gün_jh™
 0x10010e‡

	)

1953 
	#XK_Ge‹gün_h´
 0x10010f0

	)

1954 
	#XK_Ge‹gün_he
 0x10010f1

	)

1955 
	#XK_Ge‹gün_hõ
 0x10010f2

	)

1956 
	#XK_Ge‹gün_we
 0x10010f3

	)

1957 
	#XK_Ge‹gün_h¨
 0x10010f4

	)

1958 
	#XK_Ge‹gün_h€
 0x10010f5

	)

1959 
	#XK_Ge‹gün_fi
 0x10010f6

	)

1966 #ifde‡
XK_CAUCASUS


1968 
	#XK_XabovedŸ
 0x1001e8®

	)

1969 
	#XK_Ibªve
 0x100012¯

	)

1970 
	#XK_Z°roke
 0x10001b5

	)

1971 
	#XK_Gˇr⁄
 0x10001e6

	)

1972 
	#XK_Oˇr⁄
 0x10001d1

	)

1973 
	#XK_Ob¨ªd
 0x100019‡

	)

1974 
	#XK_xabovedŸ
 0x1001e8b

	)

1975 
	#XK_ibªve
 0x100012d

	)

1976 
	#XK_z°roke
 0x10001b6

	)

1977 
	#XK_gˇr⁄
 0x10001e7

	)

1978 
	#XK_oˇr⁄
 0x10001d2

	)

1979 
	#XK_ob¨ªd
 0x1000275

	)

1980 
	#XK_SCHWA
 0x100018‡

	)

1981 
	#XK_schwa
 0x1000259

	)

1982 
	#XK_EZH
 0x10001b7

	)

1983 
	#XK_ezh
 0x1000292

	)

1986 
	#XK_LbñowdŸ
 0x1001e36

	)

1987 
	#XK_lbñowdŸ
 0x1001e37

	)

1994 #ifde‡
XK_VIETNAMESE


1995 
	#XK_AbñowdŸ
 0x1001ó0

	)

1996 
	#XK_abñowdŸ
 0x1001ó1

	)

1997 
	#XK_Ahook
 0x1001ó2

	)

1998 
	#XK_ahook
 0x1001ó3

	)

1999 
	#XK_AcúcumÊexacuã
 0x1001ó4

	)

2000 
	#XK_acúcumÊexacuã
 0x1001ó5

	)

2001 
	#XK_AcúcumÊexgøve
 0x1001ó6

	)

2002 
	#XK_acúcumÊexgøve
 0x1001ó7

	)

2003 
	#XK_AcúcumÊexhook
 0x1001ó8

	)

2004 
	#XK_acúcumÊexhook
 0x1001ó9

	)

2005 
	#XK_AcúcumÊextûde
 0x1001ó®

	)

2006 
	#XK_acúcumÊextûde
 0x1001ób

	)

2007 
	#XK_AcúcumÊexbñowdŸ
 0x1001ó¯

	)

2008 
	#XK_acúcumÊexbñowdŸ
 0x1001ód

	)

2009 
	#XK_Abªvócuã
 0x1001óê

	)

2010 
	#XK_abªvócuã
 0x1001ó‡

	)

2011 
	#XK_Abªvegøve
 0x1001eb0

	)

2012 
	#XK_abªvegøve
 0x1001eb1

	)

2013 
	#XK_Abªvehook
 0x1001eb2

	)

2014 
	#XK_abªvehook
 0x1001eb3

	)

2015 
	#XK_Abªvëûde
 0x1001eb4

	)

2016 
	#XK_abªvëûde
 0x1001eb5

	)

2017 
	#XK_AbªvebñowdŸ
 0x1001eb6

	)

2018 
	#XK_abªvebñowdŸ
 0x1001eb7

	)

2019 
	#XK_EbñowdŸ
 0x1001eb8

	)

2020 
	#XK_ebñowdŸ
 0x1001eb9

	)

2021 
	#XK_Ehook
 0x1001eb®

	)

2022 
	#XK_ehook
 0x1001ebb

	)

2023 
	#XK_Etûde
 0x1001eb¯

	)

2024 
	#XK_ëûde
 0x1001ebd

	)

2025 
	#XK_EcúcumÊexacuã
 0x1001ebê

	)

2026 
	#XK_ecúcumÊexacuã
 0x1001eb‡

	)

2027 
	#XK_EcúcumÊexgøve
 0x1001ec0

	)

2028 
	#XK_ecúcumÊexgøve
 0x1001ec1

	)

2029 
	#XK_EcúcumÊexhook
 0x1001ec2

	)

2030 
	#XK_ecúcumÊexhook
 0x1001ec3

	)

2031 
	#XK_EcúcumÊextûde
 0x1001ec4

	)

2032 
	#XK_ecúcumÊextûde
 0x1001ec5

	)

2033 
	#XK_EcúcumÊexbñowdŸ
 0x1001ec6

	)

2034 
	#XK_ecúcumÊexbñowdŸ
 0x1001ec7

	)

2035 
	#XK_Ihook
 0x1001ec8

	)

2036 
	#XK_ihook
 0x1001ec9

	)

2037 
	#XK_IbñowdŸ
 0x1001eˇ

	)

2038 
	#XK_ibñowdŸ
 0x1001ecb

	)

2039 
	#XK_ObñowdŸ
 0x1001ec¯

	)

2040 
	#XK_obñowdŸ
 0x1001ecd

	)

2041 
	#XK_Ohook
 0x1001e˚

	)

2042 
	#XK_ohook
 0x1001ec‡

	)

2043 
	#XK_OcúcumÊexacuã
 0x1001ed0

	)

2044 
	#XK_ocúcumÊexacuã
 0x1001ed1

	)

2045 
	#XK_OcúcumÊexgøve
 0x1001ed2

	)

2046 
	#XK_ocúcumÊexgøve
 0x1001ed3

	)

2047 
	#XK_OcúcumÊexhook
 0x1001ed4

	)

2048 
	#XK_ocúcumÊexhook
 0x1001ed5

	)

2049 
	#XK_OcúcumÊextûde
 0x1001ed6

	)

2050 
	#XK_ocúcumÊextûde
 0x1001ed7

	)

2051 
	#XK_OcúcumÊexbñowdŸ
 0x1001ed8

	)

2052 
	#XK_ocúcumÊexbñowdŸ
 0x1001ed9

	)

2053 
	#XK_Oh‹«cuã
 0x1001ed®

	)

2054 
	#XK_oh‹«cuã
 0x1001edb

	)

2055 
	#XK_Oh‹ngøve
 0x1001ed¯

	)

2056 
	#XK_oh‹ngøve
 0x1001edd

	)

2057 
	#XK_Oh‹nhook
 0x1001edê

	)

2058 
	#XK_oh‹nhook
 0x1001ed‡

	)

2059 
	#XK_Oh‹¡ûde
 0x1001ì0

	)

2060 
	#XK_oh‹¡ûde
 0x1001ì1

	)

2061 
	#XK_Oh‹nbñowdŸ
 0x1001ì2

	)

2062 
	#XK_oh‹nbñowdŸ
 0x1001ì3

	)

2063 
	#XK_UbñowdŸ
 0x1001ì4

	)

2064 
	#XK_ubñowdŸ
 0x1001ì5

	)

2065 
	#XK_Uhook
 0x1001ì6

	)

2066 
	#XK_uhook
 0x1001ì7

	)

2067 
	#XK_Uh‹«cuã
 0x1001ì8

	)

2068 
	#XK_uh‹«cuã
 0x1001ì9

	)

2069 
	#XK_Uh‹ngøve
 0x1001ì®

	)

2070 
	#XK_uh‹ngøve
 0x1001ìb

	)

2071 
	#XK_Uh‹nhook
 0x1001ì¯

	)

2072 
	#XK_uh‹nhook
 0x1001ìd

	)

2073 
	#XK_Uh‹¡ûde
 0x1001ìê

	)

2074 
	#XK_uh‹¡ûde
 0x1001ì‡

	)

2075 
	#XK_Uh‹nbñowdŸ
 0x1001ef0

	)

2076 
	#XK_uh‹nbñowdŸ
 0x1001ef1

	)

2077 
	#XK_YbñowdŸ
 0x1001ef4

	)

2078 
	#XK_ybñowdŸ
 0x1001ef5

	)

2079 
	#XK_Yhook
 0x1001ef6

	)

2080 
	#XK_yhook
 0x1001ef7

	)

2081 
	#XK_Ytûde
 0x1001ef8

	)

2082 
	#XK_ytûde
 0x1001ef9

	)

2083 
	#XK_Oh‹n
 0x10001a0

	)

2084 
	#XK_oh‹n
 0x10001a1

	)

2085 
	#XK_Uh‹n
 0x10001a‡

	)

2086 
	#XK_uh‹n
 0x10001b0

	)

2090 #ifde‡
XK_CURRENCY


2091 
	#XK_EcuSign
 0x10020a0

	)

2092 
	#XK_Cﬁ⁄Sign
 0x10020a1

	)

2093 
	#XK_CruzeúoSign
 0x10020a2

	)

2094 
	#XK_FFøncSign
 0x10020a3

	)

2095 
	#XK_LúaSign
 0x10020a4

	)

2096 
	#XK_MûlSign
 0x10020a5

	)

2097 
	#XK_NaúaSign
 0x10020a6

	)

2098 
	#XK_Pe£èSign
 0x10020a7

	)

2099 
	#XK_Ru≥eSign
 0x10020a8

	)

2100 
	#XK_W⁄Sign
 0x10020a9

	)

2101 
	#XK_NewSheqñSign
 0x10020Ø

	)

2102 
	#XK_D⁄gSign
 0x10020ab

	)

2103 
	#XK_EuroSign
 0x20a¯

	)

2106 #ifde‡
XK_MATHEMATICAL


2108 
	#XK_zîosu≥ri‹
 0x1002070

	)

2109 
	#XK_foursu≥ri‹
 0x1002074

	)

2110 
	#XK_fivesu≥ri‹
 0x1002075

	)

2111 
	#XK_sixsu≥ri‹
 0x1002076

	)

2112 
	#XK_£vísu≥ri‹
 0x1002077

	)

2113 
	#XK_eightsu≥ri‹
 0x1002078

	)

2114 
	#XK_nöesu≥ri‹
 0x1002079

	)

2115 
	#XK_zîosubs¸ùt
 0x1002080

	)

2116 
	#XK_⁄esubs¸ùt
 0x1002081

	)

2117 
	#XK_twosubs¸ùt
 0x1002082

	)

2118 
	#XK_thªesubs¸ùt
 0x1002083

	)

2119 
	#XK_foursubs¸ùt
 0x1002084

	)

2120 
	#XK_fivesubs¸ùt
 0x1002085

	)

2121 
	#XK_sixsubs¸ùt
 0x1002086

	)

2122 
	#XK_£vísubs¸ùt
 0x1002087

	)

2123 
	#XK_eightsubs¸ùt
 0x1002088

	)

2124 
	#XK_nöesubs¸ùt
 0x1002089

	)

2125 
	#XK_∑πdif„ª¡ül
 0x1002202

	)

2126 
	#XK_em±y£t
 0x1002205

	)

2127 
	#XK_ñemítof
 0x1002208

	)

2128 
	#XK_nŸñemítof
 0x1002209

	)

2129 
	#XK_c⁄èößs
 0x100220B

	)

2130 
	#XK_squ¨îoŸ
 0x100221A

	)

2131 
	#XK_cubîoŸ
 0x100221B

	)

2132 
	#XK_fouπhroŸ
 0x100221C

	)

2133 
	#XK_döãgøl
 0x100222C

	)

2134 
	#XK_töãgøl
 0x100222D

	)

2135 
	#XK_beˇu£
 0x1002235

	)

2136 
	#XK_≠¥oxeq
 0x1002248

	)

2137 
	#XK_nŸ≠¥oxeq
 0x1002247

	)

2138 
	#XK_nŸidítiˇl
 0x1002262

	)

2139 
	#XK_°ri˘eq
 0x1002263

	)

2142 #ifde‡
XK_BRAILLE


2143 
	#XK_bøûÀ_dŸ_1
 0xfff1

	)

2144 
	#XK_bøûÀ_dŸ_2
 0xfff2

	)

2145 
	#XK_bøûÀ_dŸ_3
 0xfff3

	)

2146 
	#XK_bøûÀ_dŸ_4
 0xfff4

	)

2147 
	#XK_bøûÀ_dŸ_5
 0xfff5

	)

2148 
	#XK_bøûÀ_dŸ_6
 0xfff6

	)

2149 
	#XK_bøûÀ_dŸ_7
 0xfff7

	)

2150 
	#XK_bøûÀ_dŸ_8
 0xfff8

	)

2151 
	#XK_bøûÀ_dŸ_9
 0xfff9

	)

2152 
	#XK_bøûÀ_dŸ_10
 0xffÁ

	)

2153 
	#XK_bøûÀ_bœnk
 0x1002800

	)

2154 
	#XK_bøûÀ_dŸs_1
 0x1002801

	)

2155 
	#XK_bøûÀ_dŸs_2
 0x1002802

	)

2156 
	#XK_bøûÀ_dŸs_12
 0x1002803

	)

2157 
	#XK_bøûÀ_dŸs_3
 0x1002804

	)

2158 
	#XK_bøûÀ_dŸs_13
 0x1002805

	)

2159 
	#XK_bøûÀ_dŸs_23
 0x1002806

	)

2160 
	#XK_bøûÀ_dŸs_123
 0x1002807

	)

2161 
	#XK_bøûÀ_dŸs_4
 0x1002808

	)

2162 
	#XK_bøûÀ_dŸs_14
 0x1002809

	)

2163 
	#XK_bøûÀ_dŸs_24
 0x100280®

	)

2164 
	#XK_bøûÀ_dŸs_124
 0x100280b

	)

2165 
	#XK_bøûÀ_dŸs_34
 0x100280¯

	)

2166 
	#XK_bøûÀ_dŸs_134
 0x100280d

	)

2167 
	#XK_bøûÀ_dŸs_234
 0x100280ê

	)

2168 
	#XK_bøûÀ_dŸs_1234
 0x100280‡

	)

2169 
	#XK_bøûÀ_dŸs_5
 0x1002810

	)

2170 
	#XK_bøûÀ_dŸs_15
 0x1002811

	)

2171 
	#XK_bøûÀ_dŸs_25
 0x1002812

	)

2172 
	#XK_bøûÀ_dŸs_125
 0x1002813

	)

2173 
	#XK_bøûÀ_dŸs_35
 0x1002814

	)

2174 
	#XK_bøûÀ_dŸs_135
 0x1002815

	)

2175 
	#XK_bøûÀ_dŸs_235
 0x1002816

	)

2176 
	#XK_bøûÀ_dŸs_1235
 0x1002817

	)

2177 
	#XK_bøûÀ_dŸs_45
 0x1002818

	)

2178 
	#XK_bøûÀ_dŸs_145
 0x1002819

	)

2179 
	#XK_bøûÀ_dŸs_245
 0x100281®

	)

2180 
	#XK_bøûÀ_dŸs_1245
 0x100281b

	)

2181 
	#XK_bøûÀ_dŸs_345
 0x100281¯

	)

2182 
	#XK_bøûÀ_dŸs_1345
 0x100281d

	)

2183 
	#XK_bøûÀ_dŸs_2345
 0x100281ê

	)

2184 
	#XK_bøûÀ_dŸs_12345
 0x100281‡

	)

2185 
	#XK_bøûÀ_dŸs_6
 0x1002820

	)

2186 
	#XK_bøûÀ_dŸs_16
 0x1002821

	)

2187 
	#XK_bøûÀ_dŸs_26
 0x1002822

	)

2188 
	#XK_bøûÀ_dŸs_126
 0x1002823

	)

2189 
	#XK_bøûÀ_dŸs_36
 0x1002824

	)

2190 
	#XK_bøûÀ_dŸs_136
 0x1002825

	)

2191 
	#XK_bøûÀ_dŸs_236
 0x1002826

	)

2192 
	#XK_bøûÀ_dŸs_1236
 0x1002827

	)

2193 
	#XK_bøûÀ_dŸs_46
 0x1002828

	)

2194 
	#XK_bøûÀ_dŸs_146
 0x1002829

	)

2195 
	#XK_bøûÀ_dŸs_246
 0x100282®

	)

2196 
	#XK_bøûÀ_dŸs_1246
 0x100282b

	)

2197 
	#XK_bøûÀ_dŸs_346
 0x100282¯

	)

2198 
	#XK_bøûÀ_dŸs_1346
 0x100282d

	)

2199 
	#XK_bøûÀ_dŸs_2346
 0x100282ê

	)

2200 
	#XK_bøûÀ_dŸs_12346
 0x100282‡

	)

2201 
	#XK_bøûÀ_dŸs_56
 0x1002830

	)

2202 
	#XK_bøûÀ_dŸs_156
 0x1002831

	)

2203 
	#XK_bøûÀ_dŸs_256
 0x1002832

	)

2204 
	#XK_bøûÀ_dŸs_1256
 0x1002833

	)

2205 
	#XK_bøûÀ_dŸs_356
 0x1002834

	)

2206 
	#XK_bøûÀ_dŸs_1356
 0x1002835

	)

2207 
	#XK_bøûÀ_dŸs_2356
 0x1002836

	)

2208 
	#XK_bøûÀ_dŸs_12356
 0x1002837

	)

2209 
	#XK_bøûÀ_dŸs_456
 0x1002838

	)

2210 
	#XK_bøûÀ_dŸs_1456
 0x1002839

	)

2211 
	#XK_bøûÀ_dŸs_2456
 0x100283®

	)

2212 
	#XK_bøûÀ_dŸs_12456
 0x100283b

	)

2213 
	#XK_bøûÀ_dŸs_3456
 0x100283¯

	)

2214 
	#XK_bøûÀ_dŸs_13456
 0x100283d

	)

2215 
	#XK_bøûÀ_dŸs_23456
 0x100283ê

	)

2216 
	#XK_bøûÀ_dŸs_123456
 0x100283‡

	)

2217 
	#XK_bøûÀ_dŸs_7
 0x1002840

	)

2218 
	#XK_bøûÀ_dŸs_17
 0x1002841

	)

2219 
	#XK_bøûÀ_dŸs_27
 0x1002842

	)

2220 
	#XK_bøûÀ_dŸs_127
 0x1002843

	)

2221 
	#XK_bøûÀ_dŸs_37
 0x1002844

	)

2222 
	#XK_bøûÀ_dŸs_137
 0x1002845

	)

2223 
	#XK_bøûÀ_dŸs_237
 0x1002846

	)

2224 
	#XK_bøûÀ_dŸs_1237
 0x1002847

	)

2225 
	#XK_bøûÀ_dŸs_47
 0x1002848

	)

2226 
	#XK_bøûÀ_dŸs_147
 0x1002849

	)

2227 
	#XK_bøûÀ_dŸs_247
 0x100284®

	)

2228 
	#XK_bøûÀ_dŸs_1247
 0x100284b

	)

2229 
	#XK_bøûÀ_dŸs_347
 0x100284¯

	)

2230 
	#XK_bøûÀ_dŸs_1347
 0x100284d

	)

2231 
	#XK_bøûÀ_dŸs_2347
 0x100284ê

	)

2232 
	#XK_bøûÀ_dŸs_12347
 0x100284‡

	)

2233 
	#XK_bøûÀ_dŸs_57
 0x1002850

	)

2234 
	#XK_bøûÀ_dŸs_157
 0x1002851

	)

2235 
	#XK_bøûÀ_dŸs_257
 0x1002852

	)

2236 
	#XK_bøûÀ_dŸs_1257
 0x1002853

	)

2237 
	#XK_bøûÀ_dŸs_357
 0x1002854

	)

2238 
	#XK_bøûÀ_dŸs_1357
 0x1002855

	)

2239 
	#XK_bøûÀ_dŸs_2357
 0x1002856

	)

2240 
	#XK_bøûÀ_dŸs_12357
 0x1002857

	)

2241 
	#XK_bøûÀ_dŸs_457
 0x1002858

	)

2242 
	#XK_bøûÀ_dŸs_1457
 0x1002859

	)

2243 
	#XK_bøûÀ_dŸs_2457
 0x100285®

	)

2244 
	#XK_bøûÀ_dŸs_12457
 0x100285b

	)

2245 
	#XK_bøûÀ_dŸs_3457
 0x100285¯

	)

2246 
	#XK_bøûÀ_dŸs_13457
 0x100285d

	)

2247 
	#XK_bøûÀ_dŸs_23457
 0x100285ê

	)

2248 
	#XK_bøûÀ_dŸs_123457
 0x100285‡

	)

2249 
	#XK_bøûÀ_dŸs_67
 0x1002860

	)

2250 
	#XK_bøûÀ_dŸs_167
 0x1002861

	)

2251 
	#XK_bøûÀ_dŸs_267
 0x1002862

	)

2252 
	#XK_bøûÀ_dŸs_1267
 0x1002863

	)

2253 
	#XK_bøûÀ_dŸs_367
 0x1002864

	)

2254 
	#XK_bøûÀ_dŸs_1367
 0x1002865

	)

2255 
	#XK_bøûÀ_dŸs_2367
 0x1002866

	)

2256 
	#XK_bøûÀ_dŸs_12367
 0x1002867

	)

2257 
	#XK_bøûÀ_dŸs_467
 0x1002868

	)

2258 
	#XK_bøûÀ_dŸs_1467
 0x1002869

	)

2259 
	#XK_bøûÀ_dŸs_2467
 0x100286®

	)

2260 
	#XK_bøûÀ_dŸs_12467
 0x100286b

	)

2261 
	#XK_bøûÀ_dŸs_3467
 0x100286¯

	)

2262 
	#XK_bøûÀ_dŸs_13467
 0x100286d

	)

2263 
	#XK_bøûÀ_dŸs_23467
 0x100286ê

	)

2264 
	#XK_bøûÀ_dŸs_123467
 0x100286‡

	)

2265 
	#XK_bøûÀ_dŸs_567
 0x1002870

	)

2266 
	#XK_bøûÀ_dŸs_1567
 0x1002871

	)

2267 
	#XK_bøûÀ_dŸs_2567
 0x1002872

	)

2268 
	#XK_bøûÀ_dŸs_12567
 0x1002873

	)

2269 
	#XK_bøûÀ_dŸs_3567
 0x1002874

	)

2270 
	#XK_bøûÀ_dŸs_13567
 0x1002875

	)

2271 
	#XK_bøûÀ_dŸs_23567
 0x1002876

	)

2272 
	#XK_bøûÀ_dŸs_123567
 0x1002877

	)

2273 
	#XK_bøûÀ_dŸs_4567
 0x1002878

	)

2274 
	#XK_bøûÀ_dŸs_14567
 0x1002879

	)

2275 
	#XK_bøûÀ_dŸs_24567
 0x100287®

	)

2276 
	#XK_bøûÀ_dŸs_124567
 0x100287b

	)

2277 
	#XK_bøûÀ_dŸs_34567
 0x100287¯

	)

2278 
	#XK_bøûÀ_dŸs_134567
 0x100287d

	)

2279 
	#XK_bøûÀ_dŸs_234567
 0x100287ê

	)

2280 
	#XK_bøûÀ_dŸs_1234567
 0x100287‡

	)

2281 
	#XK_bøûÀ_dŸs_8
 0x1002880

	)

2282 
	#XK_bøûÀ_dŸs_18
 0x1002881

	)

2283 
	#XK_bøûÀ_dŸs_28
 0x1002882

	)

2284 
	#XK_bøûÀ_dŸs_128
 0x1002883

	)

2285 
	#XK_bøûÀ_dŸs_38
 0x1002884

	)

2286 
	#XK_bøûÀ_dŸs_138
 0x1002885

	)

2287 
	#XK_bøûÀ_dŸs_238
 0x1002886

	)

2288 
	#XK_bøûÀ_dŸs_1238
 0x1002887

	)

2289 
	#XK_bøûÀ_dŸs_48
 0x1002888

	)

2290 
	#XK_bøûÀ_dŸs_148
 0x1002889

	)

2291 
	#XK_bøûÀ_dŸs_248
 0x100288®

	)

2292 
	#XK_bøûÀ_dŸs_1248
 0x100288b

	)

2293 
	#XK_bøûÀ_dŸs_348
 0x100288¯

	)

2294 
	#XK_bøûÀ_dŸs_1348
 0x100288d

	)

2295 
	#XK_bøûÀ_dŸs_2348
 0x100288ê

	)

2296 
	#XK_bøûÀ_dŸs_12348
 0x100288‡

	)

2297 
	#XK_bøûÀ_dŸs_58
 0x1002890

	)

2298 
	#XK_bøûÀ_dŸs_158
 0x1002891

	)

2299 
	#XK_bøûÀ_dŸs_258
 0x1002892

	)

2300 
	#XK_bøûÀ_dŸs_1258
 0x1002893

	)

2301 
	#XK_bøûÀ_dŸs_358
 0x1002894

	)

2302 
	#XK_bøûÀ_dŸs_1358
 0x1002895

	)

2303 
	#XK_bøûÀ_dŸs_2358
 0x1002896

	)

2304 
	#XK_bøûÀ_dŸs_12358
 0x1002897

	)

2305 
	#XK_bøûÀ_dŸs_458
 0x1002898

	)

2306 
	#XK_bøûÀ_dŸs_1458
 0x1002899

	)

2307 
	#XK_bøûÀ_dŸs_2458
 0x100289®

	)

2308 
	#XK_bøûÀ_dŸs_12458
 0x100289b

	)

2309 
	#XK_bøûÀ_dŸs_3458
 0x100289¯

	)

2310 
	#XK_bøûÀ_dŸs_13458
 0x100289d

	)

2311 
	#XK_bøûÀ_dŸs_23458
 0x100289ê

	)

2312 
	#XK_bøûÀ_dŸs_123458
 0x100289‡

	)

2313 
	#XK_bøûÀ_dŸs_68
 0x10028a0

	)

2314 
	#XK_bøûÀ_dŸs_168
 0x10028a1

	)

2315 
	#XK_bøûÀ_dŸs_268
 0x10028a2

	)

2316 
	#XK_bøûÀ_dŸs_1268
 0x10028a3

	)

2317 
	#XK_bøûÀ_dŸs_368
 0x10028a4

	)

2318 
	#XK_bøûÀ_dŸs_1368
 0x10028a5

	)

2319 
	#XK_bøûÀ_dŸs_2368
 0x10028a6

	)

2320 
	#XK_bøûÀ_dŸs_12368
 0x10028a7

	)

2321 
	#XK_bøûÀ_dŸs_468
 0x10028a8

	)

2322 
	#XK_bøûÀ_dŸs_1468
 0x10028a9

	)

2323 
	#XK_bøûÀ_dŸs_2468
 0x10028Ø

	)

2324 
	#XK_bøûÀ_dŸs_12468
 0x10028ab

	)

2325 
	#XK_bøûÀ_dŸs_3468
 0x10028a¯

	)

2326 
	#XK_bøûÀ_dŸs_13468
 0x10028ad

	)

2327 
	#XK_bøûÀ_dŸs_23468
 0x10028´

	)

2328 
	#XK_bøûÀ_dŸs_123468
 0x10028a‡

	)

2329 
	#XK_bøûÀ_dŸs_568
 0x10028b0

	)

2330 
	#XK_bøûÀ_dŸs_1568
 0x10028b1

	)

2331 
	#XK_bøûÀ_dŸs_2568
 0x10028b2

	)

2332 
	#XK_bøûÀ_dŸs_12568
 0x10028b3

	)

2333 
	#XK_bøûÀ_dŸs_3568
 0x10028b4

	)

2334 
	#XK_bøûÀ_dŸs_13568
 0x10028b5

	)

2335 
	#XK_bøûÀ_dŸs_23568
 0x10028b6

	)

2336 
	#XK_bøûÀ_dŸs_123568
 0x10028b7

	)

2337 
	#XK_bøûÀ_dŸs_4568
 0x10028b8

	)

2338 
	#XK_bøûÀ_dŸs_14568
 0x10028b9

	)

2339 
	#XK_bøûÀ_dŸs_24568
 0x10028b®

	)

2340 
	#XK_bøûÀ_dŸs_124568
 0x10028bb

	)

2341 
	#XK_bøûÀ_dŸs_34568
 0x10028b¯

	)

2342 
	#XK_bøûÀ_dŸs_134568
 0x10028bd

	)

2343 
	#XK_bøûÀ_dŸs_234568
 0x10028bê

	)

2344 
	#XK_bøûÀ_dŸs_1234568
 0x10028b‡

	)

2345 
	#XK_bøûÀ_dŸs_78
 0x10028c0

	)

2346 
	#XK_bøûÀ_dŸs_178
 0x10028c1

	)

2347 
	#XK_bøûÀ_dŸs_278
 0x10028c2

	)

2348 
	#XK_bøûÀ_dŸs_1278
 0x10028c3

	)

2349 
	#XK_bøûÀ_dŸs_378
 0x10028c4

	)

2350 
	#XK_bøûÀ_dŸs_1378
 0x10028c5

	)

2351 
	#XK_bøûÀ_dŸs_2378
 0x10028c6

	)

2352 
	#XK_bøûÀ_dŸs_12378
 0x10028c7

	)

2353 
	#XK_bøûÀ_dŸs_478
 0x10028c8

	)

2354 
	#XK_bøûÀ_dŸs_1478
 0x10028c9

	)

2355 
	#XK_bøûÀ_dŸs_2478
 0x10028ˇ

	)

2356 
	#XK_bøûÀ_dŸs_12478
 0x10028cb

	)

2357 
	#XK_bøûÀ_dŸs_3478
 0x10028c¯

	)

2358 
	#XK_bøûÀ_dŸs_13478
 0x10028cd

	)

2359 
	#XK_bøûÀ_dŸs_23478
 0x10028˚

	)

2360 
	#XK_bøûÀ_dŸs_123478
 0x10028c‡

	)

2361 
	#XK_bøûÀ_dŸs_578
 0x10028d0

	)

2362 
	#XK_bøûÀ_dŸs_1578
 0x10028d1

	)

2363 
	#XK_bøûÀ_dŸs_2578
 0x10028d2

	)

2364 
	#XK_bøûÀ_dŸs_12578
 0x10028d3

	)

2365 
	#XK_bøûÀ_dŸs_3578
 0x10028d4

	)

2366 
	#XK_bøûÀ_dŸs_13578
 0x10028d5

	)

2367 
	#XK_bøûÀ_dŸs_23578
 0x10028d6

	)

2368 
	#XK_bøûÀ_dŸs_123578
 0x10028d7

	)

2369 
	#XK_bøûÀ_dŸs_4578
 0x10028d8

	)

2370 
	#XK_bøûÀ_dŸs_14578
 0x10028d9

	)

2371 
	#XK_bøûÀ_dŸs_24578
 0x10028d®

	)

2372 
	#XK_bøûÀ_dŸs_124578
 0x10028db

	)

2373 
	#XK_bøûÀ_dŸs_34578
 0x10028d¯

	)

2374 
	#XK_bøûÀ_dŸs_134578
 0x10028dd

	)

2375 
	#XK_bøûÀ_dŸs_234578
 0x10028dê

	)

2376 
	#XK_bøûÀ_dŸs_1234578
 0x10028d‡

	)

2377 
	#XK_bøûÀ_dŸs_678
 0x10028e0

	)

2378 
	#XK_bøûÀ_dŸs_1678
 0x10028e1

	)

2379 
	#XK_bøûÀ_dŸs_2678
 0x10028e2

	)

2380 
	#XK_bøûÀ_dŸs_12678
 0x10028e3

	)

2381 
	#XK_bøûÀ_dŸs_3678
 0x10028e4

	)

2382 
	#XK_bøûÀ_dŸs_13678
 0x10028e5

	)

2383 
	#XK_bøûÀ_dŸs_23678
 0x10028e6

	)

2384 
	#XK_bøûÀ_dŸs_123678
 0x10028e7

	)

2385 
	#XK_bøûÀ_dŸs_4678
 0x10028e8

	)

2386 
	#XK_bøûÀ_dŸs_14678
 0x10028e9

	)

2387 
	#XK_bøûÀ_dŸs_24678
 0x10028ó

	)

2388 
	#XK_bøûÀ_dŸs_124678
 0x10028eb

	)

2389 
	#XK_bøûÀ_dŸs_34678
 0x10028e¯

	)

2390 
	#XK_bøûÀ_dŸs_134678
 0x10028ed

	)

2391 
	#XK_bøûÀ_dŸs_234678
 0x10028ì

	)

2392 
	#XK_bøûÀ_dŸs_1234678
 0x10028e‡

	)

2393 
	#XK_bøûÀ_dŸs_5678
 0x10028f0

	)

2394 
	#XK_bøûÀ_dŸs_15678
 0x10028f1

	)

2395 
	#XK_bøûÀ_dŸs_25678
 0x10028f2

	)

2396 
	#XK_bøûÀ_dŸs_125678
 0x10028f3

	)

2397 
	#XK_bøûÀ_dŸs_35678
 0x10028f4

	)

2398 
	#XK_bøûÀ_dŸs_135678
 0x10028f5

	)

2399 
	#XK_bøûÀ_dŸs_235678
 0x10028f6

	)

2400 
	#XK_bøûÀ_dŸs_1235678
 0x10028f7

	)

2401 
	#XK_bøûÀ_dŸs_45678
 0x10028f8

	)

2402 
	#XK_bøûÀ_dŸs_145678
 0x10028f9

	)

2403 
	#XK_bøûÀ_dŸs_245678
 0x10028Á

	)

2404 
	#XK_bøûÀ_dŸs_1245678
 0x10028fb

	)

2405 
	#XK_bøûÀ_dŸs_345678
 0x10028f¯

	)

2406 
	#XK_bøûÀ_dŸs_1345678
 0x10028fd

	)

2407 
	#XK_bøûÀ_dŸs_2345678
 0x10028„

	)

2408 
	#XK_bøûÀ_dŸs_12345678
 0x10028f‡

	)

2416 #ifde‡
XK_SINHALA


2417 
	#XK_Söh_ng
 0x1000d82

	)

2418 
	#XK_Söh_h2
 0x1000d83

	)

2419 
	#XK_Söh_a
 0x1000d85

	)

2420 
	#XK_Söh_Ø
 0x1000d86

	)

2421 
	#XK_Söh_´
 0x1000d87

	)

2422 
	#XK_Söh_´e
 0x1000d88

	)

2423 
	#XK_Söh_i
 0x1000d89

	)

2424 
	#XK_Söh_ii
 0x1000d8®

	)

2425 
	#XK_Söh_u
 0x1000d8b

	)

2426 
	#XK_Söh_uu
 0x1000d8¯

	)

2427 
	#XK_Söh_ri
 0x1000d8d

	)

2428 
	#XK_Söh_rii
 0x1000d8ê

	)

2429 
	#XK_Söh_lu
 0x1000d8‡

	)

2430 
	#XK_Söh_luu
 0x1000d90

	)

2431 
	#XK_Söh_e
 0x1000d91

	)

2432 
	#XK_Söh_ì
 0x1000d92

	)

2433 
	#XK_Söh_ai
 0x1000d93

	)

2434 
	#XK_Söh_o
 0x1000d94

	)

2435 
	#XK_Söh_oo
 0x1000d95

	)

2436 
	#XK_Söh_au
 0x1000d96

	)

2437 
	#XK_Söh_ka
 0x1000d9®

	)

2438 
	#XK_Söh_kha
 0x1000d9b

	)

2439 
	#XK_Söh_ga
 0x1000d9¯

	)

2440 
	#XK_Söh_gha
 0x1000d9d

	)

2441 
	#XK_Söh_ng2
 0x1000d9ê

	)

2442 
	#XK_Söh_nga
 0x1000d9‡

	)

2443 
	#XK_Söh_ˇ
 0x1000da0

	)

2444 
	#XK_Söh_cha
 0x1000da1

	)

2445 
	#XK_Söh_ja
 0x1000da2

	)

2446 
	#XK_Söh_jha
 0x1000da3

	)

2447 
	#XK_Söh_nya
 0x1000da4

	)

2448 
	#XK_Söh_jnya
 0x1000da5

	)

2449 
	#XK_Söh_nja
 0x1000da6

	)

2450 
	#XK_Söh_âa
 0x1000da7

	)

2451 
	#XK_Söh_âha
 0x1000da8

	)

2452 
	#XK_Söh_dda
 0x1000da9

	)

2453 
	#XK_Söh_ddha
 0x1000dØ

	)

2454 
	#XK_Söh_¬a
 0x1000dab

	)

2455 
	#XK_Söh_ndda
 0x1000da¯

	)

2456 
	#XK_Söh_tha
 0x1000dad

	)

2457 
	#XK_Söh_thha
 0x1000d´

	)

2458 
	#XK_Söh_dha
 0x1000da‡

	)

2459 
	#XK_Söh_dhha
 0x1000db0

	)

2460 
	#XK_Söh_«
 0x1000db1

	)

2461 
	#XK_Söh_ndha
 0x1000db3

	)

2462 
	#XK_Söh_∑
 0x1000db4

	)

2463 
	#XK_Söh_pha
 0x1000db5

	)

2464 
	#XK_Söh_ba
 0x1000db6

	)

2465 
	#XK_Söh_bha
 0x1000db7

	)

2466 
	#XK_Söh_ma
 0x1000db8

	)

2467 
	#XK_Söh_mba
 0x1000db9

	)

2468 
	#XK_Söh_ya
 0x1000db®

	)

2469 
	#XK_Söh_ø
 0x1000dbb

	)

2470 
	#XK_Söh_œ
 0x1000dbd

	)

2471 
	#XK_Söh_va
 0x1000dc0

	)

2472 
	#XK_Söh_sha
 0x1000dc1

	)

2473 
	#XK_Söh_ssha
 0x1000dc2

	)

2474 
	#XK_Söh_ß
 0x1000dc3

	)

2475 
	#XK_Söh_ha
 0x1000dc4

	)

2476 
	#XK_Söh_Œa
 0x1000dc5

	)

2477 
	#XK_Söh_Á
 0x1000dc6

	)

2478 
	#XK_Söh_Æ
 0x1000dˇ

	)

2479 
	#XK_Söh_Ø2
 0x1000dc‡

	)

2480 
	#XK_Söh_´2
 0x1000dd0

	)

2481 
	#XK_Söh_´e2
 0x1000dd1

	)

2482 
	#XK_Söh_i2
 0x1000dd2

	)

2483 
	#XK_Söh_ii2
 0x1000dd3

	)

2484 
	#XK_Söh_u2
 0x1000dd4

	)

2485 
	#XK_Söh_uu2
 0x1000dd6

	)

2486 
	#XK_Söh_ru2
 0x1000dd8

	)

2487 
	#XK_Söh_e2
 0x1000dd9

	)

2488 
	#XK_Söh_ì2
 0x1000dd®

	)

2489 
	#XK_Söh_ai2
 0x1000ddb

	)

2490 
	#XK_Söh_o2
 0x1000dd¯

	)

2491 
	#XK_Söh_oo2
 0x1000ddd

	)

2492 
	#XK_Söh_au2
 0x1000ddê

	)

2493 
	#XK_Söh_lu2
 0x1000dd‡

	)

2494 
	#XK_Söh_ruu2
 0x1000df2

	)

2495 
	#XK_Söh_luu2
 0x1000df3

	)

2496 
	#XK_Söh_kunddÆiya
 0x1000df4

	)

	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

24 
	~<bôs/ídün.h
>

26 #ifde‡
__USE_MISC


27 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

28 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

29 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

30 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

33 #i‡
deföed
 
__USE_MISC
 && !deföed 
__ASSEMBLER__


35 
	~<bôs/byãsw≠.h
>

36 
	~<bôs/uöä-idítôy.h
>

38 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


39 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

40 
	#htﬁe16
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

41 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

42 
	#À16toh
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

44 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

45 
	#htﬁe32
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

46 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

47 
	#À32toh
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

49 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

50 
	#htﬁe64
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

51 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

52 
	#À64toh
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

55 
	#htobe16
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

56 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

57 
	#be16toh
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

58 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

60 
	#htobe32
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

61 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

62 
	#be32toh
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

63 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

65 
	#htobe64
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

66 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

67 
	#be64toh
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

68 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features-time64.h

20 
	~<bôs/w‹dsize.h
>

21 
	~<bôs/timesize.h
>

23 #i‡
deföed
 
_TIME_BITS


24 #i‡
_TIME_BITS
 == 64

25 #i‡! 
deföed
 (
_FILE_OFFSET_BITS
) || _FILE_OFFSET_BITS != 64

27 #ñi‡
__TIMESIZE
 == 32

28 
	#__USE_TIME_BITS64
 1

	)

30 #ñi‡
_TIME_BITS
 == 32

31 #i‡
__TIMESIZE
 > 32

35 #îr‹ 
InvÆid
 
_TIME_BITS
 
vÆue
 (
ˇn
 
⁄ly
 
be
 32 
‹
 64-
bô
)

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

58 
	#__STDC_ISO_10646__
 201706L

	)

	@
1
.
1
/usr/include
55
1031
adf_colors.h
app.c
app.h
appOption.c
appOption.h
button.c
button.h
common.cpp
common.h
common.hpp
funcs.h
getResources.c
gradient.c
gradient.h
mainloop.c
menu.c
menu.h
menubar.c
menubar.h
myMacro.h
rose.h
xc2b.c
/usr/include/X11/Xatom.h
/usr/include/X11/Xlib.h
/usr/include/X11/Xos.h
/usr/include/X11/Xresource.h
/usr/include/X11/Xutil.h
/usr/include/X11/extensions/shape.h
/usr/include/X11/xpm.h
/usr/include/locale.h
/usr/include/math.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/wchar.h
/usr/include/X11/X.h
/usr/include/X11/Xarch.h
/usr/include/X11/Xfuncproto.h
/usr/include/X11/Xosdefs.h
/usr/include/X11/Xw32defs.h
/usr/include/X11/extensions/shapeconst.h
/usr/include/X11/keysym.h
/usr/include/alloca.h
/usr/include/fcntl.h
/usr/include/features.h
/usr/include/malloc.h
/usr/include/stdint.h
/usr/include/strings.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/X11/Xmd.h
/usr/include/X11/keysymdef.h
/usr/include/endian.h
/usr/include/features-time64.h
/usr/include/stdc-predef.h
